0001   0000                     ; üíæ –∫–∞—Ä—Ç–∏–Ω–∫–∏ –Ω–µ—Ç –ø–µ—á–∞–ª—å–Ω–µ–µ –Ω–∞ —Å–≤–µ—Ç–µ
0002   0000                     ;    —á–µ–º –¥–µ–º–æ –æ –ª–µ—Ç–∞—é—â–µ–π –¥–∏—Å–∫–µ—Ç–µ
0003   0000                     ;
0004   0000                     ; svofski & ivagor 2025
0005   0000                     ;
0006   0000                     ; –í–µ–∫—Ç–æ—Ä-06—Ü –ë–õ–ö+–°–ë–†!
0007   0000                     ;
0008   0000             
0009   0000             ;#define FADE_IN
0010   0000             #define FADE_OUT
0011   0000             #define XFADE
0012   0000             
0013   0000             ; show all the text messages before the main screen appears
0014   0000             ;#define MESSAGES_AT_ONCE
0015   0000             
0016   0000             LOGOY           .equ $d8
0017   0000             FISH_Y          .equ $60
0018   0000             FISH_BP         .equ $80
0019   0000             ;LOGOY           .equ $60
0020   0000             
0021   0000             NBOUNDS         .equ 7
0022   0000             BUTTPLANE       .equ $c0
0023   0000             BUTTPLANE_A     .equ $c0
0024   0000             BUTTPLANE_B     .equ $e0
0025   0000             PixTabA         .equ 7800h
0026   0000             PixTabB         .equ 7C00h
0027   0000             DEG90           .equ 256/4
0028   0000             
0029   0100                     .org $100
0030   0100 F3                  di
0031   0101 AF                  xra a
0032   0102 D3 10               out $10
0033   0104 21 00 01            lxi h, $100
0034   0107 22 01 00            shld 1
0035   010A F9                  sphl
0036   010B             ;        mvi a, $c9
0037   010B             ;        sta $38
0038   010B             
0039   010B 21 A2 0A            lxi h,ISR
0040   010E 22 39 00            shld 39h
0041   0111 3E C3               mvi a, $c3
0042   0113 32 00 00            sta 0
0043   0116 32 38 00            sta 38h
0044   0119                     
0045   0119 21 05 39            lxi h, pal_0
0046   011C 22 36 09            shld setpal_select
0047   011F             ;        ei
0048   011F             
0049   011F                     ; clear zero initialized vars
0050   011F 21 60 39            lxi h, zero_init_end
0051   0122 3E 03               mvi a, (zero_init_end - zero_init_start) / 32
0052   0124 01 00 00            lxi b, 0
0053   0127 CD E1 05            call clear_array_backwards
0054   012A 21 01 27            lxi h, ngon_start
0055   012D 22 13 07            shld geometry_ptr
0056   0130             
0057   0130                     ;; fish init
0058   0130                     ;mvi a, $1e      ; fish appears in this column
0059   0130                     ;sta fish_col
0060   0130                     ;mvi a, 1
0061   0130                     ;sta fish_col_frac
0062   0130             
0063   0130 21 00 0B            lxi h, bounds_0
0064   0133 22 ED 0A            shld bounds
0065   0136 22 F1 0A            shld bounds1
0066   0139 21 00 12            lxi h, bounds_1
0067   013C 22 EF 0A            shld bounds_b
0068   013F 22 F3 0A            shld bounds1_b
0069   0142             
0070   0142 21 00 19            lxi h, bounds_2
0071   0145 22 F5 0A            shld bounds2
0072   0148 21 00 20            lxi h, bounds_3
0073   014B 22 F7 0A            shld bounds2_b
0074   014E                     
0075   014E 2A 06 50            lhld songe
0076   0151 CD 00 50            call player_init    ; starts playback immediately
0077   0154             
0078   0154 CD A4 03            call clrscr
0079   0157             ;        di
0080   0157 FB                  ei
0081   0158             
0082   0158 21 00 78            lxi h, PixTabA
0083   015B 3E C0               mvi a, BUTTPLANE_A
0084   015D CD 59 03            call MakePixTab
0085   0160 21 00 7C            lxi h, PixTabB
0086   0163 3E E0               mvi a, BUTTPLANE_B
0087   0165 CD 59 03            call MakePixTab
0088   0168                             
0089   0168 CD 0F 29            call mathinit
0090   016B             
0091   016B                     ; clear all bounds arrays
0092   016B 21 00 27            lxi h, bounds_end
0093   016E 3E E0               mvi a, 4 * 256 * NBOUNDS / 32   
0094   0170 01 FF FF            lxi b, $ffff ; fill with ff
0095   0173 CD E1 05            call clear_array_backwards
0096   0176             
0097   0176 21 39 39            lxi h, pal_zero_end
0098   0179 3E 01               mvi a, 1
0099   017B D3 02               out $2
0100   017D~            #ifdef FADE_IN        
0101   017D~                    lxi b, 0
0102   017D             #else
0103   017D 01 FF FF            lxi b, $ffff
0104   0180             #endif
0105   0180 CD E1 05            call clear_array_backwards
0106   0183                     
0107   0183                     
0108   0183 21 60 08            lxi h, $0860
0109   0186 CD 9E 3D            call gotoxy
0110   0189 21 E5 38            lxi h, msg_minus1
0111   018C CD C8 3D            call puts
0112   018F             
0113   018F 21 6F 09            lxi h, pal_intro
0114   0192 22 36 09            shld setpal_select
0115   0195             
0116   0195 3E F0               mvi a, 240
0117   0197             black_loop:
0118   0197 76                  hlt
0119   0198 3D                  dcr a
0120   0199 C2 97 01            jnz black_loop
0121   019C             
0122   019C 21 05 39            lxi h, pal_0
0123   019F 22 36 09            shld setpal_select
0124   01A2 76                  hlt
0125   01A3 CD A4 03            call clrscr
0126   01A6 76                  hlt
0127   01A7             
0128   01A7             
0129   01A7                     ; main part
0130   01A7             
0131   01A7                     ; –Ω–∞—Ä–∏—Å–æ–≤–∞—Ç—å –±–æ–ª—å—à—É—é –Ω–∞–¥–ø–∏—Å—å
0132   01A7 0E D8               mvi c, LOGOY
0133   01A9 3E 80               mvi a, $80    ; –ø–ª–æ—Å–∫–æ—Å—Ç—å $80
0134   01AB 32 12 02            sta varblit_plane
0135   01AE 11 60 39            lxi d, harzakc0
0136   01B1 CD FB 01            call varblit
0137   01B4             
0138   01B4 0E D7               mvi c, LOGOY-1
0139   01B6 3E A0               mvi a, $a0    ; –ø–ª–æ—Å–∫–æ—Å—Ç—å $a0
0140   01B8 32 12 02            sta varblit_plane
0141   01BB 11 90 3B            lxi d, harzakc1
0142   01BE CD FB 01            call varblit
0143   01C1             
0144   01C1~            #ifdef MESSAGES_AT_ONCE
0145   01C1~            messages:
0146   01C1~                    lxi h, msg1
0147   01C1~            messages_lup:
0148   01C1~                    mov a, m
0149   01C1~                    cpi 255
0150   01C1~                    jz messages_done
0151   01C1~                    mov e, a
0152   01C1~                    inx h
0153   01C1~                    mov d, m
0154   01C1~                    inx h
0155   01C1~                    push h
0156   01C1~                      xchg
0157   01C1~                      call gotoxy
0158   01C1~                    pop h
0159   01C1~                    call puts
0160   01C1~                    lhld _puts_sptr
0161   01C1~                    inx h
0162   01C1~                    jmp messages_lup
0163   01C1~            messages_done:        
0164   01C1             #else
0165   01C1                     ; slow messages
0166   01C1 21 00 30            lxi h, msg1
0167   01C4 22 3C 39            shld slow_msg_ptr
0168   01C7 21 22 30            lxi h, msg_restart
0169   01CA 22 3E 39            shld slow_msg_loop
0170   01CD 3E 01               mvi a, 1
0171   01CF 32 3A 39            sta slowprint_enabled
0172   01D2 32 3B 39            sta slow_msg_state
0173   01D5             #endif
0174   01D5             
0175   01D5             
0176   01D5                     ; MAIN PART BEGINS
0177   01D5             
0178   01D5                     ; begin fade in -- make sure these pointers are initialised before oneframe()
0179   01D5 21 4F 09            lxi h, pal_a        ; main palette a/b (blue)
0180   01D8 22 A4 09            shld pal_a_goal
0181   01DB 21 5F 09            lxi h, pal_b
0182   01DE 22 AD 09            shld pal_b_goal
0183   01E1             
0184   01E1 21 19 39            lxi h, pal_fade_a
0185   01E4 22 15 39            shld pal_a_ptr
0186   01E7 21 29 39            lxi h, pal_fade_b
0187   01EA 22 17 39            shld pal_b_ptr
0188   01ED             
0189   01ED CD 1D 06            call oneframe
0190   01F0             
0191   01F0 3E 08               mvi a, 8
0192   01F2 32 39 39            sta fade_in_flag    ; enable fade in for 8 frames (see ISR)
0193   01F5             
0194   01F5                     ;mvi a, 1
0195   01F5                     ;sta fish_enabled
0196   01F5             
0197   01F5             forevs:
0198   01F5 CD 1D 06            call oneframe
0199   01F8 C3 F5 01            jmp forevs
0200   01FB             
0201   01FB                             ; –≤—ã–≤–æ–¥ —Å–ø—Ä–∞–π—Ç–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ varblit:
0202   01FB                             ; db first_column, jump offset = (16 - end) * 5, data
0203   01FB                             ; db 255, 255 ; end of data
0204   01FB                             ;
0205   01FB                             ; di
0206   01FB                             ; mvi c, $d0
0207   01FB                             ; mvi a, $c0
0208   01FB                             ; sta varblit_plane
0209   01FB                             ; lxi d, varplane0
0210   01FB                             ; call varblit
0211   01FB             varblit:
0212   01FB                             ;di
0213   01FB 21 00 00                    lxi h, 0
0214   01FE 39                          dad sp
0215   01FF 22 54 03                    shld varblit_sp
0216   0202 EB                          xchg
0217   0203 79                          mov a,c
0218   0204 4E                          mov c,m
0219   0205 23                          inx h
0220   0206 46                          mov b,m
0221   0207 23                          inx h
0222   0208 F9                          sphl
0223   0209                     
0224   0209             ;                mov l, c
0225   0209 6F                          mov l,a
0226   020A FE                          .db 0FEh        ; cpi .. , skip pop b
0227   020B             vb_L0:                
0228   020B C1                          pop b       ; c = first column, b = premultiplied jump offset = (16-end) * 5
0229   020C 78                          mov a, b    ; end = 255, 255
0230   020D A1                          ana c
0231   020E FA 53 03                    jm vb_exit
0232   0211                             
0233   0211             varblit_plane   .equ $+1
0234   0211 3E C0                       mvi a, $c0 ; plane msb
0235   0213 81                          add c
0236   0214 67                          mov h, a        ; hl = screen addr
0237   0215             
0238   0215 78                          mov a, b ; b = precalculated offset into vbline_16
0239   0216 32 1A 02                    sta vb_M1+1
0240   0219 C3 00 03    vb_M1:          jmp vbline_16
0241   021C             
0242   0300                             .org $100 + $ & $ff00
0243   0300 C1          vbline_16:      pop b \ mov m, c \ inr h \ mov m, b \ inr h
0243   0301 71          
0243   0302 24          
0243   0303 70          
0243   0304 24          
0244   0305 C1                          pop b \ mov m, c \ inr h \ mov m, b \ inr h
0244   0306 71          
0244   0307 24          
0244   0308 70          
0244   0309 24          
0245   030A C1                          pop b \ mov m, c \ inr h \ mov m, b \ inr h
0245   030B 71          
0245   030C 24          
0245   030D 70          
0245   030E 24          
0246   030F C1                          pop b \ mov m, c \ inr h \ mov m, b \ inr h
0246   0310 71          
0246   0311 24          
0246   0312 70          
0246   0313 24          
0247   0314 C1                          pop b \ mov m, c \ inr h \ mov m, b \ inr h
0247   0315 71          
0247   0316 24          
0247   0317 70          
0247   0318 24          
0248   0319 C1                          pop b \ mov m, c \ inr h \ mov m, b \ inr h
0248   031A 71          
0248   031B 24          
0248   031C 70          
0248   031D 24          
0249   031E C1                          pop b \ mov m, c \ inr h \ mov m, b \ inr h
0249   031F 71          
0249   0320 24          
0249   0321 70          
0249   0322 24          
0250   0323 C1                          pop b \ mov m, c \ inr h \ mov m, b \ inr h
0250   0324 71          
0250   0325 24          
0250   0326 70          
0250   0327 24          
0251   0328 C1                          pop b \ mov m, c \ inr h \ mov m, b \ inr h
0251   0329 71          
0251   032A 24          
0251   032B 70          
0251   032C 24          
0252   032D C1                          pop b \ mov m, c \ inr h \ mov m, b \ inr h
0252   032E 71          
0252   032F 24          
0252   0330 70          
0252   0331 24          
0253   0332 C1                          pop b \ mov m, c \ inr h \ mov m, b \ inr h
0253   0333 71          
0253   0334 24          
0253   0335 70          
0253   0336 24          
0254   0337 C1                          pop b \ mov m, c \ inr h \ mov m, b \ inr h
0254   0338 71          
0254   0339 24          
0254   033A 70          
0254   033B 24          
0255   033C C1                          pop b \ mov m, c \ inr h \ mov m, b \ inr h
0255   033D 71          
0255   033E 24          
0255   033F 70          
0255   0340 24          
0256   0341 C1                          pop b \ mov m, c \ inr h \ mov m, b \ inr h
0256   0342 71          
0256   0343 24          
0256   0344 70          
0256   0345 24          
0257   0346 C1                          pop b \ mov m, c \ inr h \ mov m, b \ inr h
0257   0347 71          
0257   0348 24          
0257   0349 70          
0257   034A 24          
0258   034B C1                          pop b \ mov m, c \ inr h \ mov m, b; \ inr h
0258   034C 71          
0258   034D 24          
0258   034E 70          
0259   034F                             
0260   034F             vb_L2:          ; next line
0261   034F 2D                          dcr l
0262   0350             
0263   0350                             ;mvi a, -$73
0264   0350                             ;add l             ; –ø–µ—Ä–µ–¥ —Å—Ç—Ä–æ–∫–æ–π 73 –æ—á–∏—Å—Ç–∏—Ç—å –∫—Ä–∞—è –≤–æ–∫—Ä—É–≥ –±—É–¥—Ç–æ –º–∞—Å–∫–∞
0265   0350                             ;jz troll_clearhook
0266   0350                             ;inr a
0267   0350                             ;jz troll_hook     ; –ø–æ—Å–ª–µ —Å—Ç—Ä–æ–∫–∏ 73 –Ω–∞—Ä–∏—Å–æ–≤–∞—Ç—å –±–µ–ª—ã–π –≥–æ—Ä–∏–∑–æ–Ω—Ç –≤–æ–∫—Ä—É–≥ –ø—Ç–µ—Ä–æ–∏–¥–∞
0268   0350             
0269   0350             vb_L3:
0270   0350 C3 0B 02                    jmp vb_L0
0271   0353             
0272   0353             vb_exit:                
0273   0353             varblit_sp      .equ $+1
0274   0353 31 00 00                    lxi sp, 0
0275   0356 C9                          ret
0276   0357             
0277   0357 00 00       vb_hl:          .dw 0
0278   0359             
0279   0359             
0280   0359             
0281   0359             MakePixTab:        
0282   0359             ;HiAdr - PixTab+0000h
0283   0359                             ;lxi h,PixTab
0284   0359                             ;mvi a,BUTTPLANE
0285   0359 06 20                       mvi b,32
0286   035B             MakePixTab2:
0287   035B 0E 08                       mvi c,8
0288   035D             MakePixTab1:
0289   035D 77                          mov m,a
0290   035E 23                          inx h
0291   035F 0D                          dcr c
0292   0360 C2 5D 03                    jnz MakePixTab1
0293   0363 3C                          inr a
0294   0364 05                          dcr b
0295   0365 C2 5B 03                    jnz MakePixTab2
0296   0368             
0297   0368             ;LeftMask - PixTab+0100h
0298   0368 06 08                       mvi b,8
0299   036A 3E 80                       mvi a,80h
0300   036C 57                          mov d,a
0301   036D             MakePixTab9:
0302   036D 0E 07                       mvi c,7
0303   036F 23                          inx h
0304   0370             MakePixTab8:
0305   0370 77                          mov m,a
0306   0371 0F                          rrc\ ora d
0306   0372 B2          
0307   0373 23                          inx h
0308   0374 0D                          dcr c
0309   0375 C2 70 03                    jnz MakePixTab8
0310   0378 AF                          xra a\ ora d\ rar\ mov d,a
0310   0379 B2          
0310   037A 1F          
0310   037B 57          
0311   037C 05                          dcr b
0312   037D C2 6D 03                    jnz MakePixTab9
0313   0380 2E 00                       mvi l,0
0314   0382 24                          inr h
0315   0383             
0316   0383             ;PixLeft - PixTab+0200h
0317   0383 06 20                       mvi b,32
0318   0385             MakePixTab7:
0319   0385 3E 08                       mvi a,8
0320   0387             MakePixTab6:
0321   0387 77                          mov m,a
0322   0388 23                          inx h
0323   0389 3D                          dcr a
0324   038A C2 87 03                    jnz MakePixTab6
0325   038D 05                          dcr b
0326   038E C2 85 03                    jnz MakePixTab7
0327   0391             
0328   0391             
0329   0391             ;PixMaskLeft - PixTab+0300h
0330   0391 06 20                       mvi b,32
0331   0393             MakePixTab5:
0332   0393 3E FF                       mvi a,255
0333   0395 0E 08                       mvi c,8
0334   0397             MakePixTab4:
0335   0397 77                          mov m,a
0336   0398 B7                          ora a\ rar
0336   0399 1F          
0337   039A 23                          inx h
0338   039B 0D                          dcr c
0339   039C C2 97 03                    jnz MakePixTab4
0340   039F 05                          dcr b
0341   03A0 C2 93 03                    jnz MakePixTab5
0342   03A3 C9                  ret
0343   03A4             
0344   03A4             clrscr:        
0345   03A4 21 00 80            lxi h, $8000
0346   03A7 06 00               mvi b, $0
0347   03A9             clrscrl:        
0348   03A9 70                  mov m, b \ inx h
0348   03AA 23          
0349   03AB 70                  mov m, b \ inx h
0349   03AC 23          
0350   03AD 70                  mov m, b \ inx h
0350   03AE 23          
0351   03AF 70                  mov m, b \ inx h
0351   03B0 23          
0352   03B1 7D                  mov a, l
0353   03B2 B4                  ora h
0354   03B3 C2 A9 03            jnz clrscrl
0355   03B6 C9                  ret
0356   03B7                   
0357   03B7             
0358   03B7 01          songe_enabled: .db 1
0359   03B8             
0360   03B8             ; —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø–∏–∫—Å–µ–ª—å –≤ –ø–ª–æ—Å–∫–æ—Å—Ç–∏ $80
0361   03B8             ; –≤—Ö–æ–¥:
0362   03B8             ; H - X
0363   03B8             ; L - Y
0364   03B8             setpixel:
0365   03B8                             ;mvi c, $c0
0366   03B8 16 04                       mvi d, PixelMask >> 8
0367   03BA             
0368   03BA 3E 07                       mvi a, 7
0369   03BC A4                          ana h
0370   03BD 5F                          mov e, a
0371   03BE AC                          xra h
0372   03BF 1F                          rar \ rar \ rar
0372   03C0 1F          
0372   03C1 1F          
0373   03C2             setpixel_bp     .equ $+1                
0374   03C2 C6 C0                       adi BUTTPLANE
0375   03C4 67                          mov h, a
0376   03C5             
0377   03C5 1A                          ldax d
0378   03C6 B6                          ora m
0379   03C7 77                          mov m, a
0380   03C8 C9                          ret
0381   03C9             
0382   0400                             .org 400h
0383   0400             PixelMask:
0384   0400 80                          .db 10000000b
0385   0401 40                          .db 01000000b
0386   0402 20                          .db 00100000b
0387   0403 10                          .db 00010000b
0388   0404 08                          .db 00001000b
0389   0405 04                          .db 00000100b
0390   0406 02                          .db 00000010b
0391   0407 01                          .db 00000001b
0392   0408                     
0393   0408             RightOrMask:
0394   0408 00                          .db 00000000b
0395   0409 80                          .db 10000000b
0396   040A C0                          .db 11000000b
0397   040B E0                          .db 11100000b
0398   040C F0                          .db 11110000b
0399   040D F8                          .db 11111000b
0400   040E FC                          .db 11111100b
0401   040F FE                          .db 11111110b
0402   0410             
0403   0410             RightAndMask:
0404   0410 FF                          .db 11111111b
0405   0411 7F                          .db 01111111b
0406   0412 3F                          .db 00111111b
0407   0413 1F                          .db 00011111b
0408   0414 0F                          .db 00001111b
0409   0415 07                          .db 00000111b
0410   0416 03                          .db 00000011b
0411   0417 01                          .db 00000001b
0412   0418             
0413   0418             
0414   0418 05 46       y1x1:   .db 5, 70
0415   041A C8 05       y2x2:   .db 200, 5
0416   041C             ;xinc:   .dw 0    
0417   041C             ;ydir:   .db 0
0418   041C             ;line_h: .db 0
0419   041C             ;line_y: .db 0
0420   041C                     ; x1,y1 - x2,y2
0421   041C                     ; vert increment always +1, horz increment variable
0422   041C             line:
0423   041C 2A 18 04            lhld y1x1
0424   041F EB                  xchg
0425   0420 2A 1A 04            lhld y2x2
0426   0423                     ; swap so that y2 - y1 is positive
0427   0423 7D                  mov a, l
0428   0424 93                  sub e           ; a = y2 - y1
0429   0425 C8                  rz      ; dy = 0, nothing to do
0430   0426 D2 32 04            jnc line_2
0431   0429 22 18 04            shld y1x1
0432   042C EB                  xchg
0433   042D 22 1A 04            shld y2x2
0434   0430 7D                  mov a, l
0435   0431 93                  sub e           ; a = y2 - y1
0436   0432                     
0437   0432             line_2:
0438   0432 32 5D 04            sta line_h      ; height = y2 - y1
0439   0435             
0440   0435 7B                          mov a,e
0441   0436 32 70 04            sta line_y        ; line_y = y1
0442   0439             
0443   0439 7C                  mov a, h
0444   043A BA                  cmp d           ; x2 - x1
0445   043B D2 48 04            jnc line_xplus
0446   043E             line_xminus:
0447   043E 3E 37               mvi a, $37 ; stc
0448   0440 32 62 04            sta line_xsgn
0449   0443                     
0450   0443                     ; xinc = ((x1 - x2) << 7) / dy, negate after division
0451   0443 7A                  mov a, d
0452   0444 94                  sub h   ; a = x1 - x2
0453   0445 C3 4F 04            jmp line_shl7
0454   0448             line_xplus:
0455   0448                     ; positive xinc = ((x2 - x1) << 7) / dy
0456   0448 3E B7               mvi a, $b7 ; ora a
0457   044A 32 62 04            sta line_xsgn
0458   044D                     
0459   044D 7C                  mov a, h
0460   044E 92                  sub d   ; a = x2 - x1
0461   044F             line_shl7:        
0462   044F 1F                  rar     ; a = a >> 1
0463   0450 32 50 05            sta xinc+1
0464   0453 3E 00               mvi a, 0
0465   0455 1F                  rar
0466   0456 32 4F 05            sta xinc
0467   0459             
0468   0459             line_3:
0469   0459                     ; xinc = xinc / dy
0470   0459 2A 4F 05            lhld xinc
0471   045C             line_h  .equ $+1
0472   045C 0E 00                       mvi c,0
0473   045E AF                  xra a
0474   045F CD 7B 08            call udiv16248  ; hl = ahl/c
0475   0462             ;        xchg            ; -> de
0476   0462                     
0477   0462             line_xsgn:        
0478   0462 B7                  ora a ; ORA A = positive xinc | STC = negative xinc
0479   0463 D2 6C 04            jnc line_ldx1
0480   0466             line_negxing:
0481   0466                     ; xinc = -xinc
0482   0466 AF                          xra a\ sub l\ mov l,a
0482   0467 95          
0482   0468 6F          
0483   0469 9C                          sbb h\ sub l\ mov h,a
0483   046A 95          
0483   046B 67          
0484   046C                     
0485   046C             line_ldx1:
0486   046C 22 4F 05            shld xinc
0487   046F                             
0488   046F                     ; main loop
0489   046F             ;        call setbounds_setup
0490   046F             ;setbounds_setup:
0491   046F             line_y  .equ $+1
0492   046F 01 00 00            lxi b,0
0493   0472 60                  mov h,b
0494   0473 69                  mov l,c
0495   0474 09                  dad b
0496   0475 09                  dad b
0497   0476 29                  dad h
0498   0477 09                  dad b
0499   0478 EB                  xchg
0500   0479 2A ED 0A            lhld bounds
0501   047C 19                  dad d           ; hl = &bounds[y][0]
0502   047D             ;        shld setbounds_ptr
0503   047D EB                  xchg
0504   047E             
0505   047E 3A 19 04            lda y1x1+1      ; x1
0506   0481 B7                  ora a
0507   0482 1F                  rar
0508   0483 67                  mov h, a
0509   0484 3E 00               mvi a, 0
0510   0486 1F                  rar
0511   0487 6F                  mov l, a        ; hl = x1 << 7
0512   0488                             
0513   0488             line_4:        
0514   0488                     ; d = y, hl = x << 7
0515   0488             line_putpixel:
0516   0488 E5                  push h
0517   0489 29                  dad h \ mov a, h ; a = floor(x)
0517   048A 7C          
0518   048B                     
0519   048B                     ;push d \ push h \ push b \ push psw
0520   048B                     ;mov h, a
0521   048B                     ;call setpixel ; h=x, l=y
0522   048B                     ;pop psw \ pop b \ pop h \ pop d
0523   048B                           
0524   048B             ;        call setbounds
0525   048B                     ; insert coordinate a to bounds[l][0], maintain ascending order
0526   048B             setbounds:
0527   048B 21 07 00            lxi h, NBOUNDS
0528   048E 19                  dad d
0529   048F             ;                                   ; 20+4+12+12+20=68
0530   048F                                                                                             ; hl = &bounds[y][7]
0531   048F EB                  xchg
0532   0490 BE                  cmp m   ; bounds[i] - x, x < bounds[i] if no carry
0533   0491 D2 CD 04            jnc sbins_k1     ; if x >= bounds[k] -> next k
0534   0494                     ;x<bounds[0]
0535   0494 46                  mov b,m
0536   0495 77                  mov m,a
0537   0496 04                  inr b
0538   0497 CA 49 05            jz after_setbounds                              ; if 255 == bounds[k] bounds[k] = x, return
0539   049A                     ; else insert
0540   049A 05                  dcr b
0541   049B 23                  inx h\ inx h\ inx h\ inx h              ; hl = &bounds[y][4]
0541   049C 23          
0541   049D 23          
0541   049E 23          
0542   049F 3E FF               mvi a,255
0543   04A1                     
0544   04A1                     ; scan empty space before committing to memmove
0545   04A1                     ;k = 4 
0546   04A1 BE                  cmp m \ jnz insx44 \ dcx h     ; --> 348088 ( -1260)
0546   04A2 C2 B7 04    
0546   04A5 2B          
0547   04A6 BE                  cmp m \ jnz insx43 \ dcx h
0547   04A7 C2 BC 04    
0547   04AA 2B          
0548   04AB BE                  cmp m \ jnz insx42 \ dcx h
0548   04AC C2 C1 04    
0548   04AF 2B          
0549   04B0             ;       cmp m \ jnz insx41
0550   04B0             ;       mov m,b
0551   04B0 BE                  cmp m\ jz after_setbounds_
0551   04B1 CA 48 05    
0552   04B4 C3 C6 04            jmp insx41
0553   04B7                             
0554   04B7 7E          insx44: mov a,m \ inx h \ mov m,a \ dcx h \ dcx h ; k = 4, d[k+1] = d[k], k = 3
0554   04B8 23          
0554   04B9 77          
0554   04BA 2B          
0554   04BB 2B          
0555   04BC 7E          insx43: mov a,m \ inx h \ mov m,a \ dcx h \ dcx h ; k = 3, d[k+1] = d[k], k = 2
0555   04BD 23          
0555   04BE 77          
0555   04BF 2B          
0555   04C0 2B          
0556   04C1 7E          insx42: mov a,m \ inx h \ mov m,a \ dcx h \ dcx h ; k = 2, d[k+1] = d[k], k = 1
0556   04C2 23          
0556   04C3 77          
0556   04C4 2B          
0556   04C5 2B          
0557   04C6 7E          insx41: mov a,m \ mov m,b\ inx h \ mov m,a ; k = 1, d[k+1] = d[k], k = 0
0557   04C7 70          
0557   04C8 23          
0557   04C9 77          
0558   04CA                     ; k = 0, d[k+1] = d[k], k = 1
0559   04CA C3 49 05            jmp after_setbounds
0560   04CD                     
0561   04CD             sbins_k1:
0562   04CD 23                  inx h
0563   04CE BE                  cmp m   ; bounds[i] - x, x < bounds[i] if no carry
0564   04CF D2 00 05            jnc sbins_k2     ; if x >= bounds[k] -> next k
0565   04D2 46                  mov b,m
0566   04D3 77                  mov m,a
0567   04D4 04                  inr b
0568   04D5 CA 49 05            jz after_setbounds                              ; if 255 == bounds[k] bounds[k] = x, return
0569   04D8                     ; else insert
0570   04D8 05                  dcr b
0571   04D9 23                  inx h\ inx h\ inx h             ; hl = &bounds[y][4]
0571   04DA 23          
0571   04DB 23          
0572   04DC 3E FF               mvi a,255
0573   04DE                     
0574   04DE                     ; scan empty space before committing to memmove
0575   04DE                     ;k = 4 
0576   04DE BE                  cmp m \ jnz insx34 \ dcx h     ; -> 347784 ( -304)
0576   04DF C2 EF 04    
0576   04E2 2B          
0577   04E3 BE                  cmp m \ jnz insx33 \ dcx h
0577   04E4 C2 F4 04    
0577   04E7 2B          
0578   04E8             ;        cmp m \ jnz insx32
0579   04E8             ;               mov m,b
0580   04E8 BE                  cmp m\ jz after_setbounds_
0580   04E9 CA 48 05    
0581   04EC C3 F9 04            jmp insx32
0582   04EF                     
0583   04EF 7E          insx34: mov a,m \ inx h \ mov m,a \ dcx h \ dcx h ; k = 4, d[k+1] = d[k], k = 3
0583   04F0 23          
0583   04F1 77          
0583   04F2 2B          
0583   04F3 2B          
0584   04F4 7E          insx33: mov a,m \ inx h \ mov m,a \ dcx h \ dcx h ; k = 3, d[k+1] = d[k], k = 2
0584   04F5 23          
0584   04F6 77          
0584   04F7 2B          
0584   04F8 2B          
0585   04F9 7E          insx32: mov a,m \ mov m,b\ inx h \ mov m,a ; k = 2, d[k+1] = d[k], k = 1
0585   04FA 70          
0585   04FB 23          
0585   04FC 77          
0586   04FD C3 49 05            jmp after_setbounds
0587   0500                     
0588   0500             sbins_k2:        
0589   0500 23                  inx h
0590   0501 BE                  cmp m
0591   0502 D2 17 05            jnc sbins_k3     ; if x >= bounds[k] -> next k
0592   0505 46                  mov b,m
0593   0506 77                  mov m,a
0594   0507 04                  inr b
0595   0508 CA 49 05            jz after_setbounds                       ; if 255 == bounds[k] bounds[k] = x, return
0596   050B                     ; else insert
0597   050B 05                  dcr b
0598   050C                     ;k = 2
0599   050C 23                  inx h                 ; k = 2, d[k+1] = d[k], k = 3
0600   050D 7E                  mov a,m \ mov m,b\ inx h                 ; k = 3, d[k+1] = d[k], k = 4
0600   050E 70          
0600   050F 23          
0601   0510 46                  mov b,m \ mov m,a\ inx h \ mov m,b                 ; k = 4, d[k+1] = d[k], k = 5
0601   0511 77          
0601   0512 23          
0601   0513 70          
0602   0514 C3 49 05            jmp after_setbounds
0603   0517                     
0604   0517             sbins_k3:        
0605   0517 23                  inx h
0606   0518 BE                  cmp m
0607   0519 D2 2B 05            jnc sbins_k4     ; if x >= bounds[k] -> next k
0608   051C 46                  mov b,m
0609   051D 77                  mov m,a
0610   051E 04                  inr b
0611   051F CA 49 05            jz after_setbounds                       ; if 255 == bounds[k] bounds[k] = x, return
0612   0522                     ; else insert
0613   0522 05                  dcr b
0614   0523                     ;k = 3
0615   0523 23                  inx h                 ; k = 3, d[k+1] = d[k], k = 4
0616   0524 7E                  mov a,m \ mov m,b\ inx h \ mov m,a                 ; k = 4, d[k+1] = d[k], k = 5
0616   0525 70          
0616   0526 23          
0616   0527 77          
0617   0528 C3 49 05            jmp after_setbounds
0618   052B                     
0619   052B             
0620   052B             sbins_k4:
0621   052B 23                  inx h
0622   052C BE                  cmp m
0623   052D D2 3C 05            jnc sbins_k5     ; if x >= bounds[k] -> next k
0624   0530 46                  mov b,m
0625   0531 77                  mov m,a
0626   0532 04                  inr b
0627   0533 CA 49 05            jz after_setbounds                       ; if 255 == bounds[k] bounds[k] = x, return
0628   0536                     ; else insert
0629   0536 05                  dcr b
0630   0537                     ;k = 4 
0631   0537 23                  inx h \ mov m,b                 ; k = 4, d[k+1] = d[k], k = 5
0631   0538 70          
0632   0539 C3 49 05            jmp after_setbounds
0633   053C             
0634   053C             sbins_k5:
0635   053C 23                  inx h
0636   053D BE                  cmp m
0637   053E D2 49 05            jnc after_setbounds      ; if x >= bounds[k] -> return
0638   0541 46                  mov b,m
0639   0542 04                  inr b
0640   0543 C2 49 05            jnz after_setbounds         ; if 255 == bounds[k] bounds[k] = x, return
0641   0546 77                  mov m, a
0642   0547             
0643   0547 FE                  .db 0FEh                                ;cpi ...
0644   0548             after_setbounds_:
0645   0548 70                  mov m,b
0646   0549             after_setbounds:
0647   0549 21 5D 04            lxi h,line_h
0648   054C 35                  dcr m
0649   054D E1                  pop h
0650   054E             xinc    .equ $+1
0651   054E 01 00 00            lxi b,0
0652   0551 09                  dad b   ; x += xinc
0653   0552             line_nexty:
0654   0552 C2 88 04            jnz line_4
0655   0555 C9                  ret
0656   0556                     
0657   0556                     ; double-buffa
0658   0556                     ; frame & 1 == 0:
0659   0556                     ;    bounds, bounds_b = bounds_1, bounds_2
0660   0556                     ; frame & 1 == 1:
0661   0556                     ;    bounds, bounds_b = bounds_3, bounds_4
0662   0556             next_bounds:
0663   0556                     ; swap a/b
0664   0556 2A ED 0A            lhld bounds
0665   0559 EB                  xchg
0666   055A 2A EF 0A            lhld bounds_b
0667   055D 22 ED 0A            shld bounds
0668   0560 EB                  xchg
0669   0561 22 EF 0A            shld bounds_b
0670   0564             
0671   0564 3A 03 39            lda frame_no
0672   0567 1F                  rar
0673   0568 DA A6 05            jc nb_bbb
0674   056B                     
0675   056B                     ;lxi h, pal_a
0676   056B 2A 15 39            lhld pal_a_ptr
0677   056E 22 36 09            shld setpal_select
0678   0571             
0679   0571 2A ED 0A            lhld bounds
0680   0574 22 F1 0A            shld bounds1
0681   0577 2A EF 0A            lhld bounds_b
0682   057A 22 F3 0A            shld bounds1_b
0683   057D 2A F5 0A            lhld bounds2
0684   0580 22 ED 0A            shld bounds
0685   0583 2A F7 0A            lhld bounds2_b
0686   0586 22 EF 0A            shld bounds_b
0687   0589                     
0688   0589 3E C0               mvi a, BUTTPLANE_A
0689   058B 32 C3 03            sta setpixel_bp
0690   058E 3E 78               mvi a, PixTabA >> 8
0691   0590 32 B3 07            sta hline_pixtab_plus_0
0692   0593 32 1F 08            sta hwipe_pixtab_plus_0
0693   0596 C6 02               adi 2
0694   0598 32 B0 07            sta hline_pixtab_plus_2
0695   059B 32 1C 08            sta hwipe_pixtab_plus_2
0696   059E 3C                  inr a
0697   059F 32 BA 07            sta hline_pixtab_plus_3
0698   05A2 32 BA 07            sta hline_pixtab_plus_3
0699   05A5             
0700   05A5 C9                  ret
0701   05A6                     
0702   05A6             nb_bbb:
0703   05A6 2A ED 0A            lhld bounds
0704   05A9 22 F5 0A            shld bounds2
0705   05AC 2A EF 0A            lhld bounds_b
0706   05AF 22 F7 0A            shld bounds2_b
0707   05B2 2A F1 0A            lhld bounds1
0708   05B5 22 ED 0A            shld bounds
0709   05B8 2A F3 0A            lhld bounds1_b
0710   05BB 22 EF 0A            shld bounds_b
0711   05BE                     
0712   05BE                     ;lxi h, pal_b
0713   05BE 2A 17 39            lhld pal_b_ptr
0714   05C1 22 36 09            shld setpal_select
0715   05C4             
0716   05C4 3E E0               mvi a, BUTTPLANE_B
0717   05C6 32 C3 03            sta setpixel_bp
0718   05C9 3E 7C               mvi a, PixTabB >> 8
0719   05CB 32 B3 07            sta hline_pixtab_plus_0
0720   05CE 32 1F 08            sta hwipe_pixtab_plus_0
0721   05D1 C6 02               adi 2
0722   05D3 32 B0 07            sta hline_pixtab_plus_2
0723   05D6 32 1C 08            sta hwipe_pixtab_plus_2
0724   05D9 3C                  inr a
0725   05DA 32 BA 07            sta hline_pixtab_plus_3
0726   05DD 32 BA 07            sta hline_pixtab_plus_3
0727   05E0             
0728   05E0 C9                  ret     ; bounds are cleared on read
0729   05E1                     
0730   05E1                     ; quick wipe array in hl backwards c * 32 bytes
0731   05E1             clear_array_backwards:
0732   05E1 EB                  xchg
0733   05E2                     
0734   05E2 21 00 00            lxi h, 0
0735   05E5 39                  dad sp
0736   05E6 22 1A 06            shld clrbounds_sp
0737   05E9             ;        di
0738   05E9 EB                  xchg
0739   05EA F9                  sphl    ; sp = bounds_b + $600
0740   05EB 3D                  dcr a
0741   05EC CA 03 06            jz clrbounds_final
0742   05EF             clrbounds_pushkin:        
0743   05EF C5                  push b \ push b \ push b \ push b       ; 32 bytes
0743   05F0 C5          
0743   05F1 C5          
0743   05F2 C5          
0744   05F3 C5                  push b \ push b \ push b \ push b
0744   05F4 C5          
0744   05F5 C5          
0744   05F6 C5          
0745   05F7 C5                  push b \ push b \ push b \ push b
0745   05F8 C5          
0745   05F9 C5          
0745   05FA C5          
0746   05FB C5                  push b \ push b \ push b \ push b
0746   05FC C5          
0746   05FD C5          
0746   05FE C5          
0747   05FF 3D                  dcr a
0748   0600 C2 EF 05            jnz clrbounds_pushkin
0749   0603             clrbounds_final:
0750   0603 C5                  push b \ push b \ push b \ push b       ; 30+2 bytes
0750   0604 C5          
0750   0605 C5          
0750   0606 C5          
0751   0607 C5                  push b \ push b \ push b \ push b
0751   0608 C5          
0751   0609 C5          
0751   060A C5          
0752   060B C5                  push b \ push b \ push b \ push b
0752   060C C5          
0752   060D C5          
0752   060E C5          
0753   060F C5                  push b \ push b \ push b
0753   0610 C5          
0753   0611 C5          
0754   0612 21 FF FF            lxi h,-1
0755   0615 39                  dad sp
0756   0616 70                  mov m,b
0757   0617 2B                  dcx h
0758   0618 71                  mov m,c
0759   0619             clrbounds_sp    .equ $+1
0760   0619 31 00 00            lxi sp, 0
0761   061C             ;        ei
0762   061C C9                  ret
0763   061D                     
0764   061D             oneframe:
0765   061D CD 56 05            call next_bounds
0766   0620 3A 02 39            lda frametime
0767   0623 AF                  xra a
0768   0624 32 02 39            sta frametime
0769   0627                     
0770   0627 CD 3A 06            call transform_geometry
0771   062A CD 15 07            call draw_geometry
0772   062D CD 4F 07            call fill_bounds
0773   0630 21 03 39            lxi h, frame_no
0774   0633 34                  inr m
0775   0634 7E                  mov a, m
0776   0635 32 04 39            sta anim_pos
0777   0638             
0778   0638                     ;for benchmark
0779   0638 C0                  rnz 
0780   0639             
0781   0639 C9                  ret
0782   063A                             
0783   063A             transform_geometry:
0784   063A                     ; in the future, the geometry will be transformed
0785   063A                     ; 12.05.2025 the future is now
0786   063A 3A 04 39            lda anim_pos; frame_no
0787   063D 32 FB 28            sta rotx
0788   0640 47                  mov b, a
0789   0641 87                  add a
0790   0642 32 FC 28            sta roty
0791   0645 80                  add b
0792   0646 32 FD 28            sta rotz
0793   0649 CD 3D 28            call rotmatrix
0794   064C CD 34 27            call calc_projection
0795   064F                     ; prepare data for draw_geometry: 
0796   064F                     ;   4, xy1 xy2 xy3 xy4 xy1 [5]
0797   064F                     ;   8, xy1...xy8 xy1 [9]
0798   064F                     ;   8, xy1...xy8 xy1 [9]
0799   064F                     ;   0
0800   064F 11 13 28            lxi d, points_proj      ; raw array of x,y
0801   0652 21 01 27            lxi h, ngon1            ; formatted ngon data for draw_geometry
0802   0655 36 04               mvi m, 4 \ inx h
0802   0657 23          
0803   0658 1A                    ldax d \ mov c, a \ inx d \ mov m, a \ inx h
0803   0659 4F          
0803   065A 13          
0803   065B 77          
0803   065C 23          
0804   065D 1A                    ldax d \ mov b, a \ inx d \ mov m, a \ inx h
0804   065E 47          
0804   065F 13          
0804   0660 77          
0804   0661 23          
0805   0662 1A                    ldax d \ inx d \ mov m, a \ inx h
0805   0663 13          
0805   0664 77          
0805   0665 23          
0806   0666 1A                    ldax d \ inx d \ mov m, a \ inx h
0806   0667 13          
0806   0668 77          
0806   0669 23          
0807   066A 1A                    ldax d \ inx d \ mov m, a \ inx h
0807   066B 13          
0807   066C 77          
0807   066D 23          
0808   066E 1A                    ldax d \ inx d \ mov m, a \ inx h
0808   066F 13          
0808   0670 77          
0808   0671 23          
0809   0672 1A                    ldax d \ inx d \ mov m, a \ inx h
0809   0673 13          
0809   0674 77          
0809   0675 23          
0810   0676 1A                    ldax d \ inx d \ mov m, a \ inx h
0810   0677 13          
0810   0678 77          
0810   0679 23          
0811   067A 71                    mov m, c \ inx h \ mov m, b \ inx h
0811   067B 23          
0811   067C 70          
0811   067D 23          
0812   067E                       
0813   067E 36 08               mvi m, 8 \ inx h  
0813   0680 23          
0814   0681 1A                    ldax d \ mov c, a \ inx d \ mov m, a \ inx h
0814   0682 4F          
0814   0683 13          
0814   0684 77          
0814   0685 23          
0815   0686 1A                    ldax d \ mov b, a \ inx d \ mov m, a \ inx h
0815   0687 47          
0815   0688 13          
0815   0689 77          
0815   068A 23          
0816   068B 1A                    ldax d \ inx d \ mov m, a \ inx h
0816   068C 13          
0816   068D 77          
0816   068E 23          
0817   068F 1A                    ldax d \ inx d \ mov m, a \ inx h
0817   0690 13          
0817   0691 77          
0817   0692 23          
0818   0693 1A                    ldax d \ inx d \ mov m, a \ inx h
0818   0694 13          
0818   0695 77          
0818   0696 23          
0819   0697 1A                    ldax d \ inx d \ mov m, a \ inx h
0819   0698 13          
0819   0699 77          
0819   069A 23          
0820   069B 1A                    ldax d \ inx d \ mov m, a \ inx h
0820   069C 13          
0820   069D 77          
0820   069E 23          
0821   069F 1A                    ldax d \ inx d \ mov m, a \ inx h
0821   06A0 13          
0821   06A1 77          
0821   06A2 23          
0822   06A3 1A                    ldax d \ inx d \ mov m, a \ inx h
0822   06A4 13          
0822   06A5 77          
0822   06A6 23          
0823   06A7 1A                    ldax d \ inx d \ mov m, a \ inx h
0823   06A8 13          
0823   06A9 77          
0823   06AA 23          
0824   06AB 1A                    ldax d \ inx d \ mov m, a \ inx h
0824   06AC 13          
0824   06AD 77          
0824   06AE 23          
0825   06AF 1A                    ldax d \ inx d \ mov m, a \ inx h
0825   06B0 13          
0825   06B1 77          
0825   06B2 23          
0826   06B3 1A                    ldax d \ inx d \ mov m, a \ inx h
0826   06B4 13          
0826   06B5 77          
0826   06B6 23          
0827   06B7 1A                    ldax d \ inx d \ mov m, a \ inx h
0827   06B8 13          
0827   06B9 77          
0827   06BA 23          
0828   06BB 1A                    ldax d \ inx d \ mov m, a \ inx h
0828   06BC 13          
0828   06BD 77          
0828   06BE 23          
0829   06BF 1A                    ldax d \ inx d \ mov m, a \ inx h
0829   06C0 13          
0829   06C1 77          
0829   06C2 23          
0830   06C3 71                    mov m, c \ inx h \ mov m, b \ inx h
0830   06C4 23          
0830   06C5 70          
0830   06C6 23          
0831   06C7             
0832   06C7 36 08               mvi m, 8 \ inx h  
0832   06C9 23          
0833   06CA 1A                    ldax d \ mov c, a \ inx d \ mov m, a \ inx h
0833   06CB 4F          
0833   06CC 13          
0833   06CD 77          
0833   06CE 23          
0834   06CF 1A                    ldax d \ mov b, a \ inx d \ mov m, a \ inx h
0834   06D0 47          
0834   06D1 13          
0834   06D2 77          
0834   06D3 23          
0835   06D4 1A                    ldax d \ inx d \ mov m, a \ inx h
0835   06D5 13          
0835   06D6 77          
0835   06D7 23          
0836   06D8 1A                    ldax d \ inx d \ mov m, a \ inx h
0836   06D9 13          
0836   06DA 77          
0836   06DB 23          
0837   06DC 1A                    ldax d \ inx d \ mov m, a \ inx h
0837   06DD 13          
0837   06DE 77          
0837   06DF 23          
0838   06E0 1A                    ldax d \ inx d \ mov m, a \ inx h
0838   06E1 13          
0838   06E2 77          
0838   06E3 23          
0839   06E4 1A                    ldax d \ inx d \ mov m, a \ inx h
0839   06E5 13          
0839   06E6 77          
0839   06E7 23          
0840   06E8 1A                    ldax d \ inx d \ mov m, a \ inx h
0840   06E9 13          
0840   06EA 77          
0840   06EB 23          
0841   06EC 1A                    ldax d \ inx d \ mov m, a \ inx h
0841   06ED 13          
0841   06EE 77          
0841   06EF 23          
0842   06F0 1A                    ldax d \ inx d \ mov m, a \ inx h
0842   06F1 13          
0842   06F2 77          
0842   06F3 23          
0843   06F4 1A                    ldax d \ inx d \ mov m, a \ inx h
0843   06F5 13          
0843   06F6 77          
0843   06F7 23          
0844   06F8 1A                    ldax d \ inx d \ mov m, a \ inx h
0844   06F9 13          
0844   06FA 77          
0844   06FB 23          
0845   06FC 1A                    ldax d \ inx d \ mov m, a \ inx h
0845   06FD 13          
0845   06FE 77          
0845   06FF 23          
0846   0700 1A                    ldax d \ inx d \ mov m, a \ inx h
0846   0701 13          
0846   0702 77          
0846   0703 23          
0847   0704 1A                    ldax d \ inx d \ mov m, a \ inx h
0847   0705 13          
0847   0706 77          
0847   0707 23          
0848   0708 1A                    ldax d \ inx d \ mov m, a \ inx h
0848   0709 13          
0848   070A 77          
0848   070B 23          
0849   070C 71                    mov m, c \ inx h \ mov m, b \ inx h
0849   070D 23          
0849   070E 70          
0849   070F 23          
0850   0710 36 00               mvi m, 0
0851   0712 C9                  ret
0852   0713                             
0853   0713                             
0854   0713 01 27       geometry_ptr:      .dw ngon_start
0855   0715             
0856   0715             draw_geometry:
0857   0715                     ; contour 1
0858   0715 2A 13 07            lhld geometry_ptr
0859   0718                     
0860   0718                     ; check if geometry available and die
0861   0718 7E                  mov a, m
0862   0719 B7                  ora a
0863   071A C2 23 07            jnz dg_next_ngon
0864   071D                     
0865   071D 21 01 27            lxi h, ngon_start
0866   0720 22 13 07            shld geometry_ptr
0867   0723             
0868   0723             dg_next_ngon:
0869   0723 7E                  mov a, m        ; line count
0870   0724 B7                  ora a
0871   0725 23                  inx h
0872   0726 C2 2D 07            jnz dg_line
0873   0729 22 13 07            shld geometry_ptr
0874   072C C9                  ret
0875   072D                     
0876   072D                     
0877   072D             dg_line:        
0878   072D 56                  mov d, m \ inx h \ mov e, m \ inx h
0878   072E 23          
0878   072F 5E          
0878   0730 23          
0879   0731 EB                  xchg
0880   0732 22 18 04            shld y1x1
0881   0735 EB                  xchg
0882   0736 56                  mov d, m \ inx h \ mov e, m \ inx h
0882   0737 23          
0882   0738 5E          
0882   0739 23          
0883   073A EB                  xchg
0884   073B 22 1A 04            shld y2x2
0885   073E EB                  xchg
0886   073F                     
0887   073F F5                  push psw
0888   0740 E5                  push h
0889   0741 CD 1C 04            call line
0890   0744 E1                  pop h
0891   0745 F1                  pop psw
0892   0746                     
0893   0746 3D                  dcr a
0894   0747 CA 23 07            jz dg_next_ngon
0895   074A 2B                  dcx h \ dcx h
0895   074B 2B          
0896   074C C3 2D 07            jmp dg_line
0897   074F                     ;;
0898   074F             
0899   074F             ;         ; loop continue without push/pop
0900   074F             ; fb_bounds_loop_cont:
0901   074F             ;         lxi b, NBOUNDS
0902   074F             ;         dad b
0903   074F             ;         xchg
0904   074F             ;         dad b
0905   074F             ;         xchg
0906   074F             ;         jmp fb_bounds_loop_nexty
0907   074F             
0908   074F             
0909   074F             fill_bounds:
0910   074F 2A EF 0A            lhld bounds_b
0911   0752 EB                  xchg
0912   0753 2A ED 0A            lhld bounds     ; hl = &bounds[0]       -- draw
0913   0756                                     ; de = &bounds_b[0]     -- wipe (normalized and sorted on previous step)
0914   0756                     
0915   0756 3E FF               mvi a, 255      ; current line, y
0916   0758 32 72 08            sta fb_y
0917   075B             fb_lines_loop:
0918   075B                     ; if [hl] == 255 && [de] == 255 continue to the next line
0919   075B 1A                  ldax d
0920   075C A6                  ana m
0921   075D 3C                  inr a
0922   075E CA 6A 08            jz fb_bounds_loop_cont
0923   0761             
0924   0761 E5                  push h
0925   0762 D5                  push d
0926   0763             
0927   0763 AF                  xra a
0928   0764 32 9C 07            sta fb_state
0929   0767 32 71 07            sta fb_next
0930   076A C3 75 07            jmp fb_bounds_loop
0931   076D             
0932   076D                     ; when the state is advanced without draw or wipe
0933   076D             fb_nextstate:
0934   076D             ;        lda fb_state - –ª–∏—à–Ω—è—è –∫–æ–º–∞–Ω–¥–∞
0935   076D 32 FB 07            sta fb_prev
0936   0770             ;        lda fb_next
0937   0770             fb_next .equ $+1
0938   0770 3E 00                       mvi a,0
0939   0772 32 9C 07            sta fb_state    ; 16+8+16=40
0940   0775             
0941   0775                     ;; inner loop that iterates max 6 + 6 bounds
0942   0775             fb_bounds_loop:   
0943   0775                     ; x1 = x2
0944   0775 41                  mov b, c
0945   0776                     
0946   0776 1A                  ldax d          ; a = xb[ib]
0947   0777             ;        cpi 255
0948   0777             ;        jz fb_if_else   ; if xbib == 255...
0949   0777                    
0950   0777                     ; if actr == 0 || x2 < xa[ia]
0951   0777 BE                  cmp m           ; xb - xa
0952   0778 D2 8B 07            jnc fb_if_else
0953   077B 4F                  mov c, a
0954   077C             ;fb_sel_xb:
0955   077C             
0956   077C 3A 71 07            lda fb_next
0957   077F EE 40               xri $40         ; next_b = !state_b
0958   0781 32 71 07            sta fb_next
0959   0784                     
0960   0784                     ;# expermimental wipe on read
0961   0784 3E FF               mvi a, 255
0962   0786 12                  stax d
0963   0787                     ;#
0964   0787                     
0965   0787 13                  inx d           ; ++ib          
0966   0788                             
0967   0788             ;               cmp c
0968   0788             ;        jnz fb_if_done
0969   0788             ;               jmp fb_bounds_loop_break        ;–∑–¥–µ—Å—å –Ω–∏–∫–æ–≥–¥–∞ –Ω–µ —Å—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç, —Ç.–∫. –≤ —ç—Ç—É –≤–µ—Ç–∫—É –Ω–µ –º–æ–∂–µ–º –ø–æ–ø–∞—Å—Ç—å –ø—Ä–∏ xb[ib]=255
0970   0788             
0971   0788 C3 9B 07                    jmp fb_if_done
0972   078B             
0973   078B             fb_if_else:
0974   078B 4E                  mov c, m
0975   078C             ;fb_if_done:
0976   078C                     ; if x2 == 255 break
0977   078C 3E FF               mvi a,255
0978   078E B9                  cmp c
0979   078F CA 68 08            jz fb_bounds_loop_break
0980   0792 23                  inx h
0981   0793 3A 71 07            lda fb_next
0982   0796 EE 80               xri $80         ; next_a = !state_a
0983   0798 32 71 07            sta fb_next
0984   079B                     
0985   079B                     ; if (state_a ^ state_b == 0)
0986   079B                     
0987   079B             fb_if_done:
0988   079B             ;        lda fb_state
0989   079B             fb_state .equ $+1
0990   079B 3E 00               mvi a,0
0991   079D B7                  ora a           ; $00 -> Z=1                    -> continue
0992   079E                                     ; $80 -> Z=0, S=1, P=0          -> A (fill)
0993   079E                                     ; $C0 -> Z=0, S=1, P=1          -> continue
0994   079E                                     ; $40 -> Z=0, S=0, P=0          -> B (wipe)
0995   079E             ;        jz fb_nextstate ; !state_a & !state_b
0996   079E EA 6D 07            jpe fb_nextstate
0997   07A1             ;        jm fb_fillline
0998   07A1             ;        jmp fb_wipeline
0999   07A1 F2 FA 07            jp fb_wipeline
1000   07A4                     
1001   07A4             fb_fillline:        
1002   07A4                     ; this.hfill(x1, x2, y, INK);
1003   07A4                     ; a = y
1004   07A4                     ; b = x1, c = x2
1005   07A4 D5                  push d
1006   07A5 E5                  push h
1007   07A6 3A 72 08            lda fb_y
1008   07A9             
1009   07A9             ;        call hline_xy
1010   07A9                     ;; fast fill horizontal segment
1011   07A9                     ;; a = y
1012   07A9                     ;; b = x1, c = x2
1013   07A9             ;hline_xy:           
1014   07A9 5F                  mov e, a
1015   07AA 68                  mov l,b
1016   07AB                     ; c - b = count
1017   07AB 79                  mov a, c
1018   07AC 90                  sub b
1019   07AD 3C                  inr a
1020   07AE 47                  mov b, a
1021   07AF             hline_pixtab_plus_2 .equ $+1            
1022   07AF 26 7A               mvi h,(PixTabA>>8)+2
1023   07B1 96                  sub m
1024   07B2             hline_pixtab_plus_0 .equ $+1            
1025   07B2 26 78               mvi h,(PixTabA>>8)
1026   07B4 56                  mov d,m                         ;HiAdr
1027   07B5             ;       jnc hline_xy_LeftBlock
1028   07B5 DA DD 07            jc hline_xy_LeftBlock
1029   07B8                             
1030   07B8 47                  mov b,a
1031   07B9             hline_pixtab_plus_3 .equ $+1            
1032   07B9 26 7B               mvi h,(PixTabA>>8)+3
1033   07BB 7E                  mov a,m
1034   07BC EB                  xchg
1035   07BD B6                  ora m
1036   07BE 77                  mov m,a
1037   07BF AF                  xra a
1038   07C0 B0                  ora b
1039   07C1 CA E9 07            jz hline_xy_end
1040   07C4             hline_xy_L3:
1041   07C4 24                  inr h           ; next column
1042   07C5 D6 08               sui 8
1043   07C7 D2 D5 07            jnc hline_xy_L4
1044   07CA C6 10               adi (RightOrMask&255)+8
1045   07CC 5F                  mov e,a
1046   07CD 16 04               mvi d,RightOrMask>>8
1047   07CF 1A                  ldax d
1048   07D0 B6                  ora m
1049   07D1 77                  mov m,a
1050   07D2 C3 E9 07            jmp hline_xy_end
1051   07D5             
1052   07D5             hline_xy_L4:
1053   07D5                     ; fill in chunks
1054   07D5 36 FF               mvi m, 255
1055   07D7 C2 C4 07            jnz hline_xy_L3
1056   07DA C3 E9 07            jmp hline_xy_end
1057   07DD             
1058   07DD             hline_xy_LeftBlock:
1059   07DD 3E 07               mvi a,7
1060   07DF A5                  ana l
1061   07E0 07                  rlc\ rlc\ rlc
1061   07E1 07          
1061   07E2 07          
1062   07E3 B0                  ora b
1063   07E4 6F                  mov l,a
1064   07E5 24                  inr h                           ;to LeftMask
1065   07E6 1A                  ldax d
1066   07E7 B6                  ora m
1067   07E8 12                  stax d
1068   07E9             
1069   07E9             hline_xy_end:
1070   07E9                     ; [prev, state] = [state, next]
1071   07E9             ;        lhld fb_state   
1072   07E9             ;        shld fb_prev    ; 20+20 = 40 (+28 = 68, but!)
1073   07E9 3A 9C 07            lda fb_state
1074   07EC 32 FB 07            sta fb_prev
1075   07EF 3A 71 07            lda fb_next
1076   07F2 32 9C 07            sta fb_state
1077   07F5             
1078   07F5 E1                  pop h
1079   07F6 D1                  pop d
1080   07F7 C3 75 07            jmp fb_bounds_loop
1081   07FA             fb_wipeline:  
1082   07FA                     ; ; if (prev_a == 1) ++x1
1083   07FA             ;        lda fb_prev
1084   07FA             ;        ora a
1085   07FA             fb_prev .equ $+1
1086   07FA F6 00               ori 0           ;—Å—é–¥–∞ –ø—Ä–∏—Ö–æ–¥–∏–º —Å A7=0, –æ—Å—Ç–∞–ª—å–Ω—ã–µ –±–∏—Ç—ã –Ω–µ –≤—ã–∂–Ω—ã
1087   07FC FA 0C 08            jm fb_3
1088   07FF                     ; else if (next_a == 1) --x2
1089   07FF 3A 71 07            lda fb_next
1090   0802 B7                  ora a
1091   0803 F2 0D 08            jp fb_5_
1092   0806 3E FF               mvi a,-1
1093   0808 81                  add c
1094   0809 C3 0E 08            jmp fb_5
1095   080C             fb_3:
1096   080C 04                  inr b
1097   080D             fb_5_:
1098   080D 79                  mov a,c
1099   080E             fb_5:
1100   080E                     ; c - b = count
1101   080E 90                  sub b
1102   080F DA 59 08            jc fb_4
1103   0812             
1104   0812 E5                  push h
1105   0813 D5                  push d
1106   0814 58                  mov e,b
1107   0815 3C                  inr a
1108   0816 47                  mov b, a
1109   0817             
1110   0817 2A 72 08            lhld fb_y
1111   081A EB                  xchg
1112   081B             
1113   081B             ;        call hwipe_xy
1114   081B                     ;; fast wipe horizontal segment
1115   081B                     ;; e = y
1116   081B                             ;; l= x1
1117   081B                     ;; b = x2-x1+1
1118   081B             ;hwipe_xy:           
1119   081B             hwipe_pixtab_plus_2 .equ $+1
1120   081B 26 7A               mvi h,(PixTabA>>8)+2
1121   081D 96                  sub m
1122   081E             hwipe_pixtab_plus_0 .equ $+1            
1123   081E 26 78               mvi h,(PixTabA>>8)
1124   0820 56                  mov d,m                         ;HiAdr
1125   0821 DA 4A 08            jc hwipe_xy_LeftBlock
1126   0824                             
1127   0824 47                  mov b,a
1128   0825             hwipe_pixtab_plus_3 .equ $+1            
1129   0825 26 7B               mvi h,(PixTabA>>8)+3
1130   0827 7E                  mov a,m
1131   0828 EB                  xchg
1132   0829 2F                  cma
1133   082A A6                  ana m
1134   082B 77                  mov m,a
1135   082C AF                  xra a
1136   082D B0                  ora b
1137   082E CA 57 08            jz hwipe_xy_end
1138   0831             hwipe_xy_L3:
1139   0831 24                  inr h           ; next column
1140   0832 D6 08               sui 8
1141   0834 D2 42 08            jnc hwipe_xy_L4
1142   0837 C6 18               adi (RightAndMask&255)+8
1143   0839 5F                  mov e,a
1144   083A 16 04               mvi d,RightAndMask>>8
1145   083C 1A                  ldax d
1146   083D A6                  ana m
1147   083E 77                  mov m,a
1148   083F C3 57 08            jmp hwipe_xy_end
1149   0842             
1150   0842             hwipe_xy_L4:
1151   0842                     ; do in chunks
1152   0842 36 00               mvi m, 0
1153   0844 C2 31 08            jnz hwipe_xy_L3
1154   0847 C3 57 08            jmp hwipe_xy_end
1155   084A             
1156   084A             hwipe_xy_LeftBlock:             
1157   084A 3E 07               mvi a,7
1158   084C A5                  ana l
1159   084D 07                  rlc\ rlc\ rlc
1159   084E 07          
1159   084F 07          
1160   0850 B0                  ora b
1161   0851 6F                  mov l,a
1162   0852 24                  inr h                           ;to LeftMask
1163   0853 1A                  ldax d
1164   0854 B6                  ora m
1165   0855 AE                  xra m
1166   0856 12                  stax d
1167   0857             
1168   0857             hwipe_xy_end:
1169   0857 D1                  pop d
1170   0858 E1                  pop h
1171   0859             fb_4:        
1172   0859                     ; [prev, state] = [state, next]
1173   0859             ;        lhld fb_state   
1174   0859             ;        shld fb_prev    ; 20+20 = 40 (+28 = 68, but!)
1175   0859 3A 9C 07            lda fb_state
1176   085C 32 FB 07            sta fb_prev
1177   085F 3A 71 07            lda fb_next
1178   0862 32 9C 07            sta fb_state
1179   0865                     
1180   0865 C3 75 07            jmp fb_bounds_loop
1181   0868             
1182   0868             fb_bounds_loop_break:        
1183   0868                     ; next line..
1184   0868                     ; ...
1185   0868                     ; bounds += 6, bounds_b += 6
1186   0868 D1                  pop d
1187   0869 E1                  pop h
1188   086A                     ; loop continue without push/pop
1189   086A             fb_bounds_loop_cont:
1190   086A 01 07 00            lxi b, NBOUNDS
1191   086D 09                  dad b
1192   086E EB                  xchg
1193   086F 09                  dad b
1194   0870 EB                  xchg
1195   0871             fb_bounds_loop_nexty:        
1196   0871             ;        lda fb_y
1197   0871             fb_y    .equ $+1
1198   0871 3E 00               mvi a,0
1199   0873 3D                  dcr a
1200   0874             
1201   0874                     ; lfsr for line shuffling, but we need to update bounds/bounds_b by the same law, too much effort
1202   0874                     ;         ral
1203   0874                     ;         jnc lfsr_nofeedback
1204   0874                     ;         xri $1d
1205   0874                     ; lfsr_nofeedback:        
1206   0874                     ;         cpi 1
1207   0874                     
1208   0874 32 72 08            sta fb_y
1209   0877 C2 5B 07            jnz fb_lines_loop
1210   087A C9                  ret
1211   087B             ;         ; loop continue without push/pop
1212   087B             ; fb_bounds_loop_cont:
1213   087B             ;         lxi b, NBOUNDS
1214   087B             ;         dad b
1215   087B             ;         xchg
1216   087B             ;         dad b
1217   087B             ;         xchg
1218   087B             ;         jmp fb_bounds_loop_nexty
1219   087B             
1220   087B             
1221   087B             ;–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –¥–æ–ø—É—Å—Ç–∏–º–æ–µ –¥–µ–ª–∏–º–æ–µ AHL=FEFFFF
1222   087B             ;HL=AHL/C
1223   087B             ;A=AHL%C
1224   087B             ;16=24/8
1225   087B             udiv16248:
1226   087B 29                  dad h\ adc a\ jc $+7\ cmp c\ jc $+5 \ sub c\ inr l
1226   087C 8F          
1226   087D DA 84 08    
1226   0880 B9          
1226   0881 DA 86 08    
1226   0884 91          
1226   0885 2C          
1227   0886 29                  dad h\ adc a\ jc $+7\ cmp c\ jc $+5 \ sub c\ inr l
1227   0887 8F          
1227   0888 DA 8F 08    
1227   088B B9          
1227   088C DA 91 08    
1227   088F 91          
1227   0890 2C          
1228   0891 29                  dad h\ adc a\ jc $+7\ cmp c\ jc $+5 \ sub c\ inr l
1228   0892 8F          
1228   0893 DA 9A 08    
1228   0896 B9          
1228   0897 DA 9C 08    
1228   089A 91          
1228   089B 2C          
1229   089C 29                  dad h\ adc a\ jc $+7\ cmp c\ jc $+5 \ sub c\ inr l
1229   089D 8F          
1229   089E DA A5 08    
1229   08A1 B9          
1229   08A2 DA A7 08    
1229   08A5 91          
1229   08A6 2C          
1230   08A7             
1231   08A7 29                  dad h\ adc a\ jc $+7\ cmp c\ jc $+5 \ sub c\ inr l
1231   08A8 8F          
1231   08A9 DA B0 08    
1231   08AC B9          
1231   08AD DA B2 08    
1231   08B0 91          
1231   08B1 2C          
1232   08B2 29                  dad h\ adc a\ jc $+7\ cmp c\ jc $+5 \ sub c\ inr l
1232   08B3 8F          
1232   08B4 DA BB 08    
1232   08B7 B9          
1232   08B8 DA BD 08    
1232   08BB 91          
1232   08BC 2C          
1233   08BD 29                  dad h\ adc a\ jc $+7\ cmp c\ jc $+5 \ sub c\ inr l
1233   08BE 8F          
1233   08BF DA C6 08    
1233   08C2 B9          
1233   08C3 DA C8 08    
1233   08C6 91          
1233   08C7 2C          
1234   08C8 29                  dad h\ adc a\ jc $+7\ cmp c\ jc $+5 \ sub c\ inr l
1234   08C9 8F          
1234   08CA DA D1 08    
1234   08CD B9          
1234   08CE DA D3 08    
1234   08D1 91          
1234   08D2 2C          
1235   08D3             
1236   08D3 29                  dad h\ adc a\ jc $+7\ cmp c\ jc $+5 \ sub c\ inr l
1236   08D4 8F          
1236   08D5 DA DC 08    
1236   08D8 B9          
1236   08D9 DA DE 08    
1236   08DC 91          
1236   08DD 2C          
1237   08DE 29                  dad h\ adc a\ jc $+7\ cmp c\ jc $+5 \ sub c\ inr l
1237   08DF 8F          
1237   08E0 DA E7 08    
1237   08E3 B9          
1237   08E4 DA E9 08    
1237   08E7 91          
1237   08E8 2C          
1238   08E9 29                  dad h\ adc a\ jc $+7\ cmp c\ jc $+5 \ sub c\ inr l
1238   08EA 8F          
1238   08EB DA F2 08    
1238   08EE B9          
1238   08EF DA F4 08    
1238   08F2 91          
1238   08F3 2C          
1239   08F4 29                  dad h\ adc a\ jc $+7\ cmp c\ jc $+5 \ sub c\ inr l
1239   08F5 8F          
1239   08F6 DA FD 08    
1239   08F9 B9          
1239   08FA DA FF 08    
1239   08FD 91          
1239   08FE 2C          
1240   08FF             
1241   08FF 29                  dad h\ adc a\ jc $+7\ cmp c\ jc $+5 \ sub c\ inr l
1241   0900 8F          
1241   0901 DA 08 09    
1241   0904 B9          
1241   0905 DA 0A 09    
1241   0908 91          
1241   0909 2C          
1242   090A 29                  dad h\ adc a\ jc $+7\ cmp c\ jc $+5 \ sub c\ inr l
1242   090B 8F          
1242   090C DA 13 09    
1242   090F B9          
1242   0910 DA 15 09    
1242   0913 91          
1242   0914 2C          
1243   0915 29                  dad h\ adc a\ jc $+7\ cmp c\ jc $+5 \ sub c\ inr l
1243   0916 8F          
1243   0917 DA 1E 09    
1243   091A B9          
1243   091B DA 20 09    
1243   091E 91          
1243   091F 2C          
1244   0920 29                  dad h\ adc a\ jc $+5\ cmp c\ rc\ sub c\ inr l
1244   0921 8F          
1244   0922 DA 27 09    
1244   0925 B9          
1244   0926 D8          
1244   0927 91          
1244   0928 2C          
1245   0929 C9                  ret
1246   092A                   
1247   092A                 ; –ü—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–∞–ª–∏—Ç—Ä—ã
1248   092A             set_palette_pp:
1249   092A 3E 88               mvi a, $88
1250   092C D3 00               out 0
1251   092E 3E FF               mvi a, 255
1252   0930 D3 03               out 3
1253   0932 01 00 00            lxi b, 0
1254   0935             setpal_select .equ $+1          
1255   0935 11 5F 09            lxi d, pal_b
1256   0938             _setpal_pp_1:
1257   0938 79                  mov a, c
1258   0939 D3 02               out 2
1259   093B 1A                  ldax d
1260   093C D3 0C               out $c
1261   093E E3                  xthl
1262   093F D3 0C               out $c
1263   0941 E3                  xthl
1264   0942 13                  inx d
1265   0943 0C                  inr c
1266   0944 00                  nop \ nop
1266   0945 00          
1267   0946 D3 0C               out $c
1268   0948             setpal_top .equ $+1             ; set to 3 to only program first 3 colors
1269   0948 3E 10               mvi a,$10
1270   094A B9                  cmp c
1271   094B C2 38 09            jnz _setpal_pp_1
1272   094E C9                  ret
1273   094F             
1274   094F             ; light floppy theme
1275   094F             
1276   094F             ;CLRA    .equ 243q
1277   094F             ;CLRB    .equ 243q
1278   094F             ;BLKC    .equ 121q
1279   094F             ;WHTC    .equ 377q    
1280   094F             ;
1281   094F             ;pal_a: ; $e0  
1282   094F             ;    ;    0    1    2    3    4    5    6    7    8    9    a    b    c    d    e    f
1283   094F             ;    .db  BLKC,CLRA,BLKC,CLRA,WHTC,WHTC,WHTC,WHTC,000q,000q,000q,000q,000q,000q,000q,BLKC
1284   094F             ;pal_b: ; $c0    
1285   094F             ;    .db  BLKC,BLKC,CLRB,CLRB,WHTC,WHTC,WHTC,WHTC,000q,000q,000q,000q,000q,000q,000q,BLKC
1286   094F             
1287   094F             ; goth floppy theme
1288   094F             
1289   094F             CLRA    .equ 000q
1290   094F             CLRB    .equ 000q
1291   094F             
1292   094F             BLKC    .equ 232q
1293   094F             WHTC    .equ 377q    
1294   094F             XXXC    .equ 110q
1295   094F             
1296   094F             ; atari green
1297   094F             ATRG    .equ 161q
1298   094F             
1299   094F             ;;;; semi-transparent
1300   094F             ;WHTCt    .equ 377q-011q
1301   094F             ;
1302   094F             ;pal_a: ; $e0  
1303   094F             ;    ;    0    1    2    3    4    5    6    7    8    9    a    b    c    d    e    f
1304   094F             ;    .db  BLKC,CLRA,BLKC,CLRA,WHTC,WHTCt,WHTC,WHTCt,XXXC,XXXC,XXXC,XXXC,XXXC,XXXC,XXXC,BLKC
1305   094F             ;pal_b: ; $c0    
1306   094F             ;    .db  BLKC,BLKC,CLRB,CLRB,WHTC,WHTC,WHTCt,WHTCt,XXXC,XXXC,XXXC,XXXC,XXXC,XXXC,XXXC,BLKC
1307   094F             ;;;;
1308   094F             
1309   094F             ; main palette (goal)
1310   094F             pal_a: ; $e0  
1311   094F                 ;    0    1    2    3    4    5    6    7    8    9    a    b    c    d    e    f
1312   094F 9A 00 9A 00     .db  BLKC,CLRA,BLKC,CLRA,WHTC,WHTC,WHTC,WHTC,XXXC,XXXC,XXXC,XXXC,XXXC,XXXC,XXXC,BLKC
1312   0953 FF FF FF FF 
1312   0957 48 48 48 48 
1312   095B 48 48 48 9A 
1313   095F             pal_b: ; $c0    
1314   095F 9A 9A 00 00     .db  BLKC,BLKC,CLRB,CLRB,WHTC,WHTC,WHTC,WHTC,XXXC,XXXC,XXXC,XXXC,XXXC,XXXC,XXXC,BLKC
1314   0963 FF FF FF FF 
1314   0967 48 48 48 48 
1314   096B 48 48 48 9A 
1315   096F             pal_intro: 
1316   096F                 ;    0    1    2    3    4    5    6    7    8    9    a    b    c    d    e    f
1317   096F 00 00 00 00     .db  0,0,0,0,WHTC,WHTC,WHTC,WHTC,0,0,0,0,0,0,0,0
1317   0973 FF FF FF FF 
1317   0977 00 00 00 00 
1317   097B 00 00 00 00 
1318   097F             
1319   097F             ; green palette (goal)
1320   097F             pal_atari_a: ; $e0  
1321   097F                 ;    0    1    2    3    4    5    6    7    8    9    a    b    c    d    e    f
1322   097F 71 00 71 00     .db  ATRG,CLRA,ATRG,CLRA,WHTC,WHTC,WHTC,WHTC,XXXC,XXXC,XXXC,XXXC,XXXC,XXXC,XXXC,ATRG
1322   0983 FF FF FF FF 
1322   0987 48 48 48 48 
1322   098B 48 48 48 71 
1323   098F             pal_atari_b: ; $c0    
1324   098F 71 71 00 00     .db  ATRG,ATRG,CLRB,CLRB,WHTC,WHTC,WHTC,WHTC,XXXC,XXXC,XXXC,XXXC,XXXC,XXXC,XXXC,ATRG
1324   0993 FF FF FF FF 
1324   0997 48 48 48 48 
1324   099B 48 48 48 71 
1325   099F             
1326   099F             do_fade_in:
1327   099F 21 39 39    		lxi h,fade_in_flag
1328   09A2 35          		dcr m
1329   09A3             pal_a_goal .equ $+1
1330   09A3 11 4F 09            lxi d, pal_a        ; goal
1331   09A6 21 19 39            lxi h, pal_fade_a   ; work
1332   09A9             #ifdef XFADE
1333   09A9 CD B6 09            call xfade
1334   09AC~            #else
1335   09AC~              #ifdef FADE_IN
1336   09AC~                    call fade_in
1337   09AC~              #else
1338   09AC~                    call fade_out
1339   09AC~              #endif
1340   09AC             #endif
1341   09AC             pal_b_goal .equ $+1
1342   09AC 11 5F 09            lxi d, pal_b        ; goal
1343   09AF 21 29 39            lxi h, pal_fade_b   ; work
1344   09B2             #ifdef XFADE
1345   09B2 CD B6 09            call xfade
1346   09B5~            #else
1347   09B5~              #ifdef FADE_IN
1348   09B5~                    call fade_in
1349   09B5~              #else
1350   09B5~                    call fade_out
1351   09B5~              #endif
1352   09B5             #endif
1353   09B5 C9                  ret
1354   09B6             
1355   09B6             #ifdef XFADE
1356   09B6             xfade:
1357   09B6 0E 10               mvi c, 16
1358   09B8             xfade_loop:
1359   09B8 1A                  ldax d
1360   09B9             
1361   09B9 C5                  push b
1362   09BA D5                    push d
1363   09BB 57                      mov d, a
1364   09BC 5E                      mov e, m
1365   09BD CD CA 09                call xfade_bgr
1366   09C0 73                      mov m, e
1367   09C1 D1                    pop d
1368   09C2 C1                  pop b
1369   09C3 23                  inx h
1370   09C4 13                  inx d
1371   09C5 0D                  dcr c
1372   09C6 C2 B8 09            jnz xfade_loop
1373   09C9 C9                  ret
1374   09CA             
1375   09CA                     ; fade e towards d
1376   09CA             xfade_bgr:
1377   09CA 3E C0       		mvi a,300q
1378   09CC A2          		ana d
1379   09CD 47                  mov b, a        ; b = goal & 0200
1380   09CE 3E C0       		mvi a,300q
1381   09D0 A3          		ana e			; a = work & 0200
1382   09D1 B8                  cmp b
1383   09D2 CA DE 09            jz xfade_green
1384   09D5 3E 40       		mvi a,100q
1385   09D7 DA DC 09            jc xfade_blue_plus
1386   09DA 3E C0       		mvi a,-100q
1387   09DC             xfade_blue_plus:
1388   09DC 83          		add e
1389   09DD 5F                  mov e, a
1390   09DE                     
1391   09DE             xfade_green:
1392   09DE 3E 38       		mvi a,070q
1393   09E0 A2          		ana d
1394   09E1 47                  mov b, a        ; b = goal & 0030
1395   09E2 3E 38       		mvi a,070q
1396   09E4 A3          		ana e
1397   09E5 B8                  cmp b
1398   09E6 CA F2 09            jz xfade_red
1399   09E9 3E 08       		mvi a,010q
1400   09EB DA F0 09            jc xfade_green_plus
1401   09EE 3E F8       		mvi a,-010q
1402   09F0             xfade_green_plus:
1403   09F0 83                  add e
1404   09F1 5F                  mov e, a
1405   09F2                     
1406   09F2             xfade_red:
1407   09F2 3E 07       		mvi a,7
1408   09F4 A2          		ana d
1409   09F5 47                  mov b, a        ; b = goal & 3
1410   09F6 3E 07       		mvi a,7
1411   09F8 A3          		ana e
1412   09F9 B8                  cmp b
1413   09FA C8                  rz
1414   09FB 1C          		inr e
1415   09FC D8                  rc
1416   09FD 1D          		dcr e
1417   09FE 1D          		dcr e
1418   09FF C9                  ret
1419   0A00             
1420   0A00~            #else
1421   0A00~            
1422   0A00~            #ifdef FADE_IN
1423   0A00~                    ; de=goal, hl=work (start with zeroes)
1424   0A00~                    ; work < goal (start with 000q)
1425   0A00~            fade_in:
1426   0A00~                    mvi c, 16
1427   0A00~            fade_in_loop:
1428   0A00~                    ldax d          ; goal
1429   0A00~                    push d
1430   0A00~            
1431   0A00~                    sub m           ; goal - work (work < goal)
1432   0A00~                    mov d, a
1433   0A00~                    mvi e, 0
1434   0A00~                    ani 007q
1435   0A00~                    jz $+5
1436   0A00~                    mvi e, 001q
1437   0A00~                    mov a, d
1438   0A00~                    ani 070q
1439   0A00~                    jz $+7
1440   0A00~                    mvi a, 010q
1441   0A00~                    ora e
1442   0A00~                    mov e, a
1443   0A00~                    mov a, d
1444   0A00~                    ani 300q
1445   0A00~                    jz $+7
1446   0A00~                    mvi a, 100q
1447   0A00~                    ora e
1448   0A00~                    mov e, a
1449   0A00~                    
1450   0A00~                    mov a, m
1451   0A00~                    add e
1452   0A00~                    mov m, a
1453   0A00~                    pop d
1454   0A00~                    inx h
1455   0A00~                    inx d
1456   0A00~                    dcr c
1457   0A00~                    jnz fade_in_loop
1458   0A00~                    ret
1459   0A00~            #endif
1460   0A00~            #ifdef FADE_OUT
1461   0A00~                    ; de=goal, hl=work (start with 377q)
1462   0A00~                    ; work > goal (start with 377q)
1463   0A00~            fade_out:
1464   0A00~                    mvi c, 16
1465   0A00~                    xchg            ; hl=goal, de=work
1466   0A00~            fade_out_loop:
1467   0A00~                    ldax d          ; work
1468   0A00~                    push d
1469   0A00~                    sub m           ; work - goal
1470   0A00~                    mov d, a
1471   0A00~                    mvi b, 0
1472   0A00~                    ani 300q
1473   0A00~                    jz $+5
1474   0A00~            		mvi b,100q
1475   0A00~            		mvi a,070q
1476   0A00~            		ana d
1477   0A00~                    jz $+7
1478   0A00~                    mvi a, 010q
1479   0A00~                    ora b
1480   0A00~                    mov b, a
1481   0A00~            		mvi a,007q
1482   0A00~            		ana d
1483   0A00~                    jz $+4
1484   0A00~            		inr b
1485   0A00~                    pop d
1486   0A00~            
1487   0A00~                    ldax d
1488   0A00~                    sub b
1489   0A00~                    stax d
1490   0A00~                    inx h
1491   0A00~                    inx d
1492   0A00~                    dcr c
1493   0A00~                    jnz fade_out_loop
1494   0A00~                    ret
1495   0A00~            #endif
1496   0A00~            
1497   0A00             #endif ; XFADE
1498   0A00             
1499   0A00             slowprint:
1500   0A00 2A 3C 39            lhld slow_msg_ptr
1501   0A03 3A 3B 39            lda slow_msg_state
1502   0A06 B7                  ora a                 ; state == 0 :-> print
1503   0A07 CA 1A 0A            jz slop_nextbyte
1504   0A0A 3D                  dcr a
1505   0A0B 32 3B 39            sta slow_msg_state
1506   0A0E                     ;xra a
1507   0A0E                     ;sta slow_msg_state
1508   0A0E B7                  ora a                 ; state was 1 now 0 :-> new line
1509   0A0F C0                  rnz                   ; otherwise just delay
1510   0A10                     ; y, x
1511   0A10 5E                  mov e, m \ inx h
1511   0A11 23          
1512   0A12 56                  mov d, m \ inx h
1512   0A13 23          
1513   0A14 E5                  push h
1514   0A15 EB                  xchg
1515   0A16 CD 9E 3D            call gotoxy
1516   0A19 E1                  pop h
1517   0A1A             slop_nextbyte:
1518   0A1A 7E                  mov a, m
1519   0A1B 22 D2 3D            shld _puts_sptr
1520   0A1E 23                  inx h
1521   0A1F 22 3C 39            shld slow_msg_ptr
1522   0A22 FE FD               cpi 253
1523   0A24 CA 7C 0A            jz delay_line
1524   0A27 FE FE               cpi 254
1525   0A29 CA 49 0A            jz launch_fish
1526   0A2C FE FF               cpi 255
1527   0A2E CA 3D 0A            jz slop_wraparound
1528   0A31 B7                  ora a
1529   0A32 C2 3A 0A            jnz slop_char
1530   0A35                     ; 0, next line in group
1531   0A35 3C                  inr a
1532   0A36 32 3B 39            sta slow_msg_state
1533   0A39 C9                  ret ; next time get the coords
1534   0A3A             slop_char:
1535   0A3A C3 D6 3D            jmp _putchar
1536   0A3D             slop_wraparound:
1537   0A3D 2A 3E 39            lhld slow_msg_loop
1538   0A40 22 3C 39            shld slow_msg_ptr
1539   0A43 3E 01               mvi a, 1
1540   0A45 32 3B 39            sta slow_msg_state
1541   0A48 C9                  ret
1542   0A49             launch_fish:
1543   0A49 3E 01               mvi a, 1
1544   0A4B 32 3B 39            sta slow_msg_state
1545   0A4E 3E 1E               mvi a, $1e      ; fish appears in this column
1546   0A50 32 41 39            sta fish_col
1547   0A53 3E 01               mvi a, 1
1548   0A55 32 40 39            sta fish_col_frac
1549   0A58 32 42 39            sta fish_enabled
1550   0A5B             
1551   0A5B             fade_to_green:
1552   0A5B                     ; xfade into green
1553   0A5B                     ; begin fade in -- make sure these pointers are initialised before oneframe()
1554   0A5B 21 7F 09            lxi h, pal_atari_a
1555   0A5E 22 A4 09            shld pal_a_goal
1556   0A61 21 8F 09            lxi h, pal_atari_b
1557   0A64 22 AD 09            shld pal_b_goal
1558   0A67             fade_start_fade:
1559   0A67 3E 08               mvi a, 8
1560   0A69 32 39 39            sta fade_in_flag    ; enable fade in for 8 frames (see ISR)
1561   0A6C C9                  ret
1562   0A6D             fade_to_blue:               ; jumped from maybe_wipe_fish
1563   0A6D 21 4F 09            lxi h, pal_a
1564   0A70 22 A4 09            shld pal_a_goal
1565   0A73 21 5F 09            lxi h, pal_b
1566   0A76 22 AD 09            shld pal_b_goal
1567   0A79 C3 67 0A            jmp fade_start_fade
1568   0A7C             delay_line:
1569   0A7C 3E 21               mvi a, 33
1570   0A7E 32 3B 39            sta slow_msg_state
1571   0A81 C9                  ret
1572   0A82             
1573   0A82             
1574   0A82             ISRstack:
1575   0A82                     .ds 32
1576   0AA2             ISRstackEnd:
1577   0AA2             ISR:
1578   0AA2 22 E7 0A            shld ISRsetHL+1
1579   0AA5 E1                  pop h
1580   0AA6 22 EB 0A            shld ISRsetRet+1
1581   0AA9 F5                  push psw
1582   0AAA 21 02 00            lxi h,2
1583   0AAD 39                  dad sp
1584   0AAE 22 E4 0A            shld ISRsetSP+1
1585   0AB1 69                  mov l,c
1586   0AB2 60                  mov h,b
1587   0AB3 E3                  xthl
1588   0AB4 31 A2 0A            lxi sp,ISRstackEnd
1589   0AB7 E5                  push h                          ;push psw
1590   0AB8 C5                  push b
1591   0AB9 D5                  push d
1592   0ABA             
1593   0ABA CD 2A 09            call set_palette_pp
1594   0ABD             
1595   0ABD 3A 39 39            lda fade_in_flag
1596   0AC0 B7                  ora a
1597   0AC1 C4 9F 09            cnz do_fade_in
1598   0AC4             
1599   0AC4 3A 42 39            lda fish_enabled
1600   0AC7 B7                  ora a
1601   0AC8 C4 64 47            cnz dumbshift
1602   0ACB             
1603   0ACB             
1604   0ACB 2A 00 39            lhld intcount
1605   0ACE 23                  inx h
1606   0ACF 22 00 39            shld intcount
1607   0AD2                     
1608   0AD2 3A B7 03            lda songe_enabled
1609   0AD5 B7                  ora a
1610   0AD6 C4 03 50            cnz player_tick               ; play songe from the interrupt
1611   0AD9             
1612   0AD9 3A 3A 39            lda slowprint_enabled
1613   0ADC B7                  ora a
1614   0ADD C4 00 0A            cnz slowprint
1615   0AE0             
1616   0AE0 D1                  pop d
1617   0AE1 C1                  pop b
1618   0AE2 F1                  pop psw
1619   0AE3             ISRsetSP:
1620   0AE3 31 00 00            lxi sp,0
1621   0AE6             ISRsetHL:
1622   0AE6 21 00 00            lxi h,0
1623   0AE9 FB                  ei
1624   0AEA             ISRsetRet:
1625   0AEA C3 00 00            jmp 0
1626   0AED                     
1627   0AED                     ; active bounds
1628   0AED 00 0B       bounds:         .dw bounds_0
1629   0AEF 00 12       bounds_b:       .dw bounds_1
1630   0AF1             
1631   0AF1                     ; bounds even
1632   0AF1 00 0B       bounds1:        .dw bounds_0
1633   0AF3 00 12       bounds1_b:      .dw bounds_1
1634   0AF5                     ; bounds odd
1635   0AF5 00 19       bounds2:        .dw bounds_2
1636   0AF7 00 20       bounds2_b:      .dw bounds_3
1637   0AF9             
1638   0AF9                             .ds 2
1639   0AFB             
1640   0AFB                     ; polygon bounds array
1641   0B00                     .org 0100h + $ & 0ff00h  ; ALIGN 256
1642   0B00             bounds_0:
1643   0B00 01                  .db 1
1644   1200                     .org bounds_0 + (NBOUNDS * 256)
1645   1200             bounds_1:
1646   1200 01                  .db 1
1647   1900                     .org bounds_1 + (NBOUNDS * 256)
1648   1900             bounds_2:
1649   1900 01                  .db 1
1650   2000                     .org bounds_2 + (NBOUNDS * 256)
1651   2000             bounds_3:
1652   2000 01                  .db 1
1653   2700                     .org bounds_3 + (NBOUNDS * 256)
1654   2700                     
1655   2700                     
1656   2700             bounds_end:
1657   2700 00                  .db 0
1658   2701             
1659   2701             ngon_start:
1660   2701             
1661   2701             ngon1:
1662   2701                     .ds 48
1663   2731 00 00 00            .db 0, 0, 0
1664   2734             
1665   2734             ;; .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .
1666   2734             ;; -    -      -      -    -     -     -     -- -
1667   2734             ;; -  -    -     -             -  -       -   - -
1668   2734             ;; -------------- - -- maths -- ---- ------------
1669   2734             ;; ---------------- --- --- --- -----------------
1670   2734             ;; ==============================================
1671   2734             ;; ==============================================
1672   2734             ;; ‚â°‚â°‚â°‚â°‚â°‚â°‚â°‚â°‚â°‚â°‚â°‚â°‚â°‚â°‚â°‚â°‚â°‚â°‚â°‚â°‚â°‚â°‚â°‚â°‚â°‚â°‚â°‚â°‚â°‚â°‚â°‚â°‚â°‚â°‚â°‚â°‚â°‚â°‚â°‚â°‚â°‚â°‚â°‚â°‚â°‚â°
1673   2734             calc_projection:
1674   2734 21 E9 27            lxi h, points_xy
1675   2737 11 13 28            lxi d, points_proj
1676   273A             
1677   273A             rot_loop:
1678   273A E5                  push h
1679   273B D5                  push d
1680   273C 46                    mov b, m \ inx h        ; b = x
1680   273D 23          
1681   273E 4E                    mov c, m                ; c = y
1682   273F                       
1683   273F                       ; just use (0,0) as end marker because floppies have holes in the middle
1684   273F 78                    mov a, b
1685   2740 B1                    ora c
1686   2741 CA E3 27              jz rot_loop_end
1687   2744                       
1688   2744 3A 04 29              lda mat_axx
1689   2747 5F                    mov e, a
1690   2748 50                    mov d,b
1691   2749 CD 2A 29              call muls8s8shr7    ; d = a = d * e >> 7
1692   274C 32 E6 27              sta rot_px
1693   274F 3A 05 29              lda mat_axy
1694   2752 57                    mov d, a
1695   2753 59                    mov e,c
1696   2754 CD 2A 29              call muls8s8shr7      ; d = a = d * e >> 7
1697   2757 3A E6 27              lda rot_px
1698   275A 82                    add d
1699   275B 32 E6 27              sta rot_px            ; rot_px = Axx * px + Axy * py        =c5, 
1700   275E                                             ; but here -60 ($c4) * 126 ($7e) =-59 (c4*7e=$c5)
1701   275E                                             ; expected -57, got -56.. meh
1702   275E 3A 07 29              lda mat_ayx
1703   2761 5F                    mov e, a
1704   2762 50                    mov d,b
1705   2763 CD 2A 29              call muls8s8shr7          ; -3
1706   2766 32 E7 27              sta rot_py
1707   2769 3A 08 29              lda mat_ayy
1708   276C 57                    mov d, a
1709   276D 59                    mov e,c
1710   276E CD 2A 29              call muls8s8shr7
1711   2771 3A E7 27              lda rot_py
1712   2774 82                    add d
1713   2775 32 E7 27              sta rot_py          ; rot_py = Ayx * px + Ayy * py
1714   2778                       
1715   2778 3A 0A 29              lda mat_azx
1716   277B 5F                    mov e, a
1717   277C 50                    mov d,b
1718   277D CD 2A 29              call muls8s8shr7    ; =1
1719   2780 32 E8 27              sta rot_pz
1720   2783 3A 0B 29              lda mat_azy
1721   2786 57                    mov d, a
1722   2787 59                    mov e,c
1723   2788 CD 2A 29              call muls8s8shr7
1724   278B 3A E8 27              lda rot_pz
1725   278E 82                    add d
1726   278F 32 E8 27              sta rot_pz            ; rot_pz = Azx * px + Azy * py
1727   2792             
1728   2792 C6 55                 adi 85        ; make sure z > 0
1729   2794 B7                    ora a \ rar \ ora a \ rar     ; (z + 85) >> 2  =$15
1729   2795 1F          
1729   2796 B7          
1729   2797 1F          
1730   2798 57                    mov d, a ; d = z_tmp
1731   2799                       
1732   2799 3A 04 39              lda anim_pos; frame_no
1733   279C 87                    add a
1734   279D CD 21 29              call sincosa ; c = cos(2 * frame_no)
1735   27A0                       ; calc cos / 4 (signed)
1736   27A0 AF                    xra a
1737   27A1 B1                    ora c
1738   27A2 F2 AF 27              jp locm1
1739   27A5 2F                    cma \ inr a
1739   27A6 3C          
1740   27A7 1F                    rar \ ora a \ rar
1740   27A8 B7          
1740   27A9 1F          
1741   27AA 2F                    cma \ inr a
1741   27AB 3C          
1742   27AC C3 B2 27              jmp locm2
1743   27AF                               
1744   27AF             locm1:
1745   27AF 1F                    rar \ ora a \ rar
1745   27B0 B7          
1745   27B1 1F          
1746   27B2             ;          inr c
1747   27B2             ;          dcr c         ;test sign
1748   27B2             ;          jp $+5
1749   27B2             ;          cma \ inr a   ; a = cos(2 * frame) / 4
1750   27B2             locm2:
1751   27B2 C6 1C                 adi 58-30        ; a += 58 - ZINV_MIN       ; =$59
1752   27B4 82                    add d         ; a = full z
1753   27B5                       
1754   27B5 CD 59 2A              call bzinva    ; b = zinv[z - ZINV_MIN] ; =$26
1755   27B8                       ;mov a, b \ ora a \ rar \ mov b, a
1756   27B8                       
1757   27B8                       ; clamp b at 127
1758   27B8                       ;mov a, b
1759   27B8                       ;ora a
1760   27B8                       ;jp $+5
1761   27B8                       ;mvi b, $7f
1762   27B8                       ;mvi b, $b0
1763   27B8                       
1764   27B8                       
1765   27B8             ;         push b
1766   27B8 3A E6 27              lda rot_px
1767   27BB 5F                    mov e, a
1768   27BC 50                    mov d,b
1769   27BD CD EB 28              call muls8u8shr7
1770   27C0 C6 80                 adi $80     ; +128
1771   27C2 32 E6 27              sta rot_px  ; rot_px = x * zinv[z - ZINV_MIN] >> 7
1772   27C5             ;         pop b
1773   27C5 3A E7 27              lda rot_py
1774   27C8 5F                    mov e, a
1775   27C9 50                    mov d,b
1776   27CA CD EB 28              call muls8u8shr7
1777   27CD C6 80                 adi $80     ; +128
1778   27CF 32 E7 27              sta rot_py    ; rot_py = y * zinv[z - ZINV_MIN] >> 7
1779   27D2                       ; kek
1780   27D2                       
1781   27D2 D1                  pop d
1782   27D3 3A E6 27            lda rot_px \ stax d \ inx d
1782   27D6 12          
1782   27D7 13          
1783   27D8 3A E7 27            lda rot_py \ stax d \ inx d
1783   27DB 12          
1783   27DC 13          
1784   27DD E1                  pop h
1785   27DE 23                  inx h \ inx h
1785   27DF 23          
1786   27E0 C3 3A 27            jmp rot_loop
1787   27E3             
1788   27E3             rot_loop_end:
1789   27E3 F1                  pop psw
1790   27E4 F1                  pop psw
1791   27E5 C9                  ret
1792   27E6                     
1793   27E6 00          rot_px:         .db 0
1794   27E7 00          rot_py:         .db 0
1795   27E8 00          rot_pz:         .db 0
1796   27E9                     
1797   27E9 C4 C4 3C C4 points_xy:  .db $c4,$c4, $3c,$c4, $3c,$3c, $c4,$3c, $12,$00,$0d,$0d,$00,$12,$f3,$0d,$ee,$00,$f3,$f3,$00,$ee,$0d,$f3,$06,$35,$03,$3a,$fd,$3a,$fa,$35
1797   27ED 3C 3C C4 3C 
1797   27F1 12 00 0D 0D 
1797   27F5 00 12 F3 0D 
1797   27F9 EE 00 F3 F3 
1797   27FD 00 EE 0D F3 
1797   2801 06 35 03 3A 
1797   2805 FD 3A FA 35 
1798   2809 FA 1D FD 18             .db $fa,$1d,$fd,$18,$03,$18,$06,$1d,
1798   280D 03 18 06 1D 
1799   2811 00 00                   .db 0, 0
1800   2813                         
1801   2813             points_proj: .ds 21*2
1802   283D             
1803   283D             rotmatrix:
1804   283D 3A FD 28            lda rotz
1805   2840 CD 21 29            call sincosa
1806   2843 60                  mov h, b
1807   2844 69                  mov l, c
1808   2845 22 FE 28            shld cos_a
1809   2848 3A FB 28            lda rotx
1810   284B CD 21 29            call sincosa
1811   284E 60                  mov h, b
1812   284F 69                  mov l, c
1813   2850 22 00 29            shld cos_b
1814   2853 3A FC 28            lda roty
1815   2856 CD 21 29            call sincosa
1816   2859 60                  mov h, b
1817   285A 69                  mov l, c
1818   285B 22 02 29            shld cos_c
1819   285E                     
1820   285E                     ; axx = mul(cosa, cosb) >> 7
1821   285E 3A FE 28            lda cos_a
1822   2861 57                  mov d, a
1823   2862 3A 00 29            lda cos_b
1824   2865 5F                  mov e, a
1825   2866 CD 2A 29            call muls8s8shr7
1826   2869 32 04 29            sta mat_axx
1827   286C                     ;        t2   t1                                         t4 t3
1828   286C                     ; axy = (emul(emul(cosa, sinb) >> SHITF, sinc) >> SHITF) - (emul(sina, cosc) >> SHITF);
1829   286C 3A FE 28            lda cos_a
1830   286F 57                  mov d, a
1831   2870 3A 01 29            lda sin_b
1832   2873 5F                  mov e, a
1833   2874 CD 2A 29            call muls8s8shr7        ; a = emul(cosa, sinb) >> SHITF
1834   2877 32 0D 29            sta cosa_x_sinb         ; =2
1835   287A 57                  mov d, a
1836   287B 3A 03 29            lda sin_c
1837   287E 5F                  mov e, a
1838   287F CD 2A 29            call muls8s8shr7        ; a = emul(t1, sinc) >> SHITF  =0
1839   2882 32 05 29            sta mat_axy             ; temporary t2
1840   2885 3A FF 28            lda sin_a
1841   2888 57                  mov d, a
1842   2889 3A 02 29            lda cos_c
1843   288C 5F                  mov e, a
1844   288D CD 2A 29            call muls8s8shr7
1845   2890 2F                  cma
1846   2891 3C                  inr a
1847   2892 47                  mov b, a
1848   2893 3A 05 29            lda mat_axy
1849   2896 80                  add b
1850   2897 32 05 29            sta mat_axy             ; =f8
1851   289A                     
1852   289A                     ; Axz is not used
1853   289A                     ; ;        t1                                                t2
1854   289A                     ; ; axz = (emul(emul(cosa, sinb) >> SHITF, cosc) >> SHITF) - (emul(sina, sinc) >> SHITF);
1855   289A                     ; lda cosa_x_sinb
1856   289A                     ; mov b, a
1857   289A                     ; lda cos_c
1858   289A                     ; mov c, a
1859   289A                     ; call muls8s8shr7
1860   289A                     ; sta mat_axz ; temporary
1861   289A                     
1862   289A                     ; lda sin_a
1863   289A                     ; mov b, a
1864   289A                     ; lda sin_c
1865   289A                     ; mov c, a
1866   289A                     ; call muls8s8shr7
1867   289A                     ; cma
1868   289A                     ; inr a
1869   289A                     ; mov b, a
1870   289A                     ; lda mat_axz
1871   289A                     ; add b
1872   289A                     ; sta mat_axz             ; =01
1873   289A                     
1874   289A                     ; ayx = emul(sina, cosb) >> SHITF;
1875   289A 3A FF 28            lda sin_a
1876   289D 57                  mov d, a
1877   289E 3A 00 29            lda cos_b
1878   28A1 5F                  mov e, a
1879   28A2 CD 2A 29            call muls8s8shr7
1880   28A5 32 07 29            sta mat_ayx             ; =08
1881   28A8                     
1882   28A8                     ; ayy = (emul(emul(sina, sinb) >> SHITF, sinc) >> SHITF) + (emul(cosa, cosc) >> SHITF);
1883   28A8 3A FF 28            lda sin_a
1884   28AB 57                  mov d, a
1885   28AC 3A 01 29            lda sin_b
1886   28AF 5F                  mov e, a
1887   28B0 CD 2A 29            call muls8s8shr7
1888   28B3 32 0E 29            sta sina_x_sinb
1889   28B6 57                  mov d, a
1890   28B7 3A 03 29            lda sin_c
1891   28BA 5F                  mov e, a
1892   28BB CD 2A 29            call muls8s8shr7
1893   28BE 32 08 29            sta mat_ayy ; tmp
1894   28C1 3A FE 28            lda cos_a
1895   28C4 57                  mov d, a
1896   28C5 3A 02 29            lda cos_c
1897   28C8 5F                  mov e, a
1898   28C9 CD 2A 29            call muls8s8shr7
1899   28CC 47                  mov b, a
1900   28CD 3A 08 29            lda mat_ayy
1901   28D0 80                  add b
1902   28D1 32 08 29            sta mat_ayy             ; =7e
1903   28D4                     
1904   28D4                     ; Ayz is not used
1905   28D4                     ; ; ayz = (emul(emul(sina, sinb) >> SHITF, cosc) >> SHITF) - (emul(cosa, sinc) >> SHITF);
1906   28D4                     ; lda sina_x_sinb
1907   28D4                     ; mov b, a
1908   28D4                     ; lda cos_c
1909   28D4                     ; mov c, a
1910   28D4                     ; call muls8s8shr7
1911   28D4                     ; sta mat_ayz     ; tmp
1912   28D4                     
1913   28D4                     ; lda cos_a
1914   28D4                     ; mov b, a
1915   28D4                     ; lda sin_c
1916   28D4                     ; mov c, a
1917   28D4                     ; call muls8s8shr7
1918   28D4                     ; cma
1919   28D4                     ; inr a
1920   28D4                     ; mov b, a
1921   28D4                     ; lda mat_ayz
1922   28D4                     ; add b
1923   28D4                     ; sta mat_ayz             ; =fb
1924   28D4                     
1925   28D4                     ; Azx = -sinb;
1926   28D4 3A 01 29            lda sin_b
1927   28D7 2F                  cma
1928   28D8 3C                  inr a
1929   28D9 32 0A 29            sta mat_azx             ; =fd
1930   28DC                     
1931   28DC                     ; Azy = emul(cosb, sinc) >> SHITF;
1932   28DC 3A 00 29            lda cos_b
1933   28DF 57                  mov d, a
1934   28E0 3A 03 29            lda sin_c
1935   28E3 5F                  mov e, a
1936   28E4 CD 2A 29            call muls8s8shr7
1937   28E7 32 0B 29            sta mat_azy             ; =05
1938   28EA             
1939   28EA                     ; Azz is not used        
1940   28EA                     ; ; Azz = emul(cosb, cosc) >> SHITF;
1941   28EA                     ; lda cos_b
1942   28EA                     ; mov b, a
1943   28EA                     ; lda cos_c
1944   28EA                     ; mov c, a
1945   28EA                     ; call muls8s8shr7
1946   28EA                     ; sta mat_azz             ; =
1947   28EA             
1948   28EA             
1949   28EA C9                  ret
1950   28EB             
1951   28EB                     ; a = d = ((signed) e * (unsigned) d) >> 7
1952   28EB             muls8u8shr7:
1953   28EB AF                          xra a
1954   28EC 93                          sub e
1955   28ED FA F7 28            jm muls8u8shr7pos
1956   28F0             ;muls8u8shr7neg
1957   28F0 5F                  mov e, a
1958   28F1 CD 4D 29            call mul8
1959   28F4                     ; a = de >> 7
1960   28F4             ;       xchg
1961   28F4             ;       dad h
1962   28F4 AF                  xra a
1963   28F5 92                  sub d
1964   28F6 C9                  ret
1965   28F7             
1966   28F7             muls8u8shr7pos:
1967   28F7 CD 4D 29            call mul8
1968   28FA                     ; a = de >> 7
1969   28FA             ;       xchg
1970   28FA             ;       dad h
1971   28FA             ;       mov a, d
1972   28FA C9                  ret
1973   28FB             
1974   28FB             
1975   28FB             ;         ; a = l = ((signed) c * (unsigned) b) >> 7
1976   28FB             ; muls8u8shr7:
1977   28FB             ;         mvi d, 0
1978   28FB             ;         mov e, b
1979   28FB             ;         mov b, d
1980   28FB             ;         mov a, c
1981   28FB             ;         ora a
1982   28FB             ;         jp $+7
1983   28FB             ;         cma \ inr a \ dcr b
1984   28FB             ;         mov c, a
1985   28FB                     
1986   28FB             ;         call MulAHL_A_DE
1987   28FB             ;         ; a = hl >> 7
1988   28FB             ;         mov a, l
1989   28FB             ;         ral
1990   28FB             ;         mov a, h
1991   28FB             ;         ral
1992   28FB             ;         mov l, a
1993   28FB                     
1994   28FB             ;         mov a, b
1995   28FB             ;         ora a
1996   28FB             ;         mov a, l
1997   28FB             ;         rz
1998   28FB             ;         cma
1999   28FB             ;         inr a
2000   28FB             ;         mov l, a
2001   28FB             ;         ret
2002   28FB                     
2003   28FB             ;–£–º–Ω–æ–∂–µ–Ω–∏–µ AHL=A*DE
2004   28FB             ;MulAHL_A_DE:
2005   28FB             ;       mvi c,0
2006   28FB             ;       mov h,d\ mov l,e
2007   28FB             ;       add a\ jc xxMUL1
2008   28FB             ;       add a\ jc xxMUL2+2
2009   28FB             ;       add a\ jc xxMUL3+2
2010   28FB             ;       add a\ jc xxMUL4+2
2011   28FB             ;       add a\ jc xxMUL5+2
2012   28FB             ;       add a\ jc xxMUL6+2
2013   28FB             ;       add a\ jc xxMUL7+2
2014   28FB             ;       add a\ rc
2015   28FB             ;       lxi h,0
2016   28FB             ;       ret
2017   28FB             ;
2018   28FB             ;xxMUL1: dad h\ adc a\ jnc xxMUL2+2
2019   28FB             ;xxMUL2: dad d\ adc c\ dad h\ adc a\ jnc xxMUL3+2
2020   28FB             ;xxMUL3: dad d\ adc c\ dad h\ adc a\ jnc xxMUL4+2
2021   28FB             ;xxMUL4: dad d\ adc c\ dad h\ adc a\ jnc xxMUL5+2
2022   28FB             ;xxMUL5: dad d\ adc c\ dad h\ adc a\ jnc xxMUL6+2
2023   28FB             ;xxMUL6: dad d\ adc c\ dad h\ adc a\ jnc xxMUL7+2
2024   28FB             ;xxMUL7: dad d\ adc c\ dad h\ adc a\ rnc
2025   28FB             ;xxMUL8: dad d\ adc c
2026   28FB             ;       ret        
2027   28FB             
2028   28FB 00          rotx:           .db 0
2029   28FC 00          roty:           .db 0
2030   28FD 00          rotz:           .db 0
2031   28FE             
2032   28FE 00          cos_a:          .db 0
2033   28FF 00          sin_a:          .db 0
2034   2900 00          cos_b:          .db 0
2035   2901 00          sin_b:          .db 0
2036   2902 00          cos_c:          .db 0
2037   2903 00          sin_c:          .db 0
2038   2904             
2039   2904 00          mat_axx:        .db      0
2040   2905 00          mat_axy:        .db      0
2041   2906 00          mat_axz:        .db      0
2042   2907 00          mat_ayx:        .db      0
2043   2908 00          mat_ayy:        .db      0
2044   2909 00          mat_ayz:        .db      0
2045   290A 00          mat_azx:        .db      0
2046   290B 00          mat_azy:        .db      0
2047   290C 00          mat_azz:        .db      0
2048   290D             
2049   290D 00          cosa_x_sinb:    .db 0
2050   290E 00          sina_x_sinb:    .db 0
2051   290F             
2052   290F             mathinit:
2053   290F 01 FF FF            lxi b,-1
2054   2912 AF                  xra a
2055   2913 57                  mov d, a
2056   2914 5F                  mov e, a
2057   2915 21 00 2C            lxi h, MULTAB
2058   2918 CD 7E 29            call GenSQRtab
2059   291B 24                  inr h
2060   291C 24                  inr h
2061   291D CD 7E 29            call GenSQRtab
2062   2920 C9                  ret
2063   2921             
2064   2921                     ; b = sin(a), c = cos(a)
2065   2921             sincosa:
2066   2921 26 2B               mvi h, costbl >> 8
2067   2923 6F                  mov l, a
2068   2924 4E                  mov c, m        ; c = cos
2069   2925 D6 40               sui DEG90
2070   2927 6F                  mov l, a
2071   2928 46                  mov b, m        ; b = sin
2072   2929 C9                  ret
2073   292A                  
2074   292A             
2075   292A                     ; a=d = (d * e) >> 7 signed
2076   292A             muls8s8shr7:
2077   292A 7A                          mov a,d
2078   292B AB                          xra e
2079   292C F2 43 29                    jp muls8s8shr7pos
2080   292F             muls8s8shr7neg:
2081   292F AB                          xra e
2082   2930 F2 36 29                    jp muls8s8shr7neg1
2083   2933 AF                          xra a
2084   2934 92                          sub d
2085   2935 57                          mov d,a
2086   2936             muls8s8shr7neg1:
2087   2936 AF                          xra a
2088   2937 93                          sub e
2089   2938 FA 3C 29                    jm muls8s8shr7neg2
2090   293B 5F                          mov e,a
2091   293C             muls8s8shr7neg2:
2092   293C CD 4D 29                    call mul8
2093   293F AF                          xra a
2094   2940 92                          sub d
2095   2941 57                          mov d,a
2096   2942 C9                          ret
2097   2943             
2098   2943             muls8s8shr7pos
2099   2943 AB                          xra e
2100   2944 F2 4D 29                    jp muls8s8shr7pos2
2101   2947 AF                          xra a
2102   2948 93                          sub e
2103   2949 5F                          mov e,a
2104   294A AF                          xra a
2105   294B 92                          sub d
2106   294C 57                          mov d,a
2107   294D             muls8s8shr7pos2:
2108   294D             
2109   294D                     ; from raytracing8080_vXsource/mul8bit.asm
2110   294D                     ; de = (d * e)<<1
2111   294D                     ; clobbers: everything
2112   294D             mul8:
2113   294D 7A                  mov a, d
2114   294E 93                  sub e                   ;A=D-E
2115   294F 26 2D               mvi h, 1+(MULTAB>>8)
2116   2951 D2 6A 29            jnc m8_GetDif2
2117   2954 2F                  cma
2118   2955 3C                  inr a                   ;A=E-D
2119   2956             ;m8_GetDif:
2120   2956 6F                  mov l, a
2121   2957 82                  add d
2122   2958 82                  add d                   ;A=E+D
2123   2959 56                  mov d, m
2124   295A 25                  dcr h
2125   295B 5E                  mov e, m
2126   295C D2 61 29            jnc m8_GetSum
2127   295F 26 2E               mvi h, 2+(MULTAB>>8)
2128   2961             m8_GetSum:
2129   2961 6F                  mov l, a
2130   2962 7E                  mov a, m
2131   2963 93                  sub e
2132   2964 5F                  mov e, a
2133   2965 24                  inr h
2134   2966 7E                  mov a, m
2135   2967 9A                  sbb d
2136   2968 57                  mov d, a
2137   2969 C9                  ret
2138   296A             
2139   296A             m8_GetDif2:
2140   296A 6F                  mov l, a
2141   296B 56                  mov d, m
2142   296C 25                  dcr h
2143   296D 83                  add e
2144   296E 83                  add e                   ;A=D+E
2145   296F 5E                  mov e, m
2146   2970 D2 75 29            jnc m8_GetSum2
2147   2973 26 2E               mvi h, 2+(MULTAB>>8)
2148   2975             m8_GetSum2:
2149   2975 6F                  mov l, a
2150   2976 7E                  mov a, m
2151   2977 93                  sub e
2152   2978 5F                  mov e, a
2153   2979 24                  inr h
2154   297A 7E                  mov a, m
2155   297B 9A                  sbb d
2156   297C 57                  mov d, a
2157   297D C9                  ret
2158   297E             
2159   297E             
2160   297E             GenSQRtab:
2161   297E D5                  push d
2162   297F F5                  push psw
2163   2980 1F                  rar
2164   2981 F5                  push psw
2165   2982 7A                  mov a, d
2166   2983 1F                  rar
2167   2984 57                  mov d, a
2168   2985 7B                  mov a, e
2169   2986 1F                  rar
2170   2987 5F                  mov e, a
2171   2988 F1                  pop psw
2172   2989             ;       rar
2173   2989 7A                  mov a, d
2174   298A             ;       rar
2175   298A 24                  inr h
2176   298B 77                  mov m,a
2177   298C 25                  dcr h
2178   298D 7B                  mov a, e
2179   298E             ;       rar
2180   298E 77                  mov m, a
2181   298F F1                  pop psw
2182   2990 D1                  pop d
2183   2991 03                  inx b
2184   2992 03                  inx b
2185   2993 EB                  xchg
2186   2994 09                  dad b
2187   2995 EB                  xchg
2188   2996 CE 00               aci 0
2189   2998 2C                  inr l
2190   2999 C2 7E 29            jnz GenSQRtab
2191   299C C9                  ret
2192   299D             
2193   2A00                     .org 0100h + $ & 0ff00h  ; ALIGN 256
2194   2A00             zinvtbl:
2195   2A00 FF FF F8 F1                 .db $ff,$ff,$f8,$f1,$ea,$e3,$dd,$d7,$d2,$cd,$c8,$c3,$be,$ba,$b6,$b2,$ae,$aa,$a7,$a4,$a0,$9d,$9a,$97,$95,$92,$8f,$8d,$8b,$88,$86,$84,
2195   2A04 EA E3 DD D7 
2195   2A08 D2 CD C8 C3 
2195   2A0C BE BA B6 B2 
2195   2A10 AE AA A7 A4 
2195   2A14 A0 9D 9A 97 
2195   2A18 95 92 8F 8D 
2195   2A1C 8B 88 86 84 
2196   2A20 82 80 7E 7C         .db $82,$80,$7e,$7c,$7a,$78,$76,$75,$73,$72,$70,$6e,$6d,$6c,$6a,$69,$67,$66,$65,$64,$62,$61,$60,$5f,$5e,$5d,$5c,$5b,$5a,$59,$58,$57,
2196   2A24 7A 78 76 75 
2196   2A28 73 72 70 6E 
2196   2A2C 6D 6C 6A 69 
2196   2A30 67 66 65 64 
2196   2A34 62 61 60 5F 
2196   2A38 5E 5D 5C 5B 
2196   2A3C 5A 59 58 57 
2197   2A40 56 55 54 53         .db $56,$55,$54,$53,$52,$52,$51,$50,$4f,$4f,$4e,$4d,$4c,$4c,$4b,$4a,$4a,$49,$48,$48,$47,$46,$46,$45,$45
2197   2A44 52 52 51 50 
2197   2A48 4F 4F 4E 4D 
2197   2A4C 4C 4C 4B 4A 
2197   2A50 4A 49 48 48 
2197   2A54 47 46 46 45 
2197   2A58 45 
2198   2A59             
2199   2A59                     ; b = 8192/(31+a)
2200   2A59             bzinva:
2201   2A59 26 2A               mvi h, zinvtbl >> 8
2202   2A5B 6F                  mov l, a
2203   2A5C 46                  mov b, m
2204   2A5D C9                  ret
2205   2A5E             
2206   2B00                     .org 0100h + $ & 0ff00h  ; ALIGN 256
2207   2B00             costbl:
2208   2B00 7F 7F 7F 7F         .db $7f,$7f,$7f,$7f,$7e,$7e,$7e,$7d,$7d,$7c,$7b,$7a,$7a,$79,$78,$76,$75,$74,$73,$71,$70,$6f,$6d,$6b,$6a,$68,$66,$64,$62,$60,$5e,$5c
2208   2B04 7E 7E 7E 7D 
2208   2B08 7D 7C 7B 7A 
2208   2B0C 7A 79 78 76 
2208   2B10 75 74 73 71 
2208   2B14 70 6F 6D 6B 
2208   2B18 6A 68 66 64 
2208   2B1C 62 60 5E 5C 
2209   2B20 5A 58 55 53         .db $5a,$58,$55,$53,$51,$4e,$4c,$49,$47,$44,$41,$3f,$3c,$39,$36,$33,$31,$2e,$2b,$28,$25,$22,$1f,$1c,$19,$16,$13,$10,$0c,$09,$06,$03
2209   2B24 51 4E 4C 49 
2209   2B28 47 44 41 3F 
2209   2B2C 3C 39 36 33 
2209   2B30 31 2E 2B 28 
2209   2B34 25 22 1F 1C 
2209   2B38 19 16 13 10 
2209   2B3C 0C 09 06 03 
2210   2B40 00 FD FA F7         .db $00,$fd,$fa,$f7,$f4,$f0,$ed,$ea,$e7,$e4,$e1,$de,$db,$d8,$d5,$d2,$cf,$cd,$ca,$c7,$c4,$c1,$bf,$bc,$b9,$b7,$b4,$b2,$af,$ad,$ab,$a8
2210   2B44 F4 F0 ED EA 
2210   2B48 E7 E4 E1 DE 
2210   2B4C DB D8 D5 D2 
2210   2B50 CF CD CA C7 
2210   2B54 C4 C1 BF BC 
2210   2B58 B9 B7 B4 B2 
2210   2B5C AF AD AB A8 
2211   2B60 A6 A4 A2 A0         .db $a6,$a4,$a2,$a0,$9e,$9c,$9a,$98,$96,$95,$93,$91,$90,$8f,$8d,$8c,$8b,$8a,$88,$87,$86,$86,$85,$84,$83,$83,$82,$82,$82,$81,$81,$81
2211   2B64 9E 9C 9A 98 
2211   2B68 96 95 93 91 
2211   2B6C 90 8F 8D 8C 
2211   2B70 8B 8A 88 87 
2211   2B74 86 86 85 84 
2211   2B78 83 83 82 82 
2211   2B7C 82 81 81 81 
2212   2B80 81 81 81 81         .db $81,$81,$81,$81,$82,$82,$82,$83,$83,$84,$85,$86,$86,$87,$88,$8a,$8b,$8c,$8d,$8f,$90,$91,$93,$95,$96,$98,$9a,$9c,$9e,$a0,$a2,$a4
2212   2B84 82 82 82 83 
2212   2B88 83 84 85 86 
2212   2B8C 86 87 88 8A 
2212   2B90 8B 8C 8D 8F 
2212   2B94 90 91 93 95 
2212   2B98 96 98 9A 9C 
2212   2B9C 9E A0 A2 A4 
2213   2BA0 A6 A8 AB AD         .db $a6,$a8,$ab,$ad,$af,$b2,$b4,$b7,$b9,$bc,$bf,$c1,$c4,$c7,$ca,$cd,$cf,$d2,$d5,$d8,$db,$de,$e1,$e4,$e7,$ea,$ed,$f0,$f4,$f7,$fa,$fd
2213   2BA4 AF B2 B4 B7 
2213   2BA8 B9 BC BF C1 
2213   2BAC C4 C7 CA CD 
2213   2BB0 CF D2 D5 D8 
2213   2BB4 DB DE E1 E4 
2213   2BB8 E7 EA ED F0 
2213   2BBC F4 F7 FA FD 
2214   2BC0 00 03 06 09         .db $00,$03,$06,$09,$0c,$10,$13,$16,$19,$1c,$1f,$22,$25,$28,$2b,$2e,$31,$33,$36,$39,$3c,$3f,$41,$44,$47,$49,$4c,$4e,$51,$53,$55,$58
2214   2BC4 0C 10 13 16 
2214   2BC8 19 1C 1F 22 
2214   2BCC 25 28 2B 2E 
2214   2BD0 31 33 36 39 
2214   2BD4 3C 3F 41 44 
2214   2BD8 47 49 4C 4E 
2214   2BDC 51 53 55 58 
2215   2BE0 5A 5C 5E 60         .db $5a,$5c,$5e,$60,$62,$64,$66,$68,$6a,$6b,$6d,$6f,$70,$71,$73,$74,$75,$76,$78,$79,$7a,$7a,$7b,$7c,$7d,$7d,$7e,$7e,$7e,$7f,$7f,$7f
2215   2BE4 62 64 66 68 
2215   2BE8 6A 6B 6D 6F 
2215   2BEC 70 71 73 74 
2215   2BF0 75 76 78 79 
2215   2BF4 7A 7A 7B 7C 
2215   2BF8 7D 7D 7E 7E 
2215   2BFC 7E 7F 7F 7F 
2216   2C00             
2217   2C00             MULTAB: .ds 1024
2218   3000             
2219   3000             TOPLINE .equ $a0
2220   3000             LINEH   .equ 14
2221   3000             msg1:   
2222   3000 82 04 48 54         .db TOPLINE - 30, 4, "HTTPS://CAGLRC.CC/SCALAR", 0
2222   3004 54 50 53 3A 
2222   3008 2F 2F 43 41 
2222   300C 47 4C 52 43 
2222   3010 2E 43 43 2F 
2222   3014 53 43 41 4C 
2222   3018 41 52 00 
2223   301B 0A 0E 32 30         .db 10, 14, "2025", 0
2223   301F 32 35 00 
2224   3022             ;                                         "                                "
2225   3022             msg_restart:
2226   3022 A0 04 4B 41         .db TOPLINE -  0, 4, "KARTOTEKA FOR VECTOR-06C", 0
2226   3026 52 54 4F 54 
2226   302A 45 4B 41 20 
2226   302E 46 4F 52 20 
2226   3032 56 45 43 54 
2226   3036 4F 52 2D 30 
2226   303A 36 43 00 
2227   303D 96 04 2D 2D         .db TOPLINE - 10, 4, "------------------------", 0
2227   3041 2D 2D 2D 2D 
2227   3045 2D 2D 2D 2D 
2227   3049 2D 2D 2D 2D 
2227   304D 2D 2D 2D 2D 
2227   3051 2D 2D 2D 2D 
2227   3055 2D 2D 00 
2228   3058 50 00 20 56         .db TOPLINE - 80, 0,              " VISIT FOR GIGAZ OF V-06C WAREZ ", 0
2228   305C 49 53 49 54 
2228   3060 20 46 4F 52 
2228   3064 20 47 49 47 
2228   3068 41 5A 20 4F 
2228   306C 46 20 56 2D 
2228   3070 30 36 43 20 
2228   3074 57 41 52 45 
2228   3078 5A 20 00 
2229   307B 42 00 20 20         .db TOPLINE - 80 - LINEH, 0,      "     GAMEZ, DEMOS  AND DOCS     ", 0
2229   307F 20 20 20 47 
2229   3083 41 4D 45 5A 
2229   3087 2C 20 44 45 
2229   308B 4D 4F 53 20 
2229   308F 20 41 4E 44 
2229   3093 20 44 4F 43 
2229   3097 53 20 20 20 
2229   309B 20 20 00 
2230   309E 34 00 20 20         .db TOPLINE - 80 - (LINEH*2), 0,  "       RECENT & HISTORICAL      ", 0
2230   30A2 20 20 20 20 
2230   30A6 20 52 45 43 
2230   30AA 45 4E 54 20 
2230   30AE 26 20 48 49 
2230   30B2 53 54 4F 52 
2230   30B6 49 43 41 4C 
2230   30BA 20 20 20 20 
2230   30BE 20 20 00 
2231   30C1             
2232   30C1                     ;.db TOPLINE - 80 - (LINEH*3), 0,  "                                ", 0
2233   30C1                     ;.db TOPLINE - 80 - (LINEH*3), 0,  "                                ", 0
2234   30C1 01 01 FD            .db 1, 1, 253
2235   30C4 01 01 FD            .db 1, 1, 253
2236   30C7                     
2237   30C7 50 00 20 20         .db TOPLINE - 80, 0,              "      COME AND LEARN ABOUT      ", 0
2237   30CB 20 20 20 20 
2237   30CF 43 4F 4D 45 
2237   30D3 20 41 4E 44 
2237   30D7 20 4C 45 41 
2237   30DB 52 4E 20 41 
2237   30DF 42 4F 55 54 
2237   30E3 20 20 20 20 
2237   30E7 20 20 00 
2238   30EA 42 00 20 20         .db TOPLINE - 80 - (LINEH*1), 0,  "         -- -- -- -- --         ", 0
2238   30EE 20 20 20 20 
2238   30F2 20 20 20 2D 
2238   30F6 2D 20 2D 2D 
2238   30FA 20 2D 2D 20 
2238   30FE 2D 2D 20 2D 
2238   3102 2D 20 20 20 
2238   3106 20 20 20 20 
2238   310A 20 20 00 
2239   310D 26 00 20 20         .db TOPLINE - 80 - (LINEH*3), 0,  "            -- -- --            ", 0
2239   3111 20 20 20 20 
2239   3115 20 20 20 20 
2239   3119 20 20 2D 2D 
2239   311D 20 2D 2D 20 
2239   3121 2D 2D 20 20 
2239   3125 20 20 20 20 
2239   3129 20 20 20 20 
2239   312D 20 20 00 
2240   3130 34 00 20 20         .db TOPLINE - 80 - (LINEH*2), 0,  "           VECTOR-06C           ", 0
2240   3134 20 20 20 20 
2240   3138 20 20 20 20 
2240   313C 20 56 45 43 
2240   3140 54 4F 52 2D 
2240   3144 30 36 43 20 
2240   3148 20 20 20 20 
2240   314C 20 20 20 20 
2240   3150 20 20 00 
2241   3153             
2242   3153                     ;.db TOPLINE - 80 - (LINEH*4), 0,  "                                ", 0
2243   3153                     ;.db TOPLINE - 80 - (LINEH*4), 0,  "                                ", 0
2244   3153 01 01 FD            .db 1, 1, 253
2245   3156 01 01 FD            .db 1, 1, 253
2246   3159             
2247   3159 42 00 20 20         .db TOPLINE - 80 - (LINEH*1), 0,  "                                ", 0   ; wipe previous
2247   315D 20 20 20 20 
2247   3161 20 20 20 20 
2247   3165 20 20 20 20 
2247   3169 20 20 20 20 
2247   316D 20 20 20 20 
2247   3171 20 20 20 20 
2247   3175 20 20 20 20 
2247   3179 20 20 00 
2248   317C 34 00 20 20         .db TOPLINE - 80 - (LINEH*2), 0,  "                                ", 0
2248   3180 20 20 20 20 
2248   3184 20 20 20 20 
2248   3188 20 20 20 20 
2248   318C 20 20 20 20 
2248   3190 20 20 20 20 
2248   3194 20 20 20 20 
2248   3198 20 20 20 20 
2248   319C 20 20 00 
2249   319F 26 00 20 20         .db TOPLINE - 80 - (LINEH*3), 0,  "                                ", 0
2249   31A3 20 20 20 20 
2249   31A7 20 20 20 20 
2249   31AB 20 20 20 20 
2249   31AF 20 20 20 20 
2249   31B3 20 20 20 20 
2249   31B7 20 20 20 20 
2249   31BB 20 20 20 20 
2249   31BF 20 20 00 
2250   31C2             
2251   31C2 50 00 20 20         .db TOPLINE - 80, 0,              "  CODE NEW DEMOS AND GAMES FOR  ", 0
2251   31C6 43 4F 44 45 
2251   31CA 20 4E 45 57 
2251   31CE 20 44 45 4D 
2251   31D2 4F 53 20 41 
2251   31D6 4E 44 20 47 
2251   31DA 41 4D 45 53 
2251   31DE 20 46 4F 52 
2251   31E2 20 20 00 
2252   31E5 42 00 20 20         .db TOPLINE - 80 - (LINEH*1), 0,  "           BEKTOP-06",20,"           ", 0
2252   31E9 20 20 20 20 
2252   31ED 20 20 20 20 
2252   31F1 20 42 45 4B 
2252   31F5 54 4F 50 2D 
2252   31F9 30 36 14 20 
2252   31FD 20 20 20 20 
2252   3201 20 20 20 20 
2252   3205 20 20 00 
2253   3208 34 00 20 20         .db TOPLINE - 80 - (LINEH*2), 0,  "   FOR ITS POWERFUL 8080A CPU   ", 0
2253   320C 20 46 4F 52 
2253   3210 20 49 54 53 
2253   3214 20 50 4F 57 
2253   3218 45 52 46 55 
2253   321C 4C 20 38 30 
2253   3220 38 30 41 20 
2253   3224 43 50 55 20 
2253   3228 20 20 00 
2254   322B 26 00 20 20         .db TOPLINE - 80 - (LINEH*3), 0,  "      (BEAUTIFUL MNEMONICS)     ", 0
2254   322F 20 20 20 20 
2254   3233 28 42 45 41 
2254   3237 55 54 49 46 
2254   323B 55 4C 20 4D 
2254   323F 4E 45 4D 4F 
2254   3243 4E 49 43 53 
2254   3247 29 20 20 20 
2254   324B 20 20 00 
2255   324E                     ;.db TOPLINE - 80 - (LINEH*4), 0,  "                                ", 0
2256   324E                     ;.db TOPLINE - 80 - (LINEH*4), 0,  "                                ", 0
2257   324E 01 01 FD            .db 1, 1, 253
2258   3251 01 01 FD            .db 1, 1, 253
2259   3254             
2260   3254 50 00 20 20         .db TOPLINE - 80, 0,              "                                ", 0
2260   3258 20 20 20 20 
2260   325C 20 20 20 20 
2260   3260 20 20 20 20 
2260   3264 20 20 20 20 
2260   3268 20 20 20 20 
2260   326C 20 20 20 20 
2260   3270 20 20 20 20 
2260   3274 20 20 00 
2261   3277 42 00 20 20         .db TOPLINE - 80 - (LINEH*1), 0,  "                                ", 0   ; wipe previous
2261   327B 20 20 20 20 
2261   327F 20 20 20 20 
2261   3283 20 20 20 20 
2261   3287 20 20 20 20 
2261   328B 20 20 20 20 
2261   328F 20 20 20 20 
2261   3293 20 20 20 20 
2261   3297 20 20 00 
2262   329A 34 00 20 20         .db TOPLINE - 80 - (LINEH*2), 0,  "                                ", 0
2262   329E 20 20 20 20 
2262   32A2 20 20 20 20 
2262   32A6 20 20 20 20 
2262   32AA 20 20 20 20 
2262   32AE 20 20 20 20 
2262   32B2 20 20 20 20 
2262   32B6 20 20 20 20 
2262   32BA 20 20 00 
2263   32BD 18 00 20 20         .db TOPLINE - 80 - (LINEH*4), 0,  "                                ", 0
2263   32C1 20 20 20 20 
2263   32C5 20 20 20 20 
2263   32C9 20 20 20 20 
2263   32CD 20 20 20 20 
2263   32D1 20 20 20 20 
2263   32D5 20 20 20 20 
2263   32D9 20 20 20 20 
2263   32DD 20 20 00 
2264   32E0             
2265   32E0 5E 00 20 20         .db TOPLINE - 80 + (LINEH*1), 0,  "     XCHG                       ", 0
2265   32E4 20 20 20 58 
2265   32E8 43 48 47 20 
2265   32EC 20 20 20 20 
2265   32F0 20 20 20 20 
2265   32F4 20 20 20 20 
2265   32F8 20 20 20 20 
2265   32FC 20 20 20 20 
2265   3300 20 20 00 
2266   3303 5E 00 20 20         .db TOPLINE - 80 + (LINEH*1), 0,  "                      DAD SP    ", 0
2266   3307 20 20 20 20 
2266   330B 20 20 20 20 
2266   330F 20 20 20 20 
2266   3313 20 20 20 20 
2266   3317 20 20 20 20 
2266   331B 44 41 44 20 
2266   331F 53 50 20 20 
2266   3323 20 20 00 
2267   3326 5E 00 20 20         .db TOPLINE - 80 + (LINEH*1), 0,  "            XTHL                ", 0
2267   332A 20 20 20 20 
2267   332E 20 20 20 20 
2267   3332 20 20 58 54 
2267   3336 48 4C 20 20 
2267   333A 20 20 20 20 
2267   333E 20 20 20 20 
2267   3342 20 20 20 20 
2267   3346 20 20 00 
2268   3349 5E 00 20 20         .db TOPLINE - 80 + (LINEH*1), 0,  "        SPHL                    ", 0
2268   334D 20 20 20 20 
2268   3351 20 20 53 50 
2268   3355 48 4C 20 20 
2268   3359 20 20 20 20 
2268   335D 20 20 20 20 
2268   3361 20 20 20 20 
2268   3365 20 20 20 20 
2268   3369 20 20 00 
2269   336C 26 00 20 20         .db TOPLINE - 80 - (LINEH*3), 0,  "                                ", 0     ; wipe "beautiful mnemonics"
2269   3370 20 20 20 20 
2269   3374 20 20 20 20 
2269   3378 20 20 20 20 
2269   337C 20 20 20 20 
2269   3380 20 20 20 20 
2269   3384 20 20 20 20 
2269   3388 20 20 20 20 
2269   338C 20 20 00 
2270   338F 5E 00 20 20         .db TOPLINE - 80 + (LINEH*1), 0,  "                                ", 0
2270   3393 20 20 20 20 
2270   3397 20 20 20 20 
2270   339B 20 20 20 20 
2270   339F 20 20 20 20 
2270   33A3 20 20 20 20 
2270   33A7 20 20 20 20 
2270   33AB 20 20 20 20 
2270   33AF 20 20 00 
2271   33B2 5E 00 20 20         .db TOPLINE - 80 + (LINEH*1), 0,  "                FHTAGN          ", 0
2271   33B6 20 20 20 20 
2271   33BA 20 20 20 20 
2271   33BE 20 20 20 20 
2271   33C2 20 20 46 48 
2271   33C6 54 41 47 4E 
2271   33CA 20 20 20 20 
2271   33CE 20 20 20 20 
2271   33D2 20 20 00 
2272   33D5 5E 00 20 20         .db TOPLINE - 80 + (LINEH*1), 0,  "                                ", 0
2272   33D9 20 20 20 20 
2272   33DD 20 20 20 20 
2272   33E1 20 20 20 20 
2272   33E5 20 20 20 20 
2272   33E9 20 20 20 20 
2272   33ED 20 20 20 20 
2272   33F1 20 20 20 20 
2272   33F5 20 20 00 
2273   33F8             
2274   33F8             
2275   33F8 A0 04 20 4B         .db TOPLINE -  0, 4, " KAPTOTEKA  BEKTOPA-06",20,"  ", 0
2275   33FC 41 50 54 4F 
2275   3400 54 45 4B 41 
2275   3404 20 20 42 45 
2275   3408 4B 54 4F 50 
2275   340C 41 2D 30 36 
2275   3410 14 20 20 00 
2276   3414             
2277   3414 50 00 20 20         .db TOPLINE - 80, 0,              "    WRITE MASSIVE TUNES  FOR    ", 0
2277   3418 20 20 57 52 
2277   341C 49 54 45 20 
2277   3420 4D 41 53 53 
2277   3424 49 56 45 20 
2277   3428 54 55 4E 45 
2277   342C 53 20 20 46 
2277   3430 4F 52 20 20 
2277   3434 20 20 00 
2278   3437 42 00 20 20         .db TOPLINE - 80 - (LINEH*1), 0,  "          THE AMAZING           ", 0
2278   343B 20 20 20 20 
2278   343F 20 20 20 20 
2278   3443 54 48 45 20 
2278   3447 41 4D 41 5A 
2278   344B 49 4E 47 20 
2278   344F 20 20 20 20 
2278   3453 20 20 20 20 
2278   3457 20 20 00 
2279   345A 42 00 20 20         .db TOPLINE - 80 - (LINEH*1), 0,  "         THE INCREDIBLE         ", 0
2279   345E 20 20 20 20 
2279   3462 20 20 20 54 
2279   3466 48 45 20 49 
2279   346A 4E 43 52 45 
2279   346E 44 49 42 4C 
2279   3472 45 20 20 20 
2279   3476 20 20 20 20 
2279   347A 20 20 00 
2280   347D 42 00 20 20         .db TOPLINE - 80 - (LINEH*1), 0,  "       THE SECOND TO NONE       ", 0
2280   3481 20 20 20 20 
2280   3485 20 54 48 45 
2280   3489 20 53 45 43 
2280   348D 4F 4E 44 20 
2280   3491 54 4F 20 4E 
2280   3495 4F 4E 45 20 
2280   3499 20 20 20 20 
2280   349D 20 20 00 
2281   34A0 34 00 20 20         .db TOPLINE - 80 - (LINEH*2), 0,  "           8253 (VI53)          ", 0
2281   34A4 20 20 20 20 
2281   34A8 20 20 20 20 
2281   34AC 20 38 32 35 
2281   34B0 33 20 28 56 
2281   34B4 49 35 33 29 
2281   34B8 20 20 20 20 
2281   34BC 20 20 20 20 
2281   34C0 20 20 00 
2282   34C3 26 00 20 20         .db TOPLINE - 80 - (LINEH*3), 0,  "         SOUND GENERATOR        ", 0
2282   34C7 20 20 20 20 
2282   34CB 20 20 20 53 
2282   34CF 4F 55 4E 44 
2282   34D3 20 47 45 4E 
2282   34D7 45 52 41 54 
2282   34DB 4F 52 20 20 
2282   34DF 20 20 20 20 
2282   34E3 20 20 00 
2283   34E6             
2284   34E6                     ;.db 1, 1, 254 ; launch fish
2285   34E6             
2286   34E6                     ;.db TOPLINE - 80 - (LINEH*4), 0,  "                                ", 0
2287   34E6                     ;.db TOPLINE - 80 - (LINEH*4), 0,  "                                ", 0
2288   34E6 01 01 FD            .db 1, 1, 253 ; delay
2289   34E9 01 01 FD            .db 1, 1, 253 ; delay
2290   34EC             
2291   34EC 42 00 20 20         .db TOPLINE - 80 - (LINEH*1), 0,  "                                ", 0   ; wipe previous
2291   34F0 20 20 20 20 
2291   34F4 20 20 20 20 
2291   34F8 20 20 20 20 
2291   34FC 20 20 20 20 
2291   3500 20 20 20 20 
2291   3504 20 20 20 20 
2291   3508 20 20 20 20 
2291   350C 20 20 00 
2292   350F 34 00 20 20         .db TOPLINE - 80 - (LINEH*2), 0,  "                                ", 0
2292   3513 20 20 20 20 
2292   3517 20 20 20 20 
2292   351B 20 20 20 20 
2292   351F 20 20 20 20 
2292   3523 20 20 20 20 
2292   3527 20 20 20 20 
2292   352B 20 20 20 20 
2292   352F 20 20 00 
2293   3532 26 00 20 20         .db TOPLINE - 80 - (LINEH*3), 0,  "                                ", 0
2293   3536 20 20 20 20 
2293   353A 20 20 20 20 
2293   353E 20 20 20 20 
2293   3542 20 20 20 20 
2293   3546 20 20 20 20 
2293   354A 20 20 20 20 
2293   354E 20 20 20 20 
2293   3552 20 20 00 
2294   3555             
2295   3555 50 00 20 20         .db TOPLINE - 80, 0,              "    WIN OLDSKOOL COMPOS WITH    ", 0
2295   3559 20 20 57 49 
2295   355D 4E 20 4F 4C 
2295   3561 44 53 4B 4F 
2295   3565 4F 4C 20 43 
2295   3569 4F 4D 50 4F 
2295   356D 53 20 57 49 
2295   3571 54 48 20 20 
2295   3575 20 20 00 
2296   3578 42 00 20 20         .db TOPLINE - 80 - (LINEH*1), 0,  "         -- -- -- -- --         ", 0
2296   357C 20 20 20 20 
2296   3580 20 20 20 2D 
2296   3584 2D 20 2D 2D 
2296   3588 20 2D 2D 20 
2296   358C 2D 2D 20 2D 
2296   3590 2D 20 20 20 
2296   3594 20 20 20 20 
2296   3598 20 20 00 
2297   359B 26 00 20 20         .db TOPLINE - 80 - (LINEH*3), 0,  "            -- -- --            ", 0
2297   359F 20 20 20 20 
2297   35A3 20 20 20 20 
2297   35A7 20 20 2D 2D 
2297   35AB 20 2D 2D 20 
2297   35AF 2D 2D 20 20 
2297   35B3 20 20 20 20 
2297   35B7 20 20 20 20 
2297   35BB 20 20 00 
2298   35BE 34 00 20 20         .db TOPLINE - 80 - (LINEH*2), 0,  "        BEKTOP-06",20," PRODS        ", 0
2298   35C2 20 20 20 20 
2298   35C6 20 20 42 45 
2298   35CA 4B 54 4F 50 
2298   35CE 2D 30 36 14 
2298   35D2 20 50 52 4F 
2298   35D6 44 53 20 20 
2298   35DA 20 20 20 20 
2298   35DE 20 20 00 
2299   35E1             
2300   35E1                     ;.db TOPLINE - 80 - (LINEH*4), 0,  "                                ", 0
2301   35E1                     ;.db TOPLINE - 80 - (LINEH*4), 0,  "                                ", 0
2302   35E1 01 01 FD            .db 1, 1, 253
2303   35E4 01 01 FD            .db 1, 1, 253
2304   35E7             
2305   35E7 42 00 20 20         .db TOPLINE - 80 - (LINEH*1), 0,  "                                ", 0   ; wipe previous
2305   35EB 20 20 20 20 
2305   35EF 20 20 20 20 
2305   35F3 20 20 20 20 
2305   35F7 20 20 20 20 
2305   35FB 20 20 20 20 
2305   35FF 20 20 20 20 
2305   3603 20 20 20 20 
2305   3607 20 20 00 
2306   360A 34 00 20 20         .db TOPLINE - 80 - (LINEH*2), 0,  "                                ", 0
2306   360E 20 20 20 20 
2306   3612 20 20 20 20 
2306   3616 20 20 20 20 
2306   361A 20 20 20 20 
2306   361E 20 20 20 20 
2306   3622 20 20 20 20 
2306   3626 20 20 20 20 
2306   362A 20 20 00 
2307   362D 26 00 20 20         .db TOPLINE - 80 - (LINEH*3), 0,  "                                ", 0
2307   3631 20 20 20 20 
2307   3635 20 20 20 20 
2307   3639 20 20 20 20 
2307   363D 20 20 20 20 
2307   3641 20 20 20 20 
2307   3645 20 20 20 20 
2307   3649 20 20 20 20 
2307   364D 20 20 00 
2308   3650             
2309   3650                     ;.db TOPLINE - 80 - (LINEH*3), 0,  "                                ", 0
2310   3650 01 01 FD            .db 1, 1, 253
2311   3653 50 00 20 20         .db TOPLINE - 80,             0,  "             CREDITS            ", 0
2311   3657 20 20 20 20 
2311   365B 20 20 20 20 
2311   365F 20 20 20 43 
2311   3663 52 45 44 49 
2311   3667 54 53 20 20 
2311   366B 20 20 20 20 
2311   366F 20 20 20 20 
2311   3673 20 20 00 
2312   3676 34 00 20 43         .db TOPLINE - 80 - (LINEH*2), 0,  " CODE, GFX, MUSIC ..... SVOFSKI ", 0
2312   367A 4F 44 45 2C 
2312   367E 20 47 46 58 
2312   3682 2C 20 4D 55 
2312   3686 53 49 43 20 
2312   368A 2E 2E 2E 2E 
2312   368E 2E 20 53 56 
2312   3692 4F 46 53 4B 
2312   3696 49 20 00 
2313   3699 26 00 20 4D         .db TOPLINE - 80 - (LINEH*3), 0,  " MAD CODE & BASS ....... IVAGOR ", 0
2313   369D 41 44 20 43 
2313   36A1 4F 44 45 20 
2313   36A5 26 20 42 41 
2313   36A9 53 53 20 2E 
2313   36AD 2E 2E 2E 2E 
2313   36B1 2E 2E 20 49 
2313   36B5 56 41 47 4F 
2313   36B9 52 20 00 
2314   36BC             
2315   36BC                     ;.db TOPLINE - 80 - (LINEH*4), 0,  "                                ", 0
2316   36BC 01 01 FD            .db 1, 1, 253
2317   36BF             
2318   36BF 42 00 20 20         .db TOPLINE - 80 - (LINEH*1), 0,  "                                ", 0   ; wipe previous
2318   36C3 20 20 20 20 
2318   36C7 20 20 20 20 
2318   36CB 20 20 20 20 
2318   36CF 20 20 20 20 
2318   36D3 20 20 20 20 
2318   36D7 20 20 20 20 
2318   36DB 20 20 20 20 
2318   36DF 20 20 00 
2319   36E2 34 00 20 20         .db TOPLINE - 80 - (LINEH*2), 0,  "                                ", 0
2319   36E6 20 20 20 20 
2319   36EA 20 20 20 20 
2319   36EE 20 20 20 20 
2319   36F2 20 20 20 20 
2319   36F6 20 20 20 20 
2319   36FA 20 20 20 20 
2319   36FE 20 20 20 20 
2319   3702 20 20 00 
2320   3705 26 00 20 20         .db TOPLINE - 80 - (LINEH*3), 0,  "                                ", 0
2320   3709 20 20 20 20 
2320   370D 20 20 20 20 
2320   3711 20 20 20 20 
2320   3715 20 20 20 20 
2320   3719 20 20 20 20 
2320   371D 20 20 20 20 
2320   3721 20 20 20 20 
2320   3725 20 20 00 
2321   3728                     
2322   3728 42 00 20 45         .db TOPLINE - 80 - (LINEH*1), 0,  " ECHOING.MOD VARIATION FOR VI53 ", 0
2322   372C 43 48 4F 49 
2322   3730 4E 47 2E 4D 
2322   3734 4F 44 20 56 
2322   3738 41 52 49 41 
2322   373C 54 49 4F 4E 
2322   3740 20 46 4F 52 
2322   3744 20 56 49 35 
2322   3748 33 20 00 
2323   374B 34 00 20 42         .db TOPLINE - 80 - (LINEH*2), 0,  " BY SVOFSKI FEAT IVAGOR ON BEHS ", 0
2323   374F 59 20 53 56 
2323   3753 4F 46 53 4B 
2323   3757 49 20 46 45 
2323   375B 41 54 20 49 
2323   375F 56 41 47 4F 
2323   3763 52 20 4F 4E 
2323   3767 20 42 45 48 
2323   376B 53 20 00 
2324   376E 26 00 20 20         .db TOPLINE - 80 - (LINEH*3), 0,  "     - OG AUTHOR UNKNOWN -      ", 0
2324   3772 20 20 20 2D 
2324   3776 20 4F 47 20 
2324   377A 41 55 54 48 
2324   377E 4F 52 20 55 
2324   3782 4E 4B 4E 4F 
2324   3786 57 4E 20 2D 
2324   378A 20 20 20 20 
2324   378E 20 20 00 
2325   3791             
2326   3791                     ;.db TOPLINE - 80 - (LINEH*4), 0,  "                                ", 0
2327   3791 01 01 FD            .db 1, 1, 253
2328   3794             
2329   3794 A0 04 20 4B         .db TOPLINE -  0, 4, " KPOTOTEKA ", 0
2329   3798 50 4F 54 4F 
2329   379C 54 45 4B 41 
2329   37A0 20 00 
2330   37A2             
2331   37A2 50 00 20 20         .db TOPLINE - 80 - (LINEH*0), 0,  "                                ", 0
2331   37A6 20 20 20 20 
2331   37AA 20 20 20 20 
2331   37AE 20 20 20 20 
2331   37B2 20 20 20 20 
2331   37B6 20 20 20 20 
2331   37BA 20 20 20 20 
2331   37BE 20 20 20 20 
2331   37C2 20 20 00 
2332   37C5 42 00 20 20         .db TOPLINE - 80 - (LINEH*1), 0,  "                                ", 0   ; wipe previous
2332   37C9 20 20 20 20 
2332   37CD 20 20 20 20 
2332   37D1 20 20 20 20 
2332   37D5 20 20 20 20 
2332   37D9 20 20 20 20 
2332   37DD 20 20 20 20 
2332   37E1 20 20 20 20 
2332   37E5 20 20 00 
2333   37E8 34 00 20 20         .db TOPLINE - 80 - (LINEH*2), 0,  "                                ", 0
2333   37EC 20 20 20 20 
2333   37F0 20 20 20 20 
2333   37F4 20 20 20 20 
2333   37F8 20 20 20 20 
2333   37FC 20 20 20 20 
2333   3800 20 20 20 20 
2333   3804 20 20 20 20 
2333   3808 20 20 00 
2334   380B 26 00 20 20         .db TOPLINE - 80 - (LINEH*3), 0,  "                                ", 0
2334   380F 20 20 20 20 
2334   3813 20 20 20 20 
2334   3817 20 20 20 20 
2334   381B 20 20 20 20 
2334   381F 20 20 20 20 
2334   3823 20 20 20 20 
2334   3827 20 20 20 20 
2334   382B 20 20 00 
2335   382E             
2336   382E             
2337   382E             
2338   382E 34 00 20 20         .db TOPLINE - 80 - (LINEH*2), 0,  "      GREETINGS OUTLINE \\o/     ", 0
2338   3832 20 20 20 20 
2338   3836 47 52 45 45 
2338   383A 54 49 4E 47 
2338   383E 53 20 4F 55 
2338   3842 54 4C 49 4E 
2338   3846 45 20 5C 6F 
2338   384A 2F 20 20 20 
2338   384E 20 20 00 
2339   3851 42 04 13 00         .db TOPLINE - 80 - (LINEH*1), 4,  19, 0 ; stars
2340   3855 01 01 FE            .db 1, 1, 254 ; launch fish
2341   3858 50 14 11 00         .db TOPLINE - 80 - (LINEH*0), 20, 17, 0 ; stars
2342   385C 26 0A 12 00         .db TOPLINE - 80 - (LINEH*3), 10, 18, 0 ; stars
2343   3860 01 01 FD            .db 1, 1, 253
2344   3863 E0 07 13 00         .db $e0, 7,                       19, 0 ; stars
2345   3867 01 01 FD            .db 1, 1, 253
2346   386A E6 10 12 00         .db $e6, 16,                      18, 0 ; stars
2347   386E 01 01 FD            .db 1, 1, 253
2348   3871 E6 10 20 00         .db $e6, 16,                       " ", 0    ; wipe stars
2349   3875 B8 1A 11 00         .db $b8, 26,                      17, 0 ; stars
2350   3879 01 01 FD            .db 1, 1, 253
2351   387C B8 1A 20 00         .db $b8, 26,                       " ", 0    ; wipe stars
2352   3880 01 01 FD            .db 1, 1, 253
2353   3883 42 04 20 00         .db TOPLINE - 80 - (LINEH*1), 4,   " ", 0    ; wipe stars
2354   3887 E0 07 20 00         .db $e0, 7,                        " ", 0    ; wipe stars
2355   388B 01 01 FD            .db 1, 1, 253
2356   388E 50 14 20 00         .db TOPLINE - 80 - (LINEH*0), 20,  " ", 0    ; wipe stars
2357   3892 01 01 FD            .db 1, 1, 253
2358   3895 26 0A 20 00         .db TOPLINE - 80 - (LINEH*3), 10,  " ", 0    ; wipe stars
2359   3899                     
2360   3899                     ;.db TOPLINE - 80 - (LINEH*0), 0,  "                                ", 0
2361   3899                     ;.db TOPLINE - 80 - (LINEH*0), 0,  "                                ", 0
2362   3899                     ;.db TOPLINE - 80 - (LINEH*0), 0,  "                                ", 0
2363   3899                     ;.db TOPLINE - 80 - (LINEH*1), 0,  "                                ", 0   ; wipe previous
2364   3899                     ;.db TOPLINE - 80 - (LINEH*3), 0,  "                                ", 0
2365   3899 34 00 20 20         .db TOPLINE - 80 - (LINEH*2), 0,  "                                ", 0
2365   389D 20 20 20 20 
2365   38A1 20 20 20 20 
2365   38A5 20 20 20 20 
2365   38A9 20 20 20 20 
2365   38AD 20 20 20 20 
2365   38B1 20 20 20 20 
2365   38B5 20 20 20 20 
2365   38B9 20 20 00 
2366   38BC 01 01 FD            .db 1, 1, 253
2367   38BF 01 01 FD            .db 1, 1, 253
2368   38C2             
2369   38C2 01 01 FF            .db 1, 1, 255
2370   38C5             
2371   38C5                     .ds 32  ; there's a bug with alignment somewhere! (maybe not anymore)
2372   38E5             
2373   38E5 53 56 4F 46 msg_minus1: .db "SVOFSKI & IVAGOR", 0
2373   38E9 53 4B 49 20 
2373   38ED 26 20 49 56 
2373   38F1 41 47 4F 52 
2373   38F5 00 
2374   38F6             
2375   38F6             
2376   3900                     .org 020h + ($ & 0ffe0h)  ; ALIGN 32
2377   3900             zero_init_start:
2378   3900             
2379   3900 00 00       intcount:   .dw 0
2380   3902 00          frametime:  .db 0 ; interrupts between oneframe
2381   3903 00          frame_no:   .db 0
2382   3904 00          anim_pos:   .db 0
2383   3905             
2384   3905             pal_0:
2385   3905 00 00 00 00             .db 0, 0, 0, 0
2386   3909 00 00 00 00             .db 0, 0, 0, 0
2387   390D 00 00 00 00             .db 0, 0, 0, 0
2388   3911 00 00 00 00             .db 0, 0, 0, 0
2389   3915 00 00       pal_a_ptr:  .dw 0
2390   3917 00 00       pal_b_ptr:  .dw 0
2391   3919             pal_fade_a: .ds 16
2392   3929             pal_fade_b: .ds 16
2393   3939             pal_zero_end:
2394   3939             
2395   3939 00          fade_in_flag:       .db 0
2396   393A 00          slowprint_enabled:  .db 0
2397   393B 00          slow_msg_state:     .db 0
2398   393C 00 00       slow_msg_ptr:       .dw 0
2399   393E 00 00       slow_msg_loop:      .dw 0
2400   3940             
2401   3940             ; fish vars
2402   3940             ;fish_wraparound_flag:   .db 0
2403   3940             ;msgseq_end_flag:        .db 0
2404   3940                             ; ORDER IMPORTANT
2405   3940 00          fish_col_frac:    .db 0
2406   3941 00          fish_col:         .db 0
2407   3942 00          fish_enabled:     .db 0
2408   3943             
2409   3943             
2410   3960                     .org 020h + ($ & 0ffe0h)  ; ALIGN 32
2411   3960             zero_init_end:
2412   3960             
2413   3960                     ; big logo
2414   3960                     .include "blksbr.inc"
0001+  3960             ; Opened image graphics/blksbr.png 128x32
0002+  3960             ;                                                                                                                                  
0003+  3960             ;                                                                                                                                  
0004+  3960             ;              111111     1111       11111       111111                    1111111              11111 11111111         1111        
0005+  3960             ;           1112222221   122221     1222221     12222221                  122222221 1111111111112222212222222111      122221       
0006+  3960             ;     1111112222111121   121121     1211121     12111121                 1221111122122222222222221112111111122211    1221121       
0007+  3960             ;    12222222111111121   1211221    1211121     12111121                122111111122121111111111111121211111112221   1211121       
0008+  3960             ;    12111111111121221   1211121    1211121     1211121                1221111111112212111211221121221112222111121   1211121       
0009+  3960             ;    1211211222222221    12111221   1211121    1221121                12212111111112212122122112222221212111221121   1211121       
0010+  3960             ;    121222211111111    122111121   1212121    121121                112122121212122122222222222222212221   1211221  1212121       
0011+  3960             ;    1212121            1211111121  1211121   1221221                12221222222322122221221111111112121    1222321  1221221       
0012+  3960             ;    1222221            1211121221  1211121 11221221      1111      112212211112221222122221     1222221    1232221  1222221       
0013+  3960             ;    1212121           122122221121 121222112212221      122221     1221221    1211222222211     1221221   11222121  121221        
0014+  3960             ;    1222221   1111    122221222221 12221212222211       122221     1212221    111122221221      1212121  112221221  122221        
0015+  3960             ;    1221221  122221   1212121221221122222221121     111111221111   122211      1 121222221 11111122121111221212221  122221        
0016+  3960             ;    1212221 12212221  122222122222122212222221      1222222222221 1222221        122222211122222121222222222222211  122121        
0017+  3960             ;    12222211221212211 212222112212212221212211      1222222222221 1222221        12222121122212221222122121222221   122221        
0018+  3960             ;    122212122222222212221221 121222122222221221    1222222222221  1222221       12222222222222222212222222222221    12221         
0019+  3960             ;    122222221112221212222221  122121122212222221   1222222222221  1222221       1222222222112222221222122222211     12221         
0020+  3960             ;    12222221   1222212222221  1222222122222222221   11112221111   1222221       12222221111122222212222211111       12221         
0021+  3960             ;    1222221    122221222221    1222212222222222221    122221      1222221       12222221   1222222122221            12221         
0022+  3960             ;    1222221    122221222221    12222122222122222221   122221      11222221   11 12222221   1222222122221            12221         
0023+  3960             ;    1222221  11222221222221     12222122221122222221   1111        122222211122112222221   1222222122221            1221          
0024+  3960             ;    1222221112222221222221      122222122211122222221              122222222222112222221 112222222122221             11           
0025+  3960             ;    1222222222222221222221      12222212221  122222221             1122222222222122222211122222221222221                          
0026+  3960             ;    1222222222222212222221       1222221221   122222221             122222222222122222222222222221222221             111          
0027+  3960             ;    122222222222212222221        1222222121    122222221             12222222222212222222222222111222221            12221         
0028+  3960             ;    1222222221111 1222221         122222111     12222221              12222222221122222222222111 1222221           122221         
0029+  3960             ;    1222111111    1112221          1111111       122211                112222221  111111111111   1222221           12221          
0030+  3960             ;     111             111                          111                   1111111                   11111             111           
0031+  3960             ;                                                                                                                                  
0032+  3960             ;                                                                                                                                  
0033+  3960             ;                                                                                                                                  
0034+  3960             harzakc0:
0035+  3960 09 2D 00 00 .db 9, 45 ,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
0035+  3964 00 00 00 00 
0035+  3968 00 00 00 00 
0035+  396C 00 00 00 00 
0036+  3970 09 28 00 00 .db 9, 40 ,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
0036+  3974 00 00 00 00 
0036+  3978 00 00 00 00 
0036+  397C 00 00 00 00 
0036+  3980 00 00 
0037+  3982 08 28 00 0F .db 8, 40 ,$00,$0f,$c1,$e0,$3e,$03,$f0,$00,$00,$fe,$00,$07,$df,$e0,$0f,$00
0037+  3986 C1 E0 3E 03 
0037+  398A F0 00 00 FE 
0037+  398E 00 07 DF E0 
0037+  3992 0F 00 
0038+  3994 08 28 00 70 .db 8, 40 ,$00,$70,$22,$10,$41,$04,$08,$00,$01,$01,$7f,$f8,$20,$38,$10,$80
0038+  3998 22 10 41 04 
0038+  399C 08 00 01 01 
0038+  39A0 7F F8 20 38 
0038+  39A4 10 80 
0039+  39A6 08 28 1F 87 .db 8, 40 ,$1f,$87,$a2,$d0,$5d,$05,$e8,$00,$02,$7c,$80,$03,$bf,$8c,$26,$80
0039+  39AA A2 D0 5D 05 
0039+  39AE E8 00 02 7C 
0039+  39B2 80 03 BF 8C 
0039+  39B6 26 80 
0040+  39B8 08 28 20 3F .db 8, 40 ,$20,$3f,$a2,$c8,$5d,$05,$e8,$00,$04,$fe,$5f,$ff,$af,$e2,$2e,$80
0040+  39BC A2 C8 5D 05 
0040+  39C0 E8 00 04 FE 
0040+  39C4 5F FF AF E2 
0040+  39C8 2E 80 
0041+  39CA 08 28 2F FD .db 8, 40 ,$2f,$fd,$22,$e8,$5d,$05,$d0,$00,$09,$ff,$2e,$cd,$38,$7a,$2e,$80
0041+  39CE 22 E8 5D 05 
0041+  39D2 D0 00 09 FF 
0041+  39D6 2E CD 38 7A 
0041+  39DA 2E 80 
0042+  39DC 08 28 2D 80 .db 8, 40 ,$2d,$80,$42,$e4,$5d,$09,$a0,$00,$12,$ff,$29,$30,$2b,$9a,$2e,$80
0042+  39E0 42 E4 5D 09 
0042+  39E4 A0 00 12 FF 
0042+  39E8 29 30 2B 9A 
0042+  39EC 2E 80 
0043+  39EE 08 28 28 7F .db 8, 40 ,$28,$7f,$84,$f4,$55,$0b,$40,$00,$34,$aa,$40,$00,$44,$59,$2a,$80
0043+  39F2 84 F4 55 0B 
0043+  39F6 40 00 34 AA 
0043+  39FA 40 00 44 59 
0043+  39FE 2A 80 
0044+  3A00 08 28 2A 80 .db 8, 40 ,$2a,$80,$05,$fa,$5d,$12,$40,$00,$22,$04,$84,$ff,$a8,$45,$24,$80
0044+  3A04 05 FA 5D 12 
0044+  3A08 40 00 22 04 
0044+  3A0C 84 FF A8 45 
0044+  3A10 24 80 
0045+  3A12 08 28 20 80 .db 8, 40 ,$20,$80,$05,$d2,$5d,$64,$81,$e0,$64,$f1,$10,$82,$08,$51,$20,$80
0045+  3A16 05 D2 5D 64 
0045+  3A1A 81 E0 64 F1 
0045+  3A1E 10 82 08 51 
0045+  3A22 20 80 
0046+  3A24 08 28 2A 80 .db 8, 40 ,$2a,$80,$09,$0d,$51,$91,$02,$10,$49,$0b,$01,$82,$48,$c5,$29,$00
0046+  3A28 09 0D 51 91 
0046+  3A2C 02 10 49 0B 
0046+  3A30 01 82 48 C5 
0046+  3A34 29 00 
0047+  3A36 08 28 20 8F .db 8, 40 ,$20,$8f,$08,$41,$45,$06,$02,$10,$51,$0f,$09,$02,$a9,$89,$21,$00
0047+  3A3A 08 41 45 06 
0047+  3A3E 02 10 51 0F 
0047+  3A42 09 02 A9 89 
0047+  3A46 21 00 
0048+  3A48 08 28 24 90 .db 8, 40 ,$24,$90,$8a,$a4,$c0,$68,$3f,$3c,$46,$05,$41,$7e,$5e,$51,$21,$00
0048+  3A4C 8A A4 C0 68 
0048+  3A50 3F 3C 46 05 
0048+  3A54 41 7E 5E 51 
0048+  3A58 21 00 
0049+  3A5A 08 28 28 A4 .db 8, 40 ,$28,$a4,$48,$20,$88,$10,$20,$02,$82,$01,$03,$82,$80,$03,$25,$00
0049+  3A5E 48 20 88 10 
0049+  3A62 20 02 82 01 
0049+  3A66 03 82 80 03 
0049+  3A6A 25 00 
0050+  3A6C 08 28 20 CA .db 8, 40 ,$20,$ca,$64,$32,$45,$30,$20,$02,$82,$01,$0b,$11,$12,$82,$21,$00
0050+  3A70 64 32 45 30 
0050+  3A74 20 02 82 01 
0050+  3A78 0B 11 12 82 
0050+  3A7C 21 00 
0051+  3A7E 08 28 22 80 .db 8, 40 ,$22,$80,$22,$54,$40,$48,$40,$04,$82,$02,$00,$00,$80,$04,$22,$00
0051+  3A82 22 54 40 48 
0051+  3A86 40 04 82 02 
0051+  3A8A 00 00 80 04 
0051+  3A8E 22 00 
0052+  3A90 08 28 20 38 .db 8, 40 ,$20,$38,$a0,$49,$62,$04,$40,$04,$82,$02,$00,$c0,$88,$18,$22,$00
0052+  3A94 A0 49 62 04 
0052+  3A98 40 04 82 02 
0052+  3A9C 00 C0 88 18 
0052+  3AA0 22 00 
0053+  3AA2 08 28 20 44 .db 8, 40 ,$20,$44,$20,$48,$10,$02,$3c,$78,$82,$02,$07,$c0,$83,$e0,$22,$00
0053+  3AA6 20 48 10 02 
0053+  3AAA 3C 78 82 02 
0053+  3AAE 07 C0 83 E0 
0053+  3AB2 22 00 
0054+  3AB4 08 28 20 84 .db 8, 40 ,$20,$84,$20,$84,$20,$01,$08,$40,$82,$02,$04,$40,$84,$00,$22,$00
0054+  3AB8 20 84 20 01 
0054+  3ABC 08 40 82 02 
0054+  3AC0 04 40 84 00 
0054+  3AC4 22 00 
0055+  3AC6 08 28 20 84 .db 8, 40 ,$20,$84,$20,$84,$20,$80,$88,$40,$c1,$1a,$04,$40,$84,$00,$22,$00
0055+  3ACA 20 84 20 80 
0055+  3ACE 88 40 C1 1A 
0055+  3AD2 04 40 84 00 
0055+  3AD6 22 00 
0056+  3AD8 08 28 20 98 .db 8, 40 ,$20,$98,$20,$82,$10,$c0,$47,$80,$40,$e6,$04,$40,$84,$00,$24,$00
0056+  3ADC 20 82 10 C0 
0056+  3AE0 47 80 40 E6 
0056+  3AE4 04 40 84 00 
0056+  3AE8 24 00 
0057+  3AEA 08 28 20 E0 .db 8, 40 ,$20,$e0,$41,$02,$08,$e0,$20,$00,$40,$06,$05,$80,$84,$00,$18,$00
0057+  3AEE 41 02 08 E0 
0057+  3AF2 20 00 40 06 
0057+  3AF6 05 80 84 00 
0057+  3AFA 18 00 
0058+  3AFC 08 28 20 00 .db 8, 40 ,$20,$00,$41,$02,$08,$90,$10,$00,$60,$02,$07,$01,$04,$00,$00,$00
0058+  3B00 41 02 08 90 
0058+  3B04 10 00 60 02 
0058+  3B08 07 01 04 00 
0058+  3B0C 00 00 
0059+  3B0E 08 28 20 00 .db 8, 40 ,$20,$00,$81,$01,$04,$88,$08,$00,$20,$02,$00,$01,$04,$00,$1c,$00
0059+  3B12 81 01 04 88 
0059+  3B16 08 00 20 02 
0059+  3B1A 00 01 04 00 
0059+  3B1E 1C 00 
0060+  3B20 08 28 20 01 .db 8, 40 ,$20,$01,$02,$01,$02,$84,$04,$00,$10,$01,$00,$07,$04,$00,$22,$00
0060+  3B24 02 01 02 84 
0060+  3B28 04 00 10 01 
0060+  3B2C 00 07 04 00 
0060+  3B30 22 00 
0061+  3B32 08 28 20 1E .db 8, 40 ,$20,$1e,$82,$00,$83,$82,$04,$00,$08,$03,$00,$1d,$04,$00,$42,$00
0061+  3B36 82 00 83 82 
0061+  3B3A 04 00 08 03 
0061+  3B3E 00 1D 04 00 
0061+  3B42 42 00 
0062+  3B44 08 28 23 F0 .db 8, 40 ,$23,$f0,$e2,$00,$7f,$01,$18,$00,$06,$04,$ff,$f1,$04,$00,$44,$00
0062+  3B48 E2 00 7F 01 
0062+  3B4C 18 00 06 04 
0062+  3B50 FF F1 04 00 
0062+  3B54 44 00 
0063+  3B56 08 28 1C 00 .db 8, 40 ,$1c,$00,$1c,$00,$00,$00,$e0,$00,$03,$f8,$00,$00,$f8,$00,$38,$00
0063+  3B5A 1C 00 00 00 
0063+  3B5E E0 00 03 F8 
0063+  3B62 00 00 F8 00 
0063+  3B66 38 00 
0064+  3B68 08 28 00 00 .db 8, 40 ,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
0064+  3B6C 00 00 00 00 
0064+  3B70 00 00 00 00 
0064+  3B74 00 00 00 00 
0064+  3B78 00 00 
0065+  3B7A 08 28 00 00 .db 8, 40 ,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
0065+  3B7E 00 00 00 00 
0065+  3B82 00 00 00 00 
0065+  3B86 00 00 00 00 
0065+  3B8A 00 00 
0066+  3B8C 18 50       .db 24, 80 
0067+  3B8E FF FF       .db 255, 255 ; end of plane data
0068+  3B90             harzakc1:
0069+  3B90 18 50       .db 24, 80 
0070+  3B92 09 2D 00 00 .db 9, 45 ,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
0070+  3B96 00 00 00 00 
0070+  3B9A 00 00 00 00 
0070+  3B9E 00 00 00 00 
0071+  3BA2 09 2D 00 00 .db 9, 45 ,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
0071+  3BA6 00 00 00 00 
0071+  3BAA 00 00 00 00 
0071+  3BAE 00 00 00 00 
0072+  3BB2 08 28 00 0F .db 8, 40 ,$00,$0f,$c1,$e0,$3e,$03,$f0,$00,$00,$fe,$00,$07,$df,$c0,$0f,$00
0072+  3BB6 C1 E0 3E 03 
0072+  3BBA F0 00 00 FE 
0072+  3BBE 00 07 DF C0 
0072+  3BC2 0F 00 
0073+  3BC4 08 28 00 78 .db 8, 40 ,$00,$78,$41,$20,$22,$02,$10,$00,$01,$83,$7f,$fc,$40,$70,$19,$00
0073+  3BC8 41 20 22 02 
0073+  3BCC 10 00 01 83 
0073+  3BD0 7F FC 40 70 
0073+  3BD4 19 00 
0074+  3BD6 08 28 1F C0 .db 8, 40 ,$1f,$c0,$41,$30,$22,$02,$10,$00,$03,$01,$a0,$00,$50,$1c,$11,$00
0074+  3BDA 41 30 22 02 
0074+  3BDE 10 00 03 01 
0074+  3BE2 A0 00 50 1C 
0074+  3BE6 11 00 
0075+  3BE8 08 28 10 02 .db 8, 40 ,$10,$02,$c1,$10,$22,$02,$20,$00,$06,$00,$d1,$32,$c7,$84,$11,$00
0075+  3BEC C1 10 22 02 
0075+  3BF0 20 00 06 00 
0075+  3BF4 D1 32 C7 84 
0075+  3BF8 11 00 
0076+  3BFA 08 28 12 7F .db 8, 40 ,$12,$7f,$81,$18,$22,$06,$40,$00,$0d,$00,$d6,$cf,$d4,$64,$11,$00
0076+  3BFE 81 18 22 06 
0076+  3C02 40 00 0D 00 
0076+  3C06 D6 CF D4 64 
0076+  3C0A 11 00 
0077+  3C0C 08 28 17 80 .db 8, 40 ,$17,$80,$03,$08,$2a,$04,$80,$00,$0b,$55,$bf,$ff,$b8,$26,$15,$00
0077+  3C10 03 08 2A 04 
0077+  3C14 80 00 0B 55 
0077+  3C18 BF FF B8 26 
0077+  3C1C 15 00 
0078+  3C1E 08 28 15 00 .db 8, 40 ,$15,$00,$02,$04,$22,$0d,$80,$00,$1d,$ff,$7b,$00,$50,$3e,$1b,$00
0078+  3C22 02 04 22 0D 
0078+  3C26 80 00 1D FF 
0078+  3C2A 7B 00 50 3E 
0078+  3C2E 1B 00 
0079+  3C30 08 28 1F 00 .db 8, 40 ,$1f,$00,$02,$2c,$22,$1b,$00,$00,$1b,$0e,$ef,$01,$f0,$3e,$1f,$00
0079+  3C34 02 2C 22 1B 
0079+  3C38 00 00 1B 0E 
0079+  3C3C EF 01 F0 3E 
0079+  3C40 1F 00 
0080+  3C42 08 28 15 00 .db 8, 40 ,$15,$00,$06,$f2,$2e,$6e,$01,$e0,$36,$04,$fe,$01,$b0,$3a,$16,$00
0080+  3C46 06 F2 2E 6E 
0080+  3C4A 01 E0 36 04 
0080+  3C4E FE 01 B0 3A 
0080+  3C52 16 00 
0081+  3C54 08 28 1F 00 .db 8, 40 ,$1f,$00,$07,$be,$3a,$f8,$01,$e0,$2e,$00,$f6,$01,$50,$76,$1e,$00
0081+  3C58 07 BE 3A F8 
0081+  3C5C 01 E0 2E 00 
0081+  3C60 F6 01 50 76 
0081+  3C64 1E 00 
0082+  3C66 08 28 1B 0F .db 8, 40 ,$1b,$0f,$05,$5b,$3f,$90,$00,$c0,$38,$00,$be,$01,$a1,$ae,$1e,$00
0082+  3C6A 05 5B 3F 90 
0082+  3C6E 00 C0 38 00 
0082+  3C72 BE 01 A1 AE 
0082+  3C76 1E 00 
0083+  3C78 08 28 17 1B .db 8, 40 ,$17,$1b,$87,$df,$77,$e0,$1f,$fc,$7c,$00,$fc,$7d,$7f,$fc,$1a,$00
0083+  3C7C 87 DF 77 E0 
0083+  3C80 1F FC 7C 00 
0083+  3C84 FC 7D 7F FC 
0083+  3C88 1A 00 
0084+  3C8A 08 28 1F 35 .db 8, 40 ,$1f,$35,$8b,$cd,$ba,$c0,$1f,$fc,$7c,$00,$f4,$ee,$ed,$7c,$1e,$00
0084+  3C8E 8B CD BA C0 
0084+  3C92 1F FC 7C 00 
0084+  3C96 F4 EE ED 7C 
0084+  3C9A 1E 00 
0085+  3C9C 08 28 1D 7F .db 8, 40 ,$1d,$7f,$dd,$8b,$bf,$b0,$3f,$f8,$7c,$01,$ff,$ff,$7f,$f8,$1c,$00
0085+  3CA0 DD 8B BF B0 
0085+  3CA4 3F F8 7C 01 
0085+  3CA8 FF FF 7F F8 
0085+  3CAC 1C 00 
0086+  3CAE 08 28 1F C7 .db 8, 40 ,$1f,$c7,$5f,$86,$9d,$f8,$3f,$f8,$7c,$01,$ff,$3f,$77,$e0,$1c,$00
0086+  3CB2 5F 86 9D F8 
0086+  3CB6 3F F8 7C 01 
0086+  3CBA FF 3F 77 E0 
0086+  3CBE 1C 00 
0087+  3CC0 08 28 1F 83 .db 8, 40 ,$1f,$83,$df,$87,$ef,$fc,$03,$80,$7c,$01,$f8,$3f,$7c,$00,$1c,$00
0087+  3CC4 DF 87 EF FC 
0087+  3CC8 03 80 7C 01 
0087+  3CCC F8 3F 7C 00 
0087+  3CD0 1C 00 
0088+  3CD2 08 28 1F 03 .db 8, 40 ,$1f,$03,$df,$03,$df,$fe,$07,$80,$7c,$01,$f8,$3f,$78,$00,$1c,$00
0088+  3CD6 DF 03 DF FE 
0088+  3CDA 07 80 7C 01 
0088+  3CDE F8 3F 78 00 
0088+  3CE2 1C 00 
0089+  3CE4 08 28 1F 03 .db 8, 40 ,$1f,$03,$df,$03,$df,$7f,$07,$80,$3e,$01,$f8,$3f,$78,$00,$1c,$00
0089+  3CE8 DF 03 DF 7F 
0089+  3CEC 07 80 3E 01 
0089+  3CF0 F8 3F 78 00 
0089+  3CF4 1C 00 
0090+  3CF6 08 28 1F 07 .db 8, 40 ,$1f,$07,$df,$01,$ef,$3f,$80,$00,$3f,$19,$f8,$3f,$78,$00,$18,$00
0090+  3CFA DF 01 EF 3F 
0090+  3CFE 80 00 3F 19 
0090+  3D02 F8 3F 78 00 
0090+  3D06 18 00 
0091+  3D08 08 28 1F 1F .db 8, 40 ,$1f,$1f,$be,$01,$f7,$1f,$c0,$00,$3f,$f9,$f8,$7f,$78,$00,$00,$00
0091+  3D0C BE 01 F7 1F 
0091+  3D10 C0 00 3F F9 
0091+  3D14 F8 7F 78 00 
0091+  3D18 00 00 
0092+  3D1A 08 28 1F FF .db 8, 40 ,$1f,$ff,$be,$01,$f7,$0f,$e0,$00,$1f,$fd,$f8,$fe,$f8,$00,$00,$00
0092+  3D1E BE 01 F7 0F 
0092+  3D22 E0 00 1F FD 
0092+  3D26 F8 FE F8 00 
0092+  3D2A 00 00 
0093+  3D2C 08 28 1F FF .db 8, 40 ,$1f,$ff,$7e,$00,$fb,$07,$f0,$00,$1f,$fd,$ff,$fe,$f8,$00,$00,$00
0093+  3D30 7E 00 FB 07 
0093+  3D34 F0 00 1F FD 
0093+  3D38 FF FE F8 00 
0093+  3D3C 00 00 
0094+  3D3E 08 28 1F FE .db 8, 40 ,$1f,$fe,$fc,$00,$fd,$03,$f8,$00,$0f,$fe,$ff,$f8,$f8,$00,$1c,$00
0094+  3D42 FC 00 FD 03 
0094+  3D46 F8 00 0F FE 
0094+  3D4A FF F8 F8 00 
0094+  3D4E 1C 00 
0095+  3D50 08 28 1F E0 .db 8, 40 ,$1f,$e0,$7c,$00,$7c,$01,$f8,$00,$07,$fc,$ff,$e0,$f8,$00,$3c,$00
0095+  3D54 7C 00 7C 01 
0095+  3D58 F8 00 07 FC 
0095+  3D5C FF E0 F8 00 
0095+  3D60 3C 00 
0096+  3D62 08 28 1C 00 .db 8, 40 ,$1c,$00,$1c,$00,$00,$00,$e0,$00,$01,$f8,$00,$00,$f8,$00,$38,$00
0096+  3D66 1C 00 00 00 
0096+  3D6A E0 00 01 F8 
0096+  3D6E 00 00 F8 00 
0096+  3D72 38 00 
0097+  3D74 08 28 00 00 .db 8, 40 ,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
0097+  3D78 00 00 00 00 
0097+  3D7C 00 00 00 00 
0097+  3D80 00 00 00 00 
0097+  3D84 00 00 
0098+  3D86 08 28 00 00 .db 8, 40 ,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
0098+  3D8A 00 00 00 00 
0098+  3D8E 00 00 00 00 
0098+  3D92 00 00 00 00 
0098+  3D96 00 00 
0099+  3D98 18 50       .db 24, 80 
0100+  3D9A 18 50       .db 24, 80 
0101+  3D9C FF FF       .db 255, 255 ; end of plane data
2415   3D9E             
2416   3D9E                     ; big time textuality
2417   3D9E                     .include "font8x8.inc"
0001+  3D9E                 ; —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø–æ–∑–∏—Ü–∏—é –¥–ª—è –≤—ã–≤–æ–¥–∞ —Å–ª–µ–¥—É—é—â–µ–≥–æ —Å–∏–º–≤–æ–ª–∞
0002+  3D9E                 ; H = —Å—Ç–æ–ª–±–µ—Ü, L = —Å—Ç—Ä–æ–∫–∞ ($F8 = –≤–µ—Ä—Ö–Ω—è—è)
0003+  3D9E             gotoxy:
0004+  3D9E 22 D4 3D        shld _puts_de
0005+  3DA1 C9              ret
0006+  3DA2             
0007+  3DA2             wipestr:
0008+  3DA2 F5              push psw
0009+  3DA3 E5              push h
0010+  3DA4                 ; —Å—Ç–µ—Ä–µ—Ç—å —Å—Ç—Ä–æ–∫—É –ø–æ–ª–Ω–æ—Å—Ç—å—é
0011+  3DA4 3A 08 3E        lda _putchar_msb
0012+  3DA7 67              mov h, a
0013+  3DA8 3A D4 3D        lda _puts_de
0014+  3DAB 6F              mov l, a
0015+  3DAC             
0016+  3DAC 0E 20           mvi c, 32
0017+  3DAE 45              mov b, l
0018+  3DAF AF              xra a
0019+  3DB0             
0020+  3DB0             wipestr_l1:
0021+  3DB0 77              mov m, a \ dcr l \ mov m, a \ dcr l \ mov m, a \ dcr l \ mov m, a \ dcr l 
0021+  3DB1 2D          
0021+  3DB2 77          
0021+  3DB3 2D          
0021+  3DB4 77          
0021+  3DB5 2D          
0021+  3DB6 77          
0021+  3DB7 2D          
0022+  3DB8 77              mov m, a \ dcr l \ mov m, a \ dcr l \ mov m, a \ dcr l \ mov m, a
0022+  3DB9 2D          
0022+  3DBA 77          
0022+  3DBB 2D          
0022+  3DBC 77          
0022+  3DBD 2D          
0022+  3DBE 77          
0023+  3DBF 68              mov l, b
0024+  3DC0 24              inr h
0025+  3DC1 0D              dcr c
0026+  3DC2 C2 B0 3D        jnz wipestr_l1
0027+  3DC5             
0028+  3DC5 E1              pop h
0029+  3DC6 F1              pop psw
0030+  3DC7 C9              ret
0031+  3DC8             
0032+  3DC8                 ; –í—ã–≤–µ—Å—Ç–∏ 0-—Ç–µ—Ä–º–∏–Ω–∏—Ä–æ–≤–∞–Ω—É—é —Å—Ç—Ä–æ–∫—É –≤ HL –Ω–∞ —ç–∫—Ä–∞–Ω
0033+  3DC8             puts:
0034+  3DC8 22 D2 3D        shld _puts_sptr
0035+  3DCB             _puts_1:
0036+  3DCB CD D6 3D        call _putchar
0037+  3DCE C2 CB 3D        jnz _puts_1
0038+  3DD1 C9              ret
0039+  3DD2             
0040+  3DD2 00 00       _puts_sptr:   .dw 0
0041+  3DD4 00 00       _puts_de:     .dw 0
0042+  3DD6             
0043+  3DD6                 ; –ù–∞—Ä–∏—Å–æ–≤–∞—Ç—å –æ–¥–∏–Ω —Å–∏–º–≤–æ–ª
0044+  3DD6             _putchar:
0045+  3DD6 2A D2 3D        lhld _puts_sptr
0046+  3DD9 7E              mov a, m
0047+  3DDA B7              ora a
0048+  3DDB C8              rz
0049+  3DDC 4F              mov c, a
0050+  3DDD 23              inx h
0051+  3DDE 22 D2 3D        shld _puts_sptr
0052+  3DE1 EB              xchg
0053+  3DE2 2A D4 3D        lhld _puts_de
0054+  3DE5 24              inr h
0055+  3DE6 22 D4 3D        shld _puts_de
0056+  3DE9 25              dcr h
0057+  3DEA EB              xchg
0058+  3DEB             _putchar_c:
0059+  3DEB F3              di
0060+  3DEC 21 00 00        lxi h,0
0061+  3DEF 39              dad sp
0062+  3DF0 22 1F 3E        shld _pch_sp+1
0063+  3DF3             
0064+  3DF3                 ; –ù–∞–π—Ç–∏ –∞–¥—Ä–µ—Å —Å–ø—Ä–∞–π—Ç–∞ —Å–∏–º–≤–æ–ª–∞
0065+  3DF3                 ; bc = (c-32)*8
0066+  3DF3 79              mov a,c
0067+  3DF4                 ;sui 32
0068+  3DF4                 ;mov c, a
0069+  3DF4 07              rlc
0070+  3DF5 07              rlc
0071+  3DF6 07              rlc
0072+  3DF7 E6 07           ani 7
0073+  3DF9 47              mov b,a
0074+  3DFA 79              mov a,c
0075+  3DFB 07              rlc
0076+  3DFC 07              rlc
0077+  3DFD 07              rlc
0078+  3DFE E6 F8           ani $f8
0079+  3E00 4F              mov c,a
0080+  3E01 21 23 3E        lxi h, _font_table
0081+  3E04 09              dad b
0082+  3E05 F9              sphl        ; sp -> char
0083+  3E06             
0084+  3E06             _putchar_msb .equ $+2
0085+  3E06 21 00 A0        lxi h, $a000
0086+  3E09 19              dad d        ; hl -> destination
0087+  3E0A             
0088+  3E0A                 ; –í—ã–¥–∞–≤–∏—Ç—å –±–∏—Ç—ã –Ω–∞ —ç–∫—Ä–∞–Ω
0089+  3E0A C1              pop b\ mov m, c\ dcr l\ mov m, b\ dcr l
0089+  3E0B 71          
0089+  3E0C 2D          
0089+  3E0D 70          
0089+  3E0E 2D          
0090+  3E0F C1              pop b\ mov m, c\ dcr l\ mov m, b\ dcr l
0090+  3E10 71          
0090+  3E11 2D          
0090+  3E12 70          
0090+  3E13 2D          
0091+  3E14 C1              pop b\ mov m, c\ dcr l\ mov m, b\ dcr l
0091+  3E15 71          
0091+  3E16 2D          
0091+  3E17 70          
0091+  3E18 2D          
0092+  3E19 C1              pop b\ mov m, c\ dcr l\ mov m, b\ dcr l
0092+  3E1A 71          
0092+  3E1B 2D          
0092+  3E1C 70          
0092+  3E1D 2D          
0093+  3E1E             
0094+  3E1E             _pch_sp:
0095+  3E1E 31 00 00        lxi sp, 0
0096+  3E21 FB              ei
0097+  3E22 C9              ret
0098+  3E23             
0099+  3E23             _font_table:
0100+  3E23                 .include "readable.inc"
0001++ 3E23 00 00 00 00 .db $00, $00, $00, $00, $00, $00, $10, $00,
0001++ 3E27 00 00 10 00 
0002++ 3E2B 7E 81 A5 81 .db $7e, $81, $a5, $81, $9d, $b9, $81, $7e,
0002++ 3E2F 9D B9 81 7E 
0003++ 3E33 7E FF DB FF .db $7e, $ff, $db, $ff, $e3, $c7, $ff, $7e,
0003++ 3E37 E3 C7 FF 7E 
0004++ 3E3B 6C FE FE FE .db $6c, $fe, $fe, $fe, $7c, $38, $10, $00,
0004++ 3E3F 7C 38 10 00 
0005++ 3E43 10 38 7C FE .db $10, $38, $7c, $fe, $7c, $38, $10, $00,
0005++ 3E47 7C 38 10 00 
0006++ 3E4B 38 7C 38 FE .db $38, $7c, $38, $fe, $fe, $10, $10, $7c,
0006++ 3E4F FE 10 10 7C 
0007++ 3E53 00 18 3C 7E .db $00, $18, $3c, $7e, $ff, $7e, $18, $7e,
0007++ 3E57 FF 7E 18 7E 
0008++ 3E5B 00 00 18 3C .db $00, $00, $18, $3c, $3c, $18, $00, $00,
0008++ 3E5F 3C 18 00 00 
0009++ 3E63 FF FF E7 C3 .db $ff, $ff, $e7, $c3, $c3, $e7, $ff, $ff,
0009++ 3E67 C3 E7 FF FF 
0010++ 3E6B 00 3C 66 42 .db $00, $3c, $66, $42, $42, $66, $3c, $00,
0010++ 3E6F 42 66 3C 00 
0011++ 3E73 FF C3 99 BD .db $ff, $c3, $99, $bd, $bd, $99, $c3, $ff,
0011++ 3E77 BD 99 C3 FF 
0012++ 3E7B 0F 07 0F 7D .db $0f, $07, $0f, $7d, $cc, $cc, $cc, $78,
0012++ 3E7F CC CC CC 78 
0013++ 3E83 3C 66 66 66 .db $3c, $66, $66, $66, $3c, $18, $7e, $18,
0013++ 3E87 3C 18 7E 18 
0014++ 3E8B 3F 33 3F 30 .db $3f, $33, $3f, $30, $30, $70, $f0, $e0,
0014++ 3E8F 30 70 F0 E0 
0015++ 3E93 7F 63 7F 63 .db $7f, $63, $7f, $63, $63, $67, $e6, $c0,
0015++ 3E97 63 67 E6 C0 
0016++ 3E9B 99 5A 3C E7 .db $99, $5a, $3c, $e7, $e7, $3c, $5a, $99,
0016++ 3E9F E7 3C 5A 99 
0017++ 3EA3 80 E0 F8 FE .db $80, $e0, $f8, $fe, $f8, $e0, $80, $00,
0017++ 3EA7 F8 E0 80 00 
0018++ 3EAB             ;.db $02, $0e, $3e, $fe, $3e, $0e, $02, $00,
0019++ 3EAB 04          .db 00000100b     ; dec 17, star leaning right
0020++ 3EAC 6C          .db 01101100b     
0021++ 3EAD 3C          .db 00111100b
0022++ 3EAE 1F          .db 00011111b
0023++ 3EAF 3C          .db 00111100b
0024++ 3EB0 6C          .db 01101100b
0025++ 3EB1 04          .db 00000100b
0026++ 3EB2 04          .db 00000100b
0027++ 3EB3             ;.db $18, $3c, $7e, $18, $18, $7e, $3c, $18,  dec 18
0028++ 3EB3 10          .db 00010000b     ; dec 18, star middle
0029++ 3EB4 10          .db 00010000b
0030++ 3EB5 FE          .db 11111110b
0031++ 3EB6 7C          .db 01111100b
0032++ 3EB7 3C          .db 00111100b
0033++ 3EB8 6C          .db 01101100b
0034++ 3EB9 44          .db 01000100b
0035++ 3EBA 00          .db 00000000b
0036++ 3EBB             ;.db $66, $66, $66, $66, $66, $00, $66, $00, decimal 19
0037++ 3EBB 20          .db 00100000b     ; dec 19, star leaning left
0038++ 3EBC 36          .db 00110110b
0039++ 3EBD 3C          .db 00111100b
0040++ 3EBE F8          .db 11111000b
0041++ 3EBF 3C          .db 00111100b
0042++ 3EC0 36          .db 00110110b
0043++ 3EC1 20          .db 00100000b
0044++ 3EC2 20          .db 00100000b
0045++ 3EC3             ; _xxxxxx ≈í
0046++ 3EC3             ; xx xx  
0047++ 3EC3             ; xx xx
0048++ 3EC3             ; xx xxx
0049++ 3EC3             ; xx xx
0050++ 3EC3             ; xx xx
0051++ 3EC3             ;  xx xxx
0052++ 3EC3             ;.db $7f, $db, $db, $7b, $1b, $1b, $1b, $00, ;; –ü–´
0053++ 3EC3             ;.db $6e, $d8, $d8, $de, $d8, $d8, $6e, $00 ; -- OE
0054++ 3EC3             
0055++ 3EC3             
0056++ 3EC3             ; xx..xx..
0057++ 3EC3             ; xx..xx..
0058++ 3EC3             ; xx..xx..
0059++ 3EC3             ; xx..xx..
0060++ 3EC3             ; xx..xx..
0061++ 3EC3             ; xx..xx..
0062++ 3EC3             ; xxxxxxx.
0063++ 3EC3             ; .....xx.
0064++ 3EC3 CC CC CC CC .db $cc, $cc, $cc, $cc, $cc, $cc, $fe, $06    ; decimal 20
0064++ 3EC7 CC CC FE 06 
0065++ 3ECB 3F 60 7C 66 .db $3f, $60, $7c, $66, $66, $3e, $06, $fc,
0065++ 3ECF 66 3E 06 FC 
0066++ 3ED3 00 00 00 00 .db $00, $00, $00, $00, $7e, $7e, $7e, $00,
0066++ 3ED7 7E 7E 7E 00 
0067++ 3EDB 18 3C 7E 18 .db $18, $3c, $7e, $18, $7e, $3c, $18, $ff,
0067++ 3EDF 7E 3C 18 FF 
0068++ 3EE3 18 3C 7E 18 .db $18, $3c, $7e, $18, $18, $18, $18, $00,
0068++ 3EE7 18 18 18 00 
0069++ 3EEB 18 18 18 18 .db $18, $18, $18, $18, $7e, $3c, $18, $00,
0069++ 3EEF 7E 3C 18 00 
0070++ 3EF3 00 18 0C FE .db $00, $18, $0c, $fe, $0c, $18, $00, $00,
0070++ 3EF7 0C 18 00 00 
0071++ 3EFB 00 30 60 FE .db $00, $30, $60, $fe, $60, $30, $00, $00,
0071++ 3EFF 60 30 00 00 
0072++ 3F03 00 00 C0 C0 .db $00, $00, $c0, $c0, $c0, $fe, $00, $00,
0072++ 3F07 C0 FE 00 00 
0073++ 3F0B 00 24 66 FF .db $00, $24, $66, $ff, $66, $24, $00, $00,
0073++ 3F0F 66 24 00 00 
0074++ 3F13 00 18 3C 7E .db $00, $18, $3c, $7e, $ff, $ff, $00, $00,
0074++ 3F17 FF FF 00 00 
0075++ 3F1B 00 FF FF 7E .db $00, $ff, $ff, $7e, $3c, $18, $00, $00,
0075++ 3F1F 3C 18 00 00 
0076++ 3F23 00 00 00 00 .db $00, $00, $00, $00, $00, $00, $00, $00,
0076++ 3F27 00 00 00 00 
0077++ 3F2B 18 18 18 18 .db $18, $18, $18, $18, $18, $00, $18, $00,
0077++ 3F2F 18 00 18 00 
0078++ 3F33 6C 6C 6C 00 .db $6c, $6c, $6c, $00, $00, $00, $00, $00,
0078++ 3F37 00 00 00 00 
0079++ 3F3B 6C 6C FE 6C .db $6c, $6c, $fe, $6c, $fe, $6c, $6c, $00,
0079++ 3F3F FE 6C 6C 00 
0080++ 3F43 18 7E C0 7C .db $18, $7e, $c0, $7c, $06, $fc, $18, $00,
0080++ 3F47 06 FC 18 00 
0081++ 3F4B 00 C6 CC 18 .db $00, $c6, $cc, $18, $30, $66, $c6, $00,
0081++ 3F4F 30 66 C6 00 
0082++ 3F53 38 6C 38 76 .db $38, $6c, $38, $76, $dc, $cc, $76, $00,
0082++ 3F57 DC CC 76 00 
0083++ 3F5B 30 30 60 00 .db $30, $30, $60, $00, $00, $00, $00, $00,
0083++ 3F5F 00 00 00 00 
0084++ 3F63 0C 18 30 30 .db $0c, $18, $30, $30, $30, $18, $0c, $00,
0084++ 3F67 30 18 0C 00 
0085++ 3F6B 30 18 0C 0C .db $30, $18, $0c, $0c, $0c, $18, $30, $00,
0085++ 3F6F 0C 18 30 00 
0086++ 3F73 00 66 3C FF .db $00, $66, $3c, $ff, $3c, $66, $00, $00,
0086++ 3F77 3C 66 00 00 
0087++ 3F7B 00 18 18 7E .db $00, $18, $18, $7e, $18, $18, $00, $00,
0087++ 3F7F 18 18 00 00 
0088++ 3F83 00 00 00 00 .db $00, $00, $00, $00, $00, $18, $18, $30,
0088++ 3F87 00 18 18 30 
0089++ 3F8B 00 00 00 7E .db $00, $00, $00, $7e, $00, $00, $00, $00,
0089++ 3F8F 00 00 00 00 
0090++ 3F93 00 00 00 00 .db $00, $00, $00, $00, $00, $18, $18, $00,
0090++ 3F97 00 18 18 00 
0091++ 3F9B 06 0C 18 30 .db $06, $0c, $18, $30, $60, $c0, $80, $00,
0091++ 3F9F 60 C0 80 00 
0092++ 3FA3 7C CE DE F6 .db $7c, $ce, $de, $f6, $e6, $c6, $7c, $00,
0092++ 3FA7 E6 C6 7C 00 
0093++ 3FAB 18 38 18 18 .db $18, $38, $18, $18, $18, $18, $7e, $00,
0093++ 3FAF 18 18 7E 00 
0094++ 3FB3 7C C6 06 7C .db $7c, $c6, $06, $7c, $c0, $c0, $fe, $00,
0094++ 3FB7 C0 C0 FE 00 
0095++ 3FBB FC 06 06 3C .db $fc, $06, $06, $3c, $06, $06, $fc, $00,
0095++ 3FBF 06 06 FC 00 
0096++ 3FC3 0C CC CC CC .db $0c, $cc, $cc, $cc, $fe, $0c, $0c, $00,
0096++ 3FC7 FE 0C 0C 00 
0097++ 3FCB FE C0 FC 06 .db $fe, $c0, $fc, $06, $06, $c6, $7c, $00,
0097++ 3FCF 06 C6 7C 00 
0098++ 3FD3 7C C0 C0 FC .db $7c, $c0, $c0, $fc, $c6, $c6, $7c, $00,
0098++ 3FD7 C6 C6 7C 00 
0099++ 3FDB FE 06 06 0C .db $fe, $06, $06, $0c, $18, $30, $30, $00,
0099++ 3FDF 18 30 30 00 
0100++ 3FE3 7C C6 C6 7C .db $7c, $c6, $c6, $7c, $c6, $c6, $7c, $00,
0100++ 3FE7 C6 C6 7C 00 
0101++ 3FEB 7C C6 C6 7E .db $7c, $c6, $c6, $7e, $06, $06, $7c, $00,
0101++ 3FEF 06 06 7C 00 
0102++ 3FF3 00 18 18 00 .db $00, $18, $18, $00, $00, $18, $18, $00,
0102++ 3FF7 00 18 18 00 
0103++ 3FFB 00 18 18 00 .db $00, $18, $18, $00, $00, $18, $18, $30,
0103++ 3FFF 00 18 18 30 
0104++ 4003 0C 18 30 60 .db $0c, $18, $30, $60, $30, $18, $0c, $00,
0104++ 4007 30 18 0C 00 
0105++ 400B 00 00 7E 00 .db $00, $00, $7e, $00, $7e, $00, $00, $00,
0105++ 400F 7E 00 00 00 
0106++ 4013 30 18 0C 06 .db $30, $18, $0c, $06, $0c, $18, $30, $00,
0106++ 4017 0C 18 30 00 
0107++ 401B 3C 66 0C 18 .db $3c, $66, $0c, $18, $18, $00, $18, $00,
0107++ 401F 18 00 18 00 
0108++ 4023 7C C6 DE DE .db $7c, $c6, $de, $de, $de, $c0, $7e, $00,
0108++ 4027 DE C0 7E 00 
0109++ 402B 38 6C C6 C6 .db $38, $6c, $c6, $c6, $fe, $c6, $c6, $00,
0109++ 402F FE C6 C6 00 
0110++ 4033 FC C6 C6 FC .db $fc, $c6, $c6, $fc, $c6, $c6, $fc, $00,
0110++ 4037 C6 C6 FC 00 
0111++ 403B 7C C6 C0 C0 .db $7c, $c6, $c0, $c0, $c0, $c6, $7c, $00,
0111++ 403F C0 C6 7C 00 
0112++ 4043 F8 CC C6 C6 .db $f8, $cc, $c6, $c6, $c6, $cc, $f8, $00,
0112++ 4047 C6 CC F8 00 
0113++ 404B FE C0 C0 F8 .db $fe, $c0, $c0, $f8, $c0, $c0, $fe, $00,
0113++ 404F C0 C0 FE 00 
0114++ 4053 FE C0 C0 F8 .db $fe, $c0, $c0, $f8, $c0, $c0, $c0, $00,
0114++ 4057 C0 C0 C0 00 
0115++ 405B 7C C6 C0 C0 .db $7c, $c6, $c0, $c0, $ce, $c6, $7c, $00,
0115++ 405F CE C6 7C 00 
0116++ 4063 C6 C6 C6 FE .db $c6, $c6, $c6, $fe, $c6, $c6, $c6, $00,
0116++ 4067 C6 C6 C6 00 
0117++ 406B 7E 18 18 18 .db $7e, $18, $18, $18, $18, $18, $7e, $00,
0117++ 406F 18 18 7E 00 
0118++ 4073 06 06 06 06 .db $06, $06, $06, $06, $06, $c6, $7c, $00,
0118++ 4077 06 C6 7C 00 
0119++ 407B C6 CC D8 F0 .db $c6, $cc, $d8, $f0, $d8, $cc, $c6, $00,
0119++ 407F D8 CC C6 00 
0120++ 4083 C0 C0 C0 C0 .db $c0, $c0, $c0, $c0, $c0, $c0, $fe, $00,
0120++ 4087 C0 C0 FE 00 
0121++ 408B C6 EE FE FE .db $c6, $ee, $fe, $fe, $d6, $c6, $c6, $00,
0121++ 408F D6 C6 C6 00 
0122++ 4093 C6 E6 F6 DE .db $c6, $e6, $f6, $de, $ce, $c6, $c6, $00,
0122++ 4097 CE C6 C6 00 
0123++ 409B 7C C6 C6 C6 .db $7c, $c6, $c6, $c6, $c6, $c6, $7c, $00,
0123++ 409F C6 C6 7C 00 
0124++ 40A3 FC C6 C6 FC .db $fc, $c6, $c6, $fc, $c0, $c0, $c0, $00,
0124++ 40A7 C0 C0 C0 00 
0125++ 40AB 7C C6 C6 C6 .db $7c, $c6, $c6, $c6, $d6, $de, $7c, $06,
0125++ 40AF D6 DE 7C 06 
0126++ 40B3 FC C6 C6 FC .db $fc, $c6, $c6, $fc, $d8, $cc, $c6, $00,
0126++ 40B7 D8 CC C6 00 
0127++ 40BB 7C C6 C0 7C .db $7c, $c6, $c0, $7c, $06, $c6, $7c, $00,
0127++ 40BF 06 C6 7C 00 
0128++ 40C3 FF 18 18 18 .db $ff, $18, $18, $18, $18, $18, $18, $00,
0128++ 40C7 18 18 18 00 
0129++ 40CB C6 C6 C6 C6 .db $c6, $c6, $c6, $c6, $c6, $c6, $fe, $00,
0129++ 40CF C6 C6 FE 00 
0130++ 40D3 C6 C6 C6 C6 .db $c6, $c6, $c6, $c6, $c6, $7c, $38, $00,
0130++ 40D7 C6 7C 38 00 
0131++ 40DB C6 C6 C6 C6 .db $c6, $c6, $c6, $c6, $d6, $fe, $6c, $00,
0131++ 40DF D6 FE 6C 00 
0132++ 40E3 C6 C6 6C 38 .db $c6, $c6, $6c, $38, $6c, $c6, $c6, $00,
0132++ 40E7 6C C6 C6 00 
0133++ 40EB C6 C6 C6 7C .db $c6, $c6, $c6, $7c, $18, $30, $e0, $00,
0133++ 40EF 18 30 E0 00 
0134++ 40F3 FE 06 0C 18 .db $fe, $06, $0c, $18, $30, $60, $fe, $00,
0134++ 40F7 30 60 FE 00 
0135++ 40FB 3C 30 30 30 .db $3c, $30, $30, $30, $30, $30, $3c, $00,
0135++ 40FF 30 30 3C 00 
0136++ 4103 C0 60 30 18 .db $c0, $60, $30, $18, $0c, $06, $02, $00,
0136++ 4107 0C 06 02 00 
0137++ 410B 3C 0C 0C 0C .db $3c, $0c, $0c, $0c, $0c, $0c, $3c, $00,
0137++ 410F 0C 0C 3C 00 
0138++ 4113 10 38 6C C6 .db $10, $38, $6c, $c6, $00, $00, $00, $00,
0138++ 4117 00 00 00 00 
0139++ 411B 00 00 00 00 .db $00, $00, $00, $00, $00, $00, $00, $ff,
0139++ 411F 00 00 00 FF 
0140++ 4123 18 18 0C 00 .db $18, $18, $0c, $00, $00, $00, $00, $00,
0140++ 4127 00 00 00 00 
0141++ 412B 00 00 7C 06 .db $00, $00, $7c, $06, $7e, $c6, $7e, $00,
0141++ 412F 7E C6 7E 00 
0142++ 4133 C0 C0 C0 FC .db $c0, $c0, $c0, $fc, $c6, $c6, $fc, $00,
0142++ 4137 C6 C6 FC 00 
0143++ 413B 00 00 7C C6 .db $00, $00, $7c, $c6, $c0, $c6, $7c, $00,
0143++ 413F C0 C6 7C 00 
0144++ 4143 06 06 06 7E .db $06, $06, $06, $7e, $c6, $c6, $7e, $00,
0144++ 4147 C6 C6 7E 00 
0145++ 414B 00 00 7C C6 .db $00, $00, $7c, $c6, $fe, $c0, $7c, $00,
0145++ 414F FE C0 7C 00 
0146++ 4153 1C 36 30 78 .db $1c, $36, $30, $78, $30, $30, $78, $00,
0146++ 4157 30 30 78 00 
0147++ 415B 00 00 7E C6 .db $00, $00, $7e, $c6, $c6, $7e, $06, $fc,
0147++ 415F C6 7E 06 FC 
0148++ 4163 C0 C0 FC C6 .db $c0, $c0, $fc, $c6, $c6, $c6, $c6, $00,
0148++ 4167 C6 C6 C6 00 
0149++ 416B 18 00 38 18 .db $18, $00, $38, $18, $18, $18, $3c, $00,
0149++ 416F 18 18 3C 00 
0150++ 4173 06 00 06 06 .db $06, $00, $06, $06, $06, $06, $c6, $7c,
0150++ 4177 06 06 C6 7C 
0151++ 417B C0 C0 CC D8 .db $c0, $c0, $cc, $d8, $f8, $cc, $c6, $00,
0151++ 417F F8 CC C6 00 
0152++ 4183 38 18 18 18 .db $38, $18, $18, $18, $18, $18, $3c, $00,
0152++ 4187 18 18 3C 00 
0153++ 418B 00 00 CC FE .db $00, $00, $cc, $fe, $fe, $d6, $d6, $00,
0153++ 418F FE D6 D6 00 
0154++ 4193 00 00 FC C6 .db $00, $00, $fc, $c6, $c6, $c6, $c6, $00,
0154++ 4197 C6 C6 C6 00 
0155++ 419B 00 00 7C C6 .db $00, $00, $7c, $c6, $c6, $c6, $7c, $00,
0155++ 419F C6 C6 7C 00 
0156++ 41A3 00 00 FC C6 .db $00, $00, $fc, $c6, $c6, $fc, $c0, $c0,
0156++ 41A7 C6 FC C0 C0 
0157++ 41AB 00 00 7E C6 .db $00, $00, $7e, $c6, $c6, $7e, $06, $06,
0157++ 41AF C6 7E 06 06 
0158++ 41B3 00 00 FC C6 .db $00, $00, $fc, $c6, $c0, $c0, $c0, $00,
0158++ 41B7 C0 C0 C0 00 
0159++ 41BB 00 00 7E C0 .db $00, $00, $7e, $c0, $7c, $06, $fc, $00,
0159++ 41BF 7C 06 FC 00 
0160++ 41C3 18 18 7E 18 .db $18, $18, $7e, $18, $18, $18, $0e, $00,
0160++ 41C7 18 18 0E 00 
0161++ 41CB 00 00 C6 C6 .db $00, $00, $c6, $c6, $c6, $c6, $7e, $00,
0161++ 41CF C6 C6 7E 00 
0162++ 41D3 00 00 C6 C6 .db $00, $00, $c6, $c6, $c6, $7c, $38, $00,
0162++ 41D7 C6 7C 38 00 
0163++ 41DB 00 00 C6 C6 .db $00, $00, $c6, $c6, $d6, $fe, $6c, $00,
0163++ 41DF D6 FE 6C 00 
0164++ 41E3 00 00 C6 6C .db $00, $00, $c6, $6c, $38, $6c, $c6, $00,
0164++ 41E7 38 6C C6 00 
0165++ 41EB 00 00 C6 C6 .db $00, $00, $c6, $c6, $c6, $7e, $06, $fc,
0165++ 41EF C6 7E 06 FC 
0166++ 41F3 00 00 FE 0C .db $00, $00, $fe, $0c, $38, $60, $fe, $00,
0166++ 41F7 38 60 FE 00 
0167++ 41FB 0E 18 18 70 .db $0e, $18, $18, $70, $18, $18, $0e, $00,
0167++ 41FF 18 18 0E 00 
0168++ 4203 18 18 18 00 .db $18, $18, $18, $00, $18, $18, $18, $00,
0168++ 4207 18 18 18 00 
0169++ 420B 70 18 18 0E .db $70, $18, $18, $0e, $18, $18, $70, $00,
0169++ 420F 18 18 70 00 
0170++ 4213 76 DC 00 00 .db $76, $dc, $00, $00, $00, $00, $00, $00,
0170++ 4217 00 00 00 00 
0171++ 421B 00 10 38 6C .db $00, $10, $38, $6c, $c6, $c6, $fe, $00,
0171++ 421F C6 C6 FE 00 
0172++ 4223 7C C6 C0 C0 .db $7c, $c6, $c0, $c0, $c0, $d6, $7c, $30,
0172++ 4227 C0 D6 7C 30 
0173++ 422B C6 00 C6 C6 .db $c6, $00, $c6, $c6, $c6, $c6, $7e, $00,
0173++ 422F C6 C6 7E 00 
0174++ 4233 0E 00 7C C6 .db $0e, $00, $7c, $c6, $fe, $c0, $7c, $00,
0174++ 4237 FE C0 7C 00 
0175++ 423B 7E 81 3C 06 .db $7e, $81, $3c, $06, $7e, $c6, $7e, $00,
0175++ 423F 7E C6 7E 00 
0176++ 4243 66 00 7C 06 .db $66, $00, $7c, $06, $7e, $c6, $7e, $00,
0176++ 4247 7E C6 7E 00 
0177++ 424B E0 00 7C 06 .db $e0, $00, $7c, $06, $7e, $c6, $7e, $00,
0177++ 424F 7E C6 7E 00 
0178++ 4253 18 18 7C 06 .db $18, $18, $7c, $06, $7e, $c6, $7e, $00,
0178++ 4257 7E C6 7E 00 
0179++ 425B 00 00 7C C6 .db $00, $00, $7c, $c6, $c0, $d6, $7c, $30,
0179++ 425F C0 D6 7C 30 
0180++ 4263 7E 81 7C C6 .db $7e, $81, $7c, $c6, $fe, $c0, $7c, $00,
0180++ 4267 FE C0 7C 00 
0181++ 426B 66 00 7C C6 .db $66, $00, $7c, $c6, $fe, $c0, $7c, $00,
0181++ 426F FE C0 7C 00 
0182++ 4273 E0 00 7C C6 .db $e0, $00, $7c, $c6, $fe, $c0, $7c, $00,
0182++ 4277 FE C0 7C 00 
0183++ 427B 66 00 38 18 .db $66, $00, $38, $18, $18, $18, $3c, $00,
0183++ 427F 18 18 3C 00 
0184++ 4283 7C 82 38 18 .db $7c, $82, $38, $18, $18, $18, $3c, $00,
0184++ 4287 18 18 3C 00 
0185++ 428B 70 00 38 18 .db $70, $00, $38, $18, $18, $18, $3c, $00,
0185++ 428F 18 18 3C 00 
0186++ 4293 C6 10 7C C6 .db $c6, $10, $7c, $c6, $fe, $c6, $c6, $00,
0186++ 4297 FE C6 C6 00 
0187++ 429B 38 38 00 7C .db $38, $38, $00, $7c, $c6, $fe, $c6, $00,
0187++ 429F C6 FE C6 00 
0188++ 42A3 0E 00 FE C0 .db $0e, $00, $fe, $c0, $f8, $c0, $fe, $00,
0188++ 42A7 F8 C0 FE 00 
0189++ 42AB 00 00 7F 0C .db $00, $00, $7f, $0c, $7f, $cc, $7f, $00,
0189++ 42AF 7F CC 7F 00 
0190++ 42B3 3F 6C CC FF .db $3f, $6c, $cc, $ff, $cc, $cc, $cf, $00,
0190++ 42B7 CC CC CF 00 
0191++ 42BB 7C 82 7C C6 .db $7c, $82, $7c, $c6, $c6, $c6, $7c, $00,
0191++ 42BF C6 C6 7C 00 
0192++ 42C3 66 00 7C C6 .db $66, $00, $7c, $c6, $c6, $c6, $7c, $00,
0192++ 42C7 C6 C6 7C 00 
0193++ 42CB E0 00 7C C6 .db $e0, $00, $7c, $c6, $c6, $c6, $7c, $00,
0193++ 42CF C6 C6 7C 00 
0194++ 42D3 7C 82 00 C6 .db $7c, $82, $00, $c6, $c6, $c6, $7e, $00,
0194++ 42D7 C6 C6 7E 00 
0195++ 42DB E0 00 C6 C6 .db $e0, $00, $c6, $c6, $c6, $c6, $7e, $00,
0195++ 42DF C6 C6 7E 00 
0196++ 42E3 66 00 66 66 .db $66, $00, $66, $66, $66, $3e, $06, $7c,
0196++ 42E7 66 3E 06 7C 
0197++ 42EB C6 7C C6 C6 .db $c6, $7c, $c6, $c6, $c6, $c6, $7c, $00,
0197++ 42EF C6 C6 7C 00 
0198++ 42F3 C6 00 C6 C6 .db $c6, $00, $c6, $c6, $c6, $c6, $fe, $00,
0198++ 42F7 C6 C6 FE 00 
0199++ 42FB 18 18 7E D8 .db $18, $18, $7e, $d8, $d8, $d8, $7e, $18,
0199++ 42FF D8 D8 7E 18 
0200++ 4303 38 6C 60 F0 .db $38, $6c, $60, $f0, $60, $66, $fc, $00,
0200++ 4307 60 66 FC 00 
0201++ 430B 66 66 3C 18 .db $66, $66, $3c, $18, $7e, $18, $7e, $18,
0201++ 430F 7E 18 7E 18 
0202++ 4313 F8 CC CC FA .db $f8, $cc, $cc, $fa, $c6, $cf, $c6, $c3,
0202++ 4317 C6 CF C6 C3 
0203++ 431B 0E 1B 18 3C .db $0e, $1b, $18, $3c, $18, $18, $d8, $70,
0203++ 431F 18 18 D8 70 
0204++ 4323 0E 00 7C 06 .db $0e, $00, $7c, $06, $7e, $c6, $7e, $00,
0204++ 4327 7E C6 7E 00 
0205++ 432B 1C 00 38 18 .db $1c, $00, $38, $18, $18, $18, $3c, $00,
0205++ 432F 18 18 3C 00 
0206++ 4333 0E 00 7C C6 .db $0e, $00, $7c, $c6, $c6, $c6, $7c, $00,
0206++ 4337 C6 C6 7C 00 
0207++ 433B 0E 00 C6 C6 .db $0e, $00, $c6, $c6, $c6, $c6, $7e, $00,
0207++ 433F C6 C6 7E 00 
0208++ 4343 00 FE 00 FC .db $00, $fe, $00, $fc, $c6, $c6, $c6, $00,
0208++ 4347 C6 C6 C6 00 
0209++ 434B FE 00 C6 E6 .db $fe, $00, $c6, $e6, $f6, $de, $ce, $00,
0209++ 434F F6 DE CE 00 
0210++ 4353 3C 6C 6C 3E .db $3c, $6c, $6c, $3e, $00, $7e, $00, $00,
0210++ 4357 00 7E 00 00 
0211++ 435B 3C 66 66 3C .db $3c, $66, $66, $3c, $00, $7e, $00, $00,
0211++ 435F 00 7E 00 00 
0212++ 4363 18 00 18 18 .db $18, $00, $18, $18, $30, $66, $3c, $00,
0212++ 4367 30 66 3C 00 
0213++ 436B 00 00 00 FC .db $00, $00, $00, $fc, $c0, $c0, $00, $00,
0213++ 436F C0 C0 00 00 
0214++ 4373 00 00 00 FC .db $00, $00, $00, $fc, $0c, $0c, $00, $00,
0214++ 4377 0C 0C 00 00 
0215++ 437B C6 CC D8 3F .db $c6, $cc, $d8, $3f, $63, $cf, $8c, $0f,
0215++ 437F 63 CF 8C 0F 
0216++ 4383 C3 C6 CC DB .db $c3, $c6, $cc, $db, $37, $6d, $cf, $03,
0216++ 4387 37 6D CF 03 
0217++ 438B 18 00 18 18 .db $18, $00, $18, $18, $18, $18, $18, $00,
0217++ 438F 18 18 18 00 
0218++ 4393 00 33 66 CC .db $00, $33, $66, $cc, $66, $33, $00, $00,
0218++ 4397 66 33 00 00 
0219++ 439B 00 CC 66 33 .db $00, $cc, $66, $33, $66, $cc, $00, $00,
0219++ 439F 66 CC 00 00 
0220++ 43A3 22 88 22 88 .db $22, $88, $22, $88, $22, $88, $22, $88,
0220++ 43A7 22 88 22 88 
0221++ 43AB 55 AA 55 AA .db $55, $aa, $55, $aa, $55, $aa, $55, $aa,
0221++ 43AF 55 AA 55 AA 
0222++ 43B3 DD 77 DD 77 .db $dd, $77, $dd, $77, $dd, $77, $dd, $77,
0222++ 43B7 DD 77 DD 77 
0223++ 43BB 18 18 18 18 .db $18, $18, $18, $18, $18, $18, $18, $18,
0223++ 43BF 18 18 18 18 
0224++ 43C3 18 18 18 18 .db $18, $18, $18, $18, $f8, $18, $18, $18,
0224++ 43C7 F8 18 18 18 
0225++ 43CB 18 18 F8 18 .db $18, $18, $f8, $18, $f8, $18, $18, $18,
0225++ 43CF F8 18 18 18 
0226++ 43D3 36 36 36 36 .db $36, $36, $36, $36, $f6, $36, $36, $36,
0226++ 43D7 F6 36 36 36 
0227++ 43DB 00 00 00 00 .db $00, $00, $00, $00, $fe, $36, $36, $36,
0227++ 43DF FE 36 36 36 
0228++ 43E3 00 00 F8 18 .db $00, $00, $f8, $18, $f8, $18, $18, $18,
0228++ 43E7 F8 18 18 18 
0229++ 43EB 36 36 F6 06 .db $36, $36, $f6, $06, $f6, $36, $36, $36,
0229++ 43EF F6 36 36 36 
0230++ 43F3 36 36 36 36 .db $36, $36, $36, $36, $36, $36, $36, $36,
0230++ 43F7 36 36 36 36 
0231++ 43FB 00 00 FE 06 .db $00, $00, $fe, $06, $f6, $36, $36, $36,
0231++ 43FF F6 36 36 36 
0232++ 4403 36 36 F6 06 .db $36, $36, $f6, $06, $fe, $00, $00, $00,
0232++ 4407 FE 00 00 00 
0233++ 440B 36 36 36 36 .db $36, $36, $36, $36, $fe, $00, $00, $00,
0233++ 440F FE 00 00 00 
0234++ 4413 18 18 F8 18 .db $18, $18, $f8, $18, $f8, $00, $00, $00,
0234++ 4417 F8 00 00 00 
0235++ 441B 00 00 00 00 .db $00, $00, $00, $00, $f8, $18, $18, $18,
0235++ 441F F8 18 18 18 
0236++ 4423 18 18 18 18 .db $18, $18, $18, $18, $1f, $00, $00, $00,
0236++ 4427 1F 00 00 00 
0237++ 442B 18 18 18 18 .db $18, $18, $18, $18, $ff, $00, $00, $00,
0237++ 442F FF 00 00 00 
0238++ 4433 00 00 00 00 .db $00, $00, $00, $00, $ff, $18, $18, $18,
0238++ 4437 FF 18 18 18 
0239++ 443B 18 18 18 18 .db $18, $18, $18, $18, $1f, $18, $18, $18,
0239++ 443F 1F 18 18 18 
0240++ 4443 00 00 00 00 .db $00, $00, $00, $00, $ff, $00, $00, $00,
0240++ 4447 FF 00 00 00 
0241++ 444B 18 18 18 18 .db $18, $18, $18, $18, $ff, $18, $18, $18,
0241++ 444F FF 18 18 18 
0242++ 4453 18 18 1F 18 .db $18, $18, $1f, $18, $1f, $18, $18, $18,
0242++ 4457 1F 18 18 18 
0243++ 445B 36 36 36 36 .db $36, $36, $36, $36, $37, $36, $36, $36,
0243++ 445F 37 36 36 36 
0244++ 4463 36 36 37 30 .db $36, $36, $37, $30, $3f, $00, $00, $00,
0244++ 4467 3F 00 00 00 
0245++ 446B 00 00 3F 30 .db $00, $00, $3f, $30, $37, $36, $36, $36,
0245++ 446F 37 36 36 36 
0246++ 4473 36 36 F7 00 .db $36, $36, $f7, $00, $ff, $00, $00, $00,
0246++ 4477 FF 00 00 00 
0247++ 447B 00 00 FF 00 .db $00, $00, $ff, $00, $f7, $36, $36, $36,
0247++ 447F F7 36 36 36 
0248++ 4483 36 36 37 30 .db $36, $36, $37, $30, $37, $36, $36, $36,
0248++ 4487 37 36 36 36 
0249++ 448B 00 00 FF 00 .db $00, $00, $ff, $00, $ff, $00, $00, $00,
0249++ 448F FF 00 00 00 
0250++ 4493 36 36 F7 00 .db $36, $36, $f7, $00, $f7, $36, $36, $36,
0250++ 4497 F7 36 36 36 
0251++ 449B 18 18 FF 00 .db $18, $18, $ff, $00, $ff, $00, $00, $00,
0251++ 449F FF 00 00 00 
0252++ 44A3 36 36 36 36 .db $36, $36, $36, $36, $ff, $00, $00, $00,
0252++ 44A7 FF 00 00 00 
0253++ 44AB 00 00 FF 00 .db $00, $00, $ff, $00, $ff, $18, $18, $18,
0253++ 44AF FF 18 18 18 
0254++ 44B3 00 00 00 00 .db $00, $00, $00, $00, $ff, $36, $36, $36,
0254++ 44B7 FF 36 36 36 
0255++ 44BB 36 36 36 36 .db $36, $36, $36, $36, $3f, $00, $00, $00,
0255++ 44BF 3F 00 00 00 
0256++ 44C3 18 18 1F 18 .db $18, $18, $1f, $18, $1f, $00, $00, $00,
0256++ 44C7 1F 00 00 00 
0257++ 44CB 00 00 1F 18 .db $00, $00, $1f, $18, $1f, $18, $18, $18,
0257++ 44CF 1F 18 18 18 
0258++ 44D3 00 00 00 00 .db $00, $00, $00, $00, $3f, $36, $36, $36,
0258++ 44D7 3F 36 36 36 
0259++ 44DB 36 36 36 36 .db $36, $36, $36, $36, $ff, $36, $36, $36,
0259++ 44DF FF 36 36 36 
0260++ 44E3 18 18 FF 18 .db $18, $18, $ff, $18, $ff, $18, $18, $18,
0260++ 44E7 FF 18 18 18 
0261++ 44EB 18 18 18 18 .db $18, $18, $18, $18, $f8, $00, $00, $00,
0261++ 44EF F8 00 00 00 
0262++ 44F3 00 00 00 00 .db $00, $00, $00, $00, $1f, $18, $18, $18,
0262++ 44F7 1F 18 18 18 
0263++ 44FB FF FF FF FF .db $ff, $ff, $ff, $ff, $ff, $ff, $ff, $ff,
0263++ 44FF FF FF FF FF 
0264++ 4503 00 00 00 00 .db $00, $00, $00, $00, $ff, $ff, $ff, $ff,
0264++ 4507 FF FF FF FF 
0265++ 450B F0 F0 F0 F0 .db $f0, $f0, $f0, $f0, $f0, $f0, $f0, $f0,
0265++ 450F F0 F0 F0 F0 
0266++ 4513 0F 0F 0F 0F .db $0f, $0f, $0f, $0f, $0f, $0f, $0f, $0f,
0266++ 4517 0F 0F 0F 0F 
0267++ 451B FF FF FF FF .db $ff, $ff, $ff, $ff, $00, $00, $00, $00,
0267++ 451F 00 00 00 00 
0268++ 4523 00 00 76 DC .db $00, $00, $76, $dc, $c8, $dc, $76, $00,
0268++ 4527 C8 DC 76 00 
0269++ 452B 38 6C 6C 78 .db $38, $6c, $6c, $78, $6c, $66, $6c, $60,
0269++ 452F 6C 66 6C 60 
0270++ 4533 00 FE C6 C0 .db $00, $fe, $c6, $c0, $c0, $c0, $c0, $00,
0270++ 4537 C0 C0 C0 00 
0271++ 453B 00 00 FE 6C .db $00, $00, $fe, $6c, $6c, $6c, $6c, $00,
0271++ 453F 6C 6C 6C 00 
0272++ 4543 FE 60 30 18 .db $fe, $60, $30, $18, $30, $60, $fe, $00,
0272++ 4547 30 60 FE 00 
0273++ 454B 00 00 7E D8 .db $00, $00, $7e, $d8, $d8, $d8, $70, $00,
0273++ 454F D8 D8 70 00 
0274++ 4553 00 66 66 66 .db $00, $66, $66, $66, $66, $7c, $60, $c0,
0274++ 4557 66 7C 60 C0 
0275++ 455B 00 76 DC 18 .db $00, $76, $dc, $18, $18, $18, $18, $00,
0275++ 455F 18 18 18 00 
0276++ 4563 7E 18 3C 66 .db $7e, $18, $3c, $66, $66, $3c, $18, $7e,
0276++ 4567 66 3C 18 7E 
0277++ 456B 3C 66 C3 FF .db $3c, $66, $c3, $ff, $c3, $66, $3c, $00,
0277++ 456F C3 66 3C 00 
0278++ 4573 3C 66 C3 C3 .db $3c, $66, $c3, $c3, $66, $66, $e7, $00,
0278++ 4577 66 66 E7 00 
0279++ 457B 0E 18 0C 7E .db $0e, $18, $0c, $7e, $c6, $c6, $7c, $00,
0279++ 457F C6 C6 7C 00 
0280++ 4583 00 00 7E DB .db $00, $00, $7e, $db, $db, $7e, $00, $00,
0280++ 4587 DB 7E 00 00 
0281++ 458B 06 0C 7E DB .db $06, $0c, $7e, $db, $db, $7e, $60, $c0,
0281++ 458F DB 7E 60 C0 
0282++ 4593 38 60 C0 F8 .db $38, $60, $c0, $f8, $c0, $60, $38, $00,
0282++ 4597 C0 60 38 00 
0283++ 459B 78 CC CC CC .db $78, $cc, $cc, $cc, $cc, $cc, $cc, $00,
0283++ 459F CC CC CC 00 
0284++ 45A3 00 7E 00 7E .db $00, $7e, $00, $7e, $00, $7e, $00, $00,
0284++ 45A7 00 7E 00 00 
0285++ 45AB 18 18 7E 18 .db $18, $18, $7e, $18, $18, $00, $7e, $00,
0285++ 45AF 18 00 7E 00 
0286++ 45B3 60 30 18 30 .db $60, $30, $18, $30, $60, $00, $fc, $00,
0286++ 45B7 60 00 FC 00 
0287++ 45BB 18 30 60 30 .db $18, $30, $60, $30, $18, $00, $fc, $00,
0287++ 45BF 18 00 FC 00 
0288++ 45C3 0E 1B 1B 18 .db $0e, $1b, $1b, $18, $18, $18, $18, $18,
0288++ 45C7 18 18 18 18 
0289++ 45CB 18 18 18 18 .db $18, $18, $18, $18, $18, $d8, $d8, $70,
0289++ 45CF 18 D8 D8 70 
0290++ 45D3 18 18 00 7E .db $18, $18, $00, $7e, $00, $18, $18, $00,
0290++ 45D7 00 18 18 00 
0291++ 45DB 00 76 DC 00 .db $00, $76, $dc, $00, $76, $dc, $00, $00,
0291++ 45DF 76 DC 00 00 
0292++ 45E3 38 6C 6C 38 .db $38, $6c, $6c, $38, $00, $00, $00, $00,
0292++ 45E7 00 00 00 00 
0293++ 45EB 00 00 00 18 .db $00, $00, $00, $18, $18, $00, $00, $00,
0293++ 45EF 18 00 00 00 
0294++ 45F3 00 00 00 00 .db $00, $00, $00, $00, $18, $00, $00, $00,
0294++ 45F7 18 00 00 00 
0295++ 45FB 0F 0C 0C 0C .db $0f, $0c, $0c, $0c, $ec, $6c, $3c, $1c,
0295++ 45FF EC 6C 3C 1C 
0296++ 4603 78 6C 6C 6C .db $78, $6c, $6c, $6c, $6c, $00, $00, $00,
0296++ 4607 6C 00 00 00 
0297++ 460B 7C 0C 7C 60 .db $7c, $0c, $7c, $60, $7c, $00, $00, $00,
0297++ 460F 7C 00 00 00 
0298++ 4613 00 00 3C 3C .db $00, $00, $3c, $3c, $3c, $3c, $00, $00,
0298++ 4617 3C 3C 00 00 
0299++ 461B 00 10 00 00 .db $00, $10, $00, $00, $00, $00, $00, $00
0299++ 461F 00 00 00 00 
0300++ 4623             
0301++ 4623             ; vim: filetype=asm
0101+  4623             ; vim: filetype=asm
2418   4623             
2419   4623                     .include "fish.inc"
0001+  4623             ; Opened image graphics/outline1.png 16x16
0002+  4623             ;     212   222222 
0003+  4623             ;     212  22111122
0004+  4623             ;     2222221122212
0005+  4623             ;  222 211211222212
0006+  4623             ;  1122211212222122
0007+  4623             ;  2221122112221212
0008+  4623             ;    2112112121212 
0009+  4623             ;    222112111222  
0010+  4623             ;   22111212121122 
0011+  4623             ;  221122111111112 
0012+  4623             ;  2112222121122222
0013+  4623             ;  2122221211211112
0014+  4623             ;  2122212211211222
0015+  4623             ;  2122121221212112
0016+  4623             ;  2211212 22212122
0017+  4623             ;   22222    22222 
0018+  4623             fisha0:
0019+  4623 08 00 08 3C 	.db  $08,$00,$08,$3c,$00,$62,$06,$c2,$c6,$84,$19,$8a,$1b,$54,$06,$e0,$1d,$58,$33,$fc,$61,$60,$42,$de,$44,$d8,$4a,$56,$34,$14,$00,$00
0019+  4627 00 62 06 C2 
0019+  462B C6 84 19 8A 
0019+  462F 1B 54 06 E0 
0019+  4633 1D 58 33 FC 
0019+  4637 61 60 42 DE 
0019+  463B 44 D8 4A 56 
0019+  463F 34 14 00 00 
0020+  4643             fisha1:
0021+  4643 14 7E 14 C3 	.db  $14,$7e,$14,$c3,$1f,$9d,$e9,$3d,$39,$7b,$e6,$75,$24,$aa,$39,$1c,$62,$a6,$cc,$02,$9e,$9f,$bd,$21,$bb,$27,$b5,$a9,$ca,$eb,$7c,$3e
0021+  4647 1F 9D E9 3D 
0021+  464B 39 7B E6 75 
0021+  464F 24 AA 39 1C 
0021+  4653 62 A6 CC 02 
0021+  4657 9E 9F BD 21 
0021+  465B BB 27 B5 A9 
0021+  465F CA EB 7C 3E 
0022+  4663             ; Opened image graphics/outline2.png 16x16
0023+  4663             ;     212          
0024+  4663             ;     212  22222   
0025+  4663             ;     22222211122  
0026+  4663             ;  222 21121121122 
0027+  4663             ;  112221121222112 
0028+  4663             ;  222112211222122 
0029+  4663             ;    2112112121212 
0030+  4663             ;    222112111212  
0031+  4663             ;   22111212121122 
0032+  4663             ;   21122111111112 
0033+  4663             ;   212222121122222
0034+  4663             ;   211221211211112
0035+  4663             ;   221112111211222
0036+  4663             ;    22121221212112
0037+  4663             ;     2222 22212122
0038+  4663             ;            22222 
0039+  4663             fishb0:
0040+  4663 08 00 08 00 	.db  $08,$00,$08,$00,$00,$70,$06,$d8,$c6,$8c,$19,$88,$1b,$54,$06,$e8,$1d,$58,$33,$fc,$21,$60,$32,$de,$1d,$d8,$0a,$56,$00,$14,$00,$00
0040+  4667 00 70 06 D8 
0040+  466B C6 8C 19 88 
0040+  466F 1B 54 06 E8 
0040+  4673 1D 58 33 FC 
0040+  4677 21 60 32 DE 
0040+  467B 1D D8 0A 56 
0040+  467F 00 14 00 00 
0041+  4683             fishb1:
0042+  4683 14 00 14 F8 	.db  $14,$00,$14,$f8,$1f,$8c,$e9,$26,$39,$72,$e6,$76,$24,$aa,$39,$14,$62,$a6,$4c,$02,$5e,$9f,$4d,$21,$62,$27,$35,$a9,$1e,$eb,$00,$3e
0042+  4687 1F 8C E9 26 
0042+  468B 39 72 E6 76 
0042+  468F 24 AA 39 14 
0042+  4693 62 A6 4C 02 
0042+  4697 5E 9F 4D 21 
0042+  469B 62 27 35 A9 
0042+  469F 1E EB 00 3E 
2420   46A3             fishz0: .ds 32   ; empty sprite for wiping
2421   46C3                     .include "drawfish.inc"
0001+  46C3             ;drawfish: 
0002+  46C3             ;                lxi h, $d000 + FISH_Y
0003+  46C3             ;                lxi d, fishb0
0004+  46C3             ;                call drawspr
0005+  46C3             ;                lxi h, $f000 + FISH_Y
0006+  46C3             ;                lxi d, fishb1
0007+  46C3             ;                call drawspr
0008+  46C3             ;                ret
0009+  46C3             
0010+  46C3             maybe_wipe_fish:
0011+  46C3                             ;mvi a, $ff
0012+  46C3                             ;sta fish_wraparound_flag
0013+  46C3                             ;lda msgseq_end_flag
0014+  46C3                             ;ora a
0015+  46C3                             ;rz
0016+  46C3 AF                          xra a
0017+  46C4 32 42 39                    sta fish_enabled
0018+  46C7                             ; time to let go of the fish
0019+  46C7 11 A3 46                    lxi d, fishz0
0020+  46CA 26 80                       mvi h, FISH_BP;$c0
0021+  46CC 2E 60                       mvi l, FISH_Y
0022+  46CE             
0023+  46CE 01 08 02                    lxi b, $0208
0024+  46D1             mwf_l2:
0025+  46D1 AF                          xra a
0026+  46D2             mwf_l1:
0027+  46D2 77                          mov m, a \ inr h \ mov m, a \ dcr l
0027+  46D3 24          
0027+  46D4 77          
0027+  46D5 2D          
0028+  46D6 77                          mov m, a \ dcr h \ mov m, a \ dcr l
0028+  46D7 25          
0028+  46D8 77          
0028+  46D9 2D          
0029+  46DA 0D                          dcr c
0030+  46DB C2 D2 46                    jnz mwf_l1
0031+  46DE 3E 20                       mvi a, $20
0032+  46E0 84                          add h
0033+  46E1 67                          mov h, a
0034+  46E2 2E 60                       mvi l, FISH_Y
0035+  46E4 05                          dcr b
0036+  46E5 C2 D1 46                    jnz mwf_l2
0037+  46E8             
0038+  46E8 C3 6D 0A                    jmp fade_to_blue 
0039+  46EB                           
0040+  46EB                             ;ret
0041+  46EB             
0042+  46EB             drawfish_a:
0043+  46EB 7E                          mov a, m
0044+  46EC FE 1E                       cpi $1e
0045+  46EE F2 C3 46                    jp maybe_wipe_fish
0046+  46F1                             ;rp
0047+  46F1             
0048+  46F1 11 23 46                    lxi d, fisha0
0049+  46F4 01 43 46                    lxi b, fisha1
0050+  46F7 C3 06 47                    jmp drawfish_b2
0051+  46FA             
0052+  46FA             drawfish_b:
0053+  46FA 7E                          mov a, m
0054+  46FB FE 1E                       cpi $1e
0055+  46FD F2 C3 46                    jp maybe_wipe_fish
0056+  4700             
0057+  4700 11 63 46                    lxi d, fishb0
0058+  4703 01 83 46                    lxi b, fishb1
0059+  4706             drawfish_b2:
0060+  4706 3E 80                       mvi a, FISH_BP
0061+  4708 86                          add m
0062+  4709 3C                          inr a
0063+  470A 67                          mov h, a
0064+  470B 2E 60                       mvi l, FISH_Y
0065+  470D E5                          push h
0066+  470E CD 18 47                    call drawspr
0067+  4711 E1                          pop h
0068+  4712 3E 20                       mvi a, $20
0069+  4714 84                          add h
0070+  4715 67                          mov h, a
0071+  4716 59          				mov e,c
0072+  4717 50          				mov d,b
0073+  4718                             
0074+  4718             drawspr:
0075+  4718 CD 1B 47    				call $+3
0076+  471B 1A                          ldax d \ mov m, a \ inx d \ inr h
0076+  471C 77          
0076+  471D 13          
0076+  471E 24          
0077+  471F 1A                          ldax d \ mov m, a \ inx d \ dcr h \ dcr l
0077+  4720 77          
0077+  4721 13          
0077+  4722 25          
0077+  4723 2D          
0078+  4724 1A                          ldax d \ mov m, a \ inx d \ inr h
0078+  4725 77          
0078+  4726 13          
0078+  4727 24          
0079+  4728 1A                          ldax d \ mov m, a \ inx d \ dcr h \ dcr l
0079+  4729 77          
0079+  472A 13          
0079+  472B 25          
0079+  472C 2D          
0080+  472D 1A                          ldax d \ mov m, a \ inx d \ inr h
0080+  472E 77          
0080+  472F 13          
0080+  4730 24          
0081+  4731 1A                          ldax d \ mov m, a \ inx d \ dcr h \ dcr l
0081+  4732 77          
0081+  4733 13          
0081+  4734 25          
0081+  4735 2D          
0082+  4736 1A                          ldax d \ mov m, a \ inx d \ inr h
0082+  4737 77          
0082+  4738 13          
0082+  4739 24          
0083+  473A 1A                          ldax d \ mov m, a \ inx d \ dcr h \ dcr l
0083+  473B 77          
0083+  473C 13          
0083+  473D 25          
0083+  473E 2D          
0084+  473F 1A                          ldax d \ mov m, a \ inx d \ inr h
0084+  4740 77          
0084+  4741 13          
0084+  4742 24          
0085+  4743 1A                          ldax d \ mov m, a \ inx d \ dcr h \ dcr l
0085+  4744 77          
0085+  4745 13          
0085+  4746 25          
0085+  4747 2D          
0086+  4748 1A                          ldax d \ mov m, a \ inx d \ inr h
0086+  4749 77          
0086+  474A 13          
0086+  474B 24          
0087+  474C 1A                          ldax d \ mov m, a \ inx d \ dcr h \ dcr l
0087+  474D 77          
0087+  474E 13          
0087+  474F 25          
0087+  4750 2D          
0088+  4751 1A                          ldax d \ mov m, a \ inx d \ inr h
0088+  4752 77          
0088+  4753 13          
0088+  4754 24          
0089+  4755 1A                          ldax d \ mov m, a \ inx d \ dcr h \ dcr l
0089+  4756 77          
0089+  4757 13          
0089+  4758 25          
0089+  4759 2D          
0090+  475A 1A                          ldax d \ mov m, a \ inx d \ inr h
0090+  475B 77          
0090+  475C 13          
0090+  475D 24          
0091+  475E 1A                          ldax d \ mov m, a \ inx d \ dcr h \ dcr l
0091+  475F 77          
0091+  4760 13          
0091+  4761 25          
0091+  4762 2D          
0092+  4763 C9                          ret
0093+  4764                             
0094+  4764                             ; fish swimming
0095+  4764             dumbshift:
0096+  4764 3A 41 39                    lda fish_col
0097+  4767 C6 80                       adi FISH_BP;$c0
0098+  4769 47                          mov b, a
0099+  476A 3C                          inr a
0100+  476B E6 1F                       ani $1f
0101+  476D C6 80                       adi FISH_BP;$c0
0102+  476F 57                          mov d, a
0103+  4770             
0104+  4770 3C                          inr a 
0105+  4771 E6 1F                       ani $1f
0106+  4773 C6 80                       adi FISH_BP;$c0
0107+  4775 67                          mov h, a
0108+  4776             
0109+  4776 CD 9C 47                    call oneshift
0110+  4779             
0111+  4779 3E 20       				mvi a,20h\ add h\ mov h,a
0111+  477B 84          
0111+  477C 67          
0112+  477D 3E 20       				mvi a,20h\ add d\ mov d,a
0112+  477F 82          
0112+  4780 57          
0113+  4781 3E 20       				mvi a,20h\ add b\ mov b,a
0113+  4783 80          
0113+  4784 47          
0114+  4785             
0115+  4785 CD 9C 47                    call oneshift
0116+  4788             
0117+  4788 21 40 39                    lxi h, fish_col_frac
0118+  478B 7E                          mov a, m
0119+  478C 07                          rlc
0120+  478D 77                          mov m, a
0121+  478E D0                          rnc
0122+  478F             
0123+  478F 23                          inx h       ; hl = &fish_col
0124+  4790 7E                          mov a, m
0125+  4791 3D                          dcr a       ; previous column
0126+  4792 E6 1F                       ani $1f
0127+  4794 77                          mov m, a
0128+  4795             
0129+  4795                             ; switch sprite
0130+  4795 1F                          rar ; lsb
0131+  4796 DA EB 46                    jc  drawfish_a
0132+  4799 C3 FA 46                    jmp drawfish_b
0133+  479C                             ;ret
0134+  479C             
0135+  479C             oneshift:
0136+  479C 2E 60                       mvi l, FISH_Y \ mov e, l \ mov c, l
0136+  479E 5D          
0136+  479F 4D          
0137+  47A0             
0138+  47A0 7E                          mov a, m \ add a \ mov m, a 
0138+  47A1 87          
0138+  47A2 77          
0139+  47A3 1A                                     ldax d \ ral \ stax d
0139+  47A4 17          
0139+  47A5 12          
0140+  47A6 0A                                     ldax b \ ral \ stax b \ dcr l \ dcr e \ dcr c
0140+  47A7 17          
0140+  47A8 02          
0140+  47A9 2D          
0140+  47AA 1D          
0140+  47AB 0D          
0141+  47AC 7E                          mov a, m \ add a \ mov m, a 
0141+  47AD 87          
0141+  47AE 77          
0142+  47AF 1A                                     ldax d \ ral \ stax d
0142+  47B0 17          
0142+  47B1 12          
0143+  47B2 0A                                     ldax b \ ral \ stax b \ dcr l \ dcr e \ dcr c
0143+  47B3 17          
0143+  47B4 02          
0143+  47B5 2D          
0143+  47B6 1D          
0143+  47B7 0D          
0144+  47B8 7E                          mov a, m \ add a \ mov m, a 
0144+  47B9 87          
0144+  47BA 77          
0145+  47BB 1A                                     ldax d \ ral \ stax d
0145+  47BC 17          
0145+  47BD 12          
0146+  47BE 0A                                     ldax b \ ral \ stax b \ dcr l \ dcr e \ dcr c
0146+  47BF 17          
0146+  47C0 02          
0146+  47C1 2D          
0146+  47C2 1D          
0146+  47C3 0D          
0147+  47C4 7E                          mov a, m \ add a \ mov m, a 
0147+  47C5 87          
0147+  47C6 77          
0148+  47C7 1A                                     ldax d \ ral \ stax d
0148+  47C8 17          
0148+  47C9 12          
0149+  47CA 0A                                     ldax b \ ral \ stax b \ dcr l \ dcr e \ dcr c
0149+  47CB 17          
0149+  47CC 02          
0149+  47CD 2D          
0149+  47CE 1D          
0149+  47CF 0D          
0150+  47D0 7E                          mov a, m \ add a \ mov m, a 
0150+  47D1 87          
0150+  47D2 77          
0151+  47D3 1A                                     ldax d \ ral \ stax d
0151+  47D4 17          
0151+  47D5 12          
0152+  47D6 0A                                     ldax b \ ral \ stax b \ dcr l \ dcr e \ dcr c
0152+  47D7 17          
0152+  47D8 02          
0152+  47D9 2D          
0152+  47DA 1D          
0152+  47DB 0D          
0153+  47DC 7E                          mov a, m \ add a \ mov m, a 
0153+  47DD 87          
0153+  47DE 77          
0154+  47DF 1A                                     ldax d \ ral \ stax d
0154+  47E0 17          
0154+  47E1 12          
0155+  47E2 0A                                     ldax b \ ral \ stax b \ dcr l \ dcr e \ dcr c
0155+  47E3 17          
0155+  47E4 02          
0155+  47E5 2D          
0155+  47E6 1D          
0155+  47E7 0D          
0156+  47E8 7E                          mov a, m \ add a \ mov m, a 
0156+  47E9 87          
0156+  47EA 77          
0157+  47EB 1A                                     ldax d \ ral \ stax d
0157+  47EC 17          
0157+  47ED 12          
0158+  47EE 0A                                     ldax b \ ral \ stax b \ dcr l \ dcr e \ dcr c
0158+  47EF 17          
0158+  47F0 02          
0158+  47F1 2D          
0158+  47F2 1D          
0158+  47F3 0D          
0159+  47F4 7E                          mov a, m \ add a \ mov m, a 
0159+  47F5 87          
0159+  47F6 77          
0160+  47F7 1A                                     ldax d \ ral \ stax d
0160+  47F8 17          
0160+  47F9 12          
0161+  47FA 0A                                     ldax b \ ral \ stax b \ dcr l \ dcr e \ dcr c
0161+  47FB 17          
0161+  47FC 02          
0161+  47FD 2D          
0161+  47FE 1D          
0161+  47FF 0D          
0162+  4800 7E                          mov a, m \ add a \ mov m, a 
0162+  4801 87          
0162+  4802 77          
0163+  4803 1A                                     ldax d \ ral \ stax d
0163+  4804 17          
0163+  4805 12          
0164+  4806 0A                                     ldax b \ ral \ stax b \ dcr l \ dcr e \ dcr c
0164+  4807 17          
0164+  4808 02          
0164+  4809 2D          
0164+  480A 1D          
0164+  480B 0D          
0165+  480C 7E                          mov a, m \ add a \ mov m, a 
0165+  480D 87          
0165+  480E 77          
0166+  480F 1A                                     ldax d \ ral \ stax d
0166+  4810 17          
0166+  4811 12          
0167+  4812 0A                                     ldax b \ ral \ stax b \ dcr l \ dcr e \ dcr c
0167+  4813 17          
0167+  4814 02          
0167+  4815 2D          
0167+  4816 1D          
0167+  4817 0D          
0168+  4818 7E                          mov a, m \ add a \ mov m, a 
0168+  4819 87          
0168+  481A 77          
0169+  481B 1A                                     ldax d \ ral \ stax d
0169+  481C 17          
0169+  481D 12          
0170+  481E 0A                                     ldax b \ ral \ stax b \ dcr l \ dcr e \ dcr c
0170+  481F 17          
0170+  4820 02          
0170+  4821 2D          
0170+  4822 1D          
0170+  4823 0D          
0171+  4824 7E                          mov a, m \ add a \ mov m, a 
0171+  4825 87          
0171+  4826 77          
0172+  4827 1A                                     ldax d \ ral \ stax d
0172+  4828 17          
0172+  4829 12          
0173+  482A 0A                                     ldax b \ ral \ stax b \ dcr l \ dcr e \ dcr c
0173+  482B 17          
0173+  482C 02          
0173+  482D 2D          
0173+  482E 1D          
0173+  482F 0D          
0174+  4830 7E                          mov a, m \ add a \ mov m, a 
0174+  4831 87          
0174+  4832 77          
0175+  4833 1A                                     ldax d \ ral \ stax d
0175+  4834 17          
0175+  4835 12          
0176+  4836 0A                                     ldax b \ ral \ stax b \ dcr l \ dcr e \ dcr c
0176+  4837 17          
0176+  4838 02          
0176+  4839 2D          
0176+  483A 1D          
0176+  483B 0D          
0177+  483C 7E                          mov a, m \ add a \ mov m, a 
0177+  483D 87          
0177+  483E 77          
0178+  483F 1A                                     ldax d \ ral \ stax d
0178+  4840 17          
0178+  4841 12          
0179+  4842 0A                                     ldax b \ ral \ stax b \ dcr l \ dcr e \ dcr c
0179+  4843 17          
0179+  4844 02          
0179+  4845 2D          
0179+  4846 1D          
0179+  4847 0D          
0180+  4848 7E                          mov a, m \ add a \ mov m, a 
0180+  4849 87          
0180+  484A 77          
0181+  484B 1A                                     ldax d \ ral \ stax d
0181+  484C 17          
0181+  484D 12          
0182+  484E 0A                                     ldax b \ ral \ stax b \ dcr l \ dcr e \ dcr c
0182+  484F 17          
0182+  4850 02          
0182+  4851 2D          
0182+  4852 1D          
0182+  4853 0D          
0183+  4854 7E                          mov a, m \ add a \ mov m, a 
0183+  4855 87          
0183+  4856 77          
0184+  4857 1A                                     ldax d \ ral \ stax d
0184+  4858 17          
0184+  4859 12          
0185+  485A 0A                                     ldax b \ ral \ stax b ; \ dcr l \ dcr e \ dcr c
0185+  485B 17          
0185+  485C 02          
0186+  485D                             
0187+  485D C9                          ret
0188+  485E             
0189+  485E             ; vim: filetype=asm
2422   485E             
2423   4FFF                     .org PLAYER_BASE-1
2424   4FFF 00                  .db 0
2425   5000             
2426   5000             player_init .equ PLAYER_BASE+0
2427   5000             player_tick .equ PLAYER_BASE+3
2428   5000             songe       .equ PLAYER_BASE+6
2429   5000             
2430   5000                     .end
2431   5000                     
2432   5000                     
2433   5000             ; code snippets cemetery
2434   5000             
2435   5000                     ; xor-swap, register-saving but too slow
2436   5000                     ; xra m           ; X = Y xor X  (X = *hl)
2437   5000                     ; mov m, a
2438   5000                     ; dcx h
2439   5000                     ; xra m
2440   5000                     ; mov m, a        ; Y = X xor Y 
2441   5000                     ; inx h
2442   5000                     ; xra m
2443   5000                     ; mov m, a        ; = 64/swap
2444   5000                     
2445   5000                     
2446   5000             
2447   5000                     ; ora a           ; $00 -> Z=1                    -> continue
2448   5000                     ;                 ; $80 -> Z=0, S=1, P=0          -> A (fill)
2449   5000                     ;                 ; $C0 -> Z=0, S=1, P=1          -> continue
2450   5000                     ;                 ; $40 -> Z=0, S=0, P=0          -> B (wipe)
2451   5000             
2452   5000                     ; add a           ; CY = state_a, S = state_b
2453   5000                     ;                 ; $80 -> C=1, Z=1, P=1, S=0
2454   5000                     ;                 ; $00 -> C=0, Z=1, P=1, S=0     ~ !state_a & !state_b
2455   5000                     ;                 ; $40 -> C=0, Z=0, P=0, S=1
2456   5000                     ;                 ; $C0 -> C=1, Z=0, P=0, S=1     ~ state_a & state_b
2457   5000                     
tasm: Number of errors = 0
